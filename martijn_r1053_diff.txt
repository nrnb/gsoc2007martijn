Index: trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1052)
+++ trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1053)
@@ -46,7 +46,7 @@
 	private static URL IMG_COPY= Engine.getResourceURL("icons/copy.gif");
 	private static URL IMG_PASTE = Engine.getResourceURL("icons/paste.gif");
 	
-	static class ZoomAction extends AbstractAction {
+	public static class ZoomAction extends AbstractAction {
 		Component parent;
 		double zoomFactor;
 		
Index: trunk/tools/ensembl2visio/ensembl2visio/MckoiGDBMaker.java
===================================================================
--- trunk/tools/ensembl2visio/ensembl2visio/MckoiGDBMaker.java	(revision 1052)
+++ trunk/tools/ensembl2visio/ensembl2visio/MckoiGDBMaker.java	(revision 1053)
@@ -1,62 +1,62 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
-package ensembl2visio;
-
-import java.sql.DriverManager;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.Properties;
-
-
-public class MckoiGDBMaker extends GDBMaker {
-	
-	public MckoiGDBMaker(String dbName) {
-		super(dbName);
-	}
-
-    public void connect() throws ClassNotFoundException, SQLException {
-    	Properties prop = new Properties();
-    	prop.setProperty("user","sa");
-    	prop.setProperty("password","");
-   
-    	Class.forName("org.hsqldb.jdbcDriver");
-    	String url = "jdbc:mckoi:local://mckoi/" + getDbName() + "?create=true";
-    	con = DriverManager.getConnection(url, prop);
-    	con.setAutoCommit(true);
-    }
-	
-	String getDbName() {
-		return "mckoi/" + super.getDbName() + ".conf";
-	}
-	
-	public void compact() throws SQLException {
-		con.commit();
-
-		Statement s = con.createStatement();
-		
-		s.execute("COMPACT TABLE gene");
-		s.execute("COMPACT TABLE link");
-		
-		con.commit(); //Just to be sure...
-	}
-
-	public void connect(boolean create) throws ClassNotFoundException, SQLException {
-		connect();		
-	}
-
-}
-
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package ensembl2visio;
+
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Properties;
+
+
+public class MckoiGDBMaker extends GDBMaker {
+	
+	public MckoiGDBMaker(String dbName) {
+		super(dbName);
+	}
+
+    public void connect() throws ClassNotFoundException, SQLException {
+    	Properties prop = new Properties();
+    	prop.setProperty("user","sa");
+    	prop.setProperty("password","");
+   
+    	Class.forName("org.hsqldb.jdbcDriver");
+    	String url = "jdbc:mckoi:local://mckoi/" + getDbName() + "?create=true";
+    	con = DriverManager.getConnection(url, prop);
+    	con.setAutoCommit(true);
+    }
+	
+	String getDbName() {
+		return "mckoi/" + super.getDbName() + ".conf";
+	}
+	
+	public void compact() throws SQLException {
+		con.commit();
+
+		Statement s = con.createStatement();
+		
+		s.execute("COMPACT TABLE gene");
+		s.execute("COMPACT TABLE link");
+		
+		con.commit(); //Just to be sure...
+	}
+
+	public void connect(boolean create) throws ClassNotFoundException, SQLException {
+		connect();		
+	}
+
+}
+

Property changes on: trunk/tools/ensembl2visio/ensembl2visio/MckoiGDBMaker.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1052)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1053)
@@ -136,8 +136,10 @@
 					}
 				}
 			}
+			
+			Logger.log.trace (PwyElt.summary (oldElt) + "/" + PwyElt.summary (maxNewElt) + "/" + maxScore);
 
-			if (maxNewElt != null && maxScore > 70)
+			if (maxNewElt != null && maxScore > 49)
 			{
 				// add pairing to search tree.
 				SearchNode newNode = new SearchNode (currentNode, oldElt, maxNewElt, 0);
@@ -177,6 +179,7 @@
 			// if the oldElt doesn't have a corresponding newElt...
 			if (!bothOld.contains(oldElt))
 			{
+				assert (oldElt != null);
 				// then we have a deletion
 				out.delete (oldElt);
 			}
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 0)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1053)
@@ -0,0 +1,162 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.awt.event.*;
+import java.awt.*;
+import javax.swing.*;
+import org.pathvisio.gui.swing.*;
+import org.pathvisio.view.VPathway;
+import org.pathvisio.model.Pathway;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.view.swing.VPathwaySwing;
+import org.pathvisio.debug.Logger;
+
+class GpmlDiffWindow extends JFrame
+{
+	private static final int WINDOW_WIDTH = 1000;
+	private static final int WINDOW_HEIGHT = 500;
+
+	private JScrollPane[] pwyPane = new JScrollPane[2];
+	private JMenuBar menubar;
+
+	private static final int PWY_OLD = 0;
+	private static final int PWY_NEW = 1;
+
+	private VPathwaySwing[] wrapper = new VPathwaySwing[2];
+	private VPathway[] view = new VPathway[2];
+
+	private class LoadPwyAction extends AbstractAction
+	{
+		private int pwyType;
+		private JFrame parent;
+		
+		public LoadPwyAction (JFrame window, int value)
+		{
+			super ("Load " + ((value == PWY_OLD) ? "old" : "new")  + " pathway");
+			String s = (value == PWY_OLD) ? "old" : "new";
+			putValue (Action.SHORT_DESCRIPTION, "Load the " + s + " pathway");
+			putValue (Action.LONG_DESCRIPTION, "Load the " + s + " pathway");
+			pwyType = value;
+			parent = window;
+		}
+
+		public void actionPerformed(ActionEvent e)
+		{
+			JFileChooser jfc = new JFileChooser();
+			jfc.setDialogTitle("Load a pathway");
+			jfc.setDialogType (JFileChooser.OPEN_DIALOG);
+			
+			int status = jfc.showDialog (parent, "Load");
+			if (status == JFileChooser.APPROVE_OPTION)
+			{
+				Pathway pwy = new Pathway();
+				try
+				{
+					pwy.readFromXml(jfc.getSelectedFile(), true);
+					
+					wrapper[pwyType] = new VPathwaySwing(pwyPane[pwyType]);
+
+					view[pwyType] = wrapper[pwyType].createVPathway();
+					view[pwyType].fromGmmlData(pwy);
+				}
+				
+				catch (ConverterException ce)
+				{
+					JOptionPane.showMessageDialog (
+						parent,
+						"Exception while opening gpml file.\n" +
+						"Please check that the file you opened is a valid Gpml file.",
+						"Open Error", JOptionPane.ERROR_MESSAGE);
+					Logger.log.error ("Error opening gpml", ce);
+				}
+			}
+		}
+	}
+
+	class CloseAction extends AbstractAction
+	{
+		JFrame parent;
+		public CloseAction(JFrame _parent)
+		{
+			super("Close");
+			parent = _parent;
+		}
+
+		public void actionPerformed (ActionEvent e)
+		{
+			parent.dispose();
+			System.exit(0);
+		}
+	}
+
+	class CenterAction extends AbstractAction
+	{
+		public CenterAction()
+		{
+			super ("Center");
+		}
+
+		public void actionPerformed (ActionEvent e)
+		{
+		}
+	}
+	
+	void addMenuActions()
+	{
+		JMenu filemenu = new JMenu ("File");
+		filemenu.add (new LoadPwyAction(this, PWY_OLD));
+		filemenu.add (new LoadPwyAction(this, PWY_NEW));
+		filemenu.add (new CloseAction(this));
+
+		JMenu viewmenu = new JMenu ("View");
+		viewmenu.add (new CommonActions.ZoomAction(VPathway.ZOOM_TO_FIT));
+		viewmenu.add (new CommonActions.ZoomAction(30));
+		viewmenu.add (new CommonActions.ZoomAction(50));
+		viewmenu.add (new CommonActions.ZoomAction(75));
+		viewmenu.add (new CommonActions.ZoomAction(100));
+		viewmenu.add (new CommonActions.ZoomAction(120));
+		viewmenu.addSeparator();
+		viewmenu.add (new CenterAction());
+		
+		menubar.add (filemenu);
+		menubar.add (viewmenu);					  
+	}
+	
+	GpmlDiffWindow ()
+	{
+		super ();
+
+		setSize (WINDOW_WIDTH, WINDOW_HEIGHT);
+		Container contents = getContentPane();
+		contents.setLayout (new BorderLayout());
+		setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
+		
+		menubar = new JMenuBar();
+		addMenuActions ();
+		setJMenuBar (menubar);
+
+		for (int i = 0; i < 2; ++i)
+		{
+			pwyPane[i] = new JScrollPane();
+		}
+
+		contents.add (pwyPane[PWY_OLD], BorderLayout.WEST);
+		contents.add (pwyPane[PWY_NEW], BorderLayout.EAST);
+	}
+
+}
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 1052)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 1053)
@@ -19,6 +19,7 @@
 import java.util.*;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PropertyType;
+import org.pathvisio.model.ObjectType;
 
 /**
    Utility class for pathway element methods related to gpmldiff.
@@ -27,7 +28,7 @@
 {			
 	static String summary(PathwayElement elt)
 	{
-		String result = "[" + elt.getObjectType();
+		String result = "[" + ObjectType.getTagMapping (elt.getObjectType());
 		String tmp;
 		List<PropertyType> props = elt.getAttributes(true);
 		if (props.contains(PropertyType.TEXTLABEL))
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 1052)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 1053)
@@ -38,7 +38,7 @@
 		int pos = 0;
 		String error = null;
 		if (pos >= argv.length) error = "Expected -o or old pathway file";
-		if (argv[pos].equals ("-o"))
+		if (error == null && argv[pos].equals ("-o"))
 		{
 			pos++;
 			if (pos >= argv.length) error = "Expected -o or old pathway file";
@@ -88,12 +88,12 @@
 		System.out.print (
 			"GpmlDiff\n" +
 			"\n" +
+			"Finds the difference between two Pathways in gpml format\n" +
+			"\n" +
 			"Usage:\n" +
 			"  gpmldiff [-o svg|dgpml] old.gpml new.gpml\n" +
 			"  -o: output format. Choose svg for the visual output or dgpml for the\n" +
-            "      gpmldiff patch format\n" +
-			"\n" +
-			"Finds the difference between the two files\n"
+            "      gpmldiff patch format\n"
 			);
 		System.exit(1);
 	}
@@ -103,16 +103,18 @@
 	*/
     public static void main(String argv[])
 	{
-		try
-		{
-			Logger.log.setStream (new PrintStream("log.txt"));
-		}
-		catch (IOException e) {}
+//		try
+//		{
+//			Logger.log.setStream (new PrintStream("log.txt"));
+//		}
+//		catch (IOException e) {}
+		Logger.log.setStream (System.err);
+		Logger.log.setLogLevel (true, true, true, true, true, true);
 		if (parseCliOptions(argv))
 		{
 			PwyDoc oldDoc = PwyDoc.read (oldFile);
 			PwyDoc newDoc = PwyDoc.read (newFile);
-			SearchNode result = oldDoc.findCorrespondence (newDoc, new BasicSim(), new BasicCost());
+			SearchNode result = oldDoc.findCorrespondence (newDoc, new BetterSim(), new BasicCost());
 
 			DiffOutputter out = null;
 			if (outputType.equals ("basic"))
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 1052)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 1053)
@@ -31,6 +31,8 @@
 import java.io.*;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.Set;
+import java.util.HashSet;
 import java.util.Collections;
 import org.apache.batik.dom.GenericDOMImplementation;
 import org.apache.batik.svggen.SVGGraphics2D;
@@ -42,16 +44,21 @@
 import org.pathvisio.view.VPathwayElement;
 import org.w3c.dom.DOMImplementation;
 import org.w3c.dom.Document;
+import org.pathvisio.model.ObjectType;
+import org.pathvisio.debug.Logger;
 
 class SvgOutputter extends DiffOutputter
 {
 	// graphics parameters
-	private static final int BALOON_Y_SPACER = 20;
-	private static final int CENTER_MARGIN = 120;
+	private static final int BALOON_COLS = 3;
+	private static final int BALOON_Y_SPACER = 10;
+	private static final int CENTER_MARGIN = 400;
 	private static final int BALOON_MARGIN = 5;
-	private static final int HEADER_HIGHT = 32;
-	private static final int BALOON_FONT_SIZE = 7;
+	private static final int BALOON_WIDTH = (CENTER_MARGIN / BALOON_COLS) - BALOON_MARGIN;
+	private static final int HEADER_HEIGHT = 32;
+	private static final int BALOON_FONT_SIZE = 6;
 	private static final int HEADER_FONT_SIZE = 16;
+	private static final int PCT_ZOOM = 70;
 	
 	private OutputStream out;
 	private PwyDoc oldPwy;
@@ -88,7 +95,7 @@
 
 		for (int i = 0; i < 2; ++i)
 		{
-  			vpwy[i].setPctZoom (70);
+  			vpwy[i].setPctZoom (PCT_ZOOM);
 			width[i] = vpwy[i].getVWidth();
 			height[i] = vpwy[i].getVHeight();
 		}
@@ -99,7 +106,7 @@
 
 		deltax = width[0];
 		svgGenerator = new SVGGraphics2D(document);
-		svgGenerator.setSVGCanvasSize (new Dimension (width[0] + width[1] + CENTER_MARGIN, maxh + HEADER_HIGHT));
+		svgGenerator.setSVGCanvasSize (new Dimension (width[0] + width[1] + CENTER_MARGIN, maxh + HEADER_HEIGHT));
 
 		// titles
 		svgGenerator.setFont(new Font(null, Font.PLAIN, HEADER_FONT_SIZE));
@@ -126,10 +133,12 @@
 		
 		// mod hints
 		svgGenerator.setFont(new Font(null, Font.PLAIN, HEADER_FONT_SIZE));
-		int ypos = HEADER_HIGHT;
+		int col = 0;
+		int[] ypos = new int[BALOON_COLS];
+		for (int i = 0; i < BALOON_COLS; i++) ypos[i] = HEADER_HEIGHT;
 		for (ModData m : modifications)
 		{
-			int xpos = deltax;
+			int xpos = deltax + (BALOON_MARGIN + BALOON_WIDTH) * col;
 			FontRenderContext frc = svgGenerator.getFontRenderContext();
 
 			AttributedCharacterIterator styledText =
@@ -139,23 +148,24 @@
 			
 			LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, frc);
 
-			int top = ypos;
+			int top = ypos[col];
 			while (measurer.getPosition() < m.hint.length()) {
 				
-				TextLayout layout = measurer.nextLayout(CENTER_MARGIN - 2 * BALOON_MARGIN);
+				TextLayout layout = measurer.nextLayout(BALOON_WIDTH - 2 * BALOON_MARGIN);
 				
-				ypos += (layout.getAscent());				
-				layout.draw(svgGenerator, xpos + BALOON_MARGIN, ypos);
-				ypos += layout.getDescent() + layout.getLeading();
+				ypos[col] += (layout.getAscent());				
+				layout.draw(svgGenerator, xpos + BALOON_MARGIN, ypos[col]);
+				ypos[col] += layout.getDescent() + layout.getLeading();
 			}
-			int bot = ypos;			
+			int bot = ypos[col];
 			m.midy = top + (bot - top) / 2;
-			ypos += BALOON_Y_SPACER;
+			ypos[col] += BALOON_Y_SPACER;
+			col = (++col) % BALOON_COLS;
 
 			svgGenerator.draw (
 				new RoundRectangle2D.Double (
 					xpos, top,
-					CENTER_MARGIN, bot - top,
+					BALOON_WIDTH, bot - top,
 					BALOON_MARGIN, BALOON_MARGIN));			
 		}
 		
@@ -171,7 +181,7 @@
 		}
 		
 		// pwy's themselves		
- 		svgGenerator.translate (0, HEADER_HIGHT);
+ 		svgGenerator.translate (0, HEADER_HEIGHT);
 		vpwy[PWY_OLD].draw (svgGenerator, null, false);
 		svgGenerator.setClip (null); // reset clipping
  		svgGenerator.translate (deltax + CENTER_MARGIN, 0);
@@ -180,21 +190,28 @@
 		boolean useCSS = true;
 		Writer out = new OutputStreamWriter (System.out, "UTF-8");
 		svgGenerator.stream (out, useCSS);
-
 	}
 	
 	public void insert(PathwayElement newElt)
 	{
 		VPathwayElement velt = findElt (newElt, vpwy[PWY_NEW]);
-		assert (velt != null);
-		velt.highlight (Color.GREEN);
+ 		//assert (velt != null || newElt.getObjectType () == ObjectType.INFOBOX);
+		if (velt == null)
+		{
+			Logger.log.warn (PwyElt.summary(newElt) + " doesn't have a corresponding view element");
+		}
+		if (velt != null) velt.highlight (Color.GREEN);
 	}
 
 	public void delete(PathwayElement oldElt)
 	{
 		VPathwayElement velt = findElt (oldElt, vpwy[PWY_OLD]);
-		assert (velt != null);
-		velt.highlight (Color.RED);
+ 		//assert (velt != null || oldElt.getObjectType () == ObjectType.INFOBOX);
+		if (velt == null)
+		{
+			Logger.log.warn (PwyElt.summary(oldElt) + " doesn't have a corresponding view element");
+		}
+		if (velt != null) velt.highlight (Color.RED);
 	}
 
 
@@ -231,13 +248,13 @@
 
 	PathwayElement curOldElt = null;
 	PathwayElement curNewElt = null;
-	String curHint;
+	Set<String> curHint = null;
 	
 	public void modifyStart (PathwayElement oldElt, PathwayElement newElt)
 	{
 		curOldElt = oldElt;
 		curNewElt = newElt;
-		curHint = "";
+		curHint = new HashSet<String>();
 	}
 
 	public void modifyEnd ()
@@ -252,13 +269,21 @@
 		velt.highlight (Color.YELLOW);
 		Rectangle r2 = velt.getVBounds();
 
+		String completeHint = "";
+		for (String hint : curHint)
+		{
+			completeHint += hint;
+			completeHint += ", ";
+		}
+		completeHint += "changed";
+		
 		modifications.add (
 			new ModData (
 				(int)(r1.getX() + r1.getWidth() / 2),
-				(int)(r1.getY() + r1.getHeight() / 2) + HEADER_HIGHT,
+				(int)(r1.getY() + r1.getHeight() / 2) + HEADER_HEIGHT,
 				(int)(r2.getX() + r2.getWidth() / 2) + deltax + CENTER_MARGIN,
-				(int)(r2.getY() + r2.getHeight() / 2) + HEADER_HIGHT,
-				curHint)
+				(int)(r2.getY() + r2.getHeight() / 2) + HEADER_HEIGHT,
+				completeHint)
 			);
 		
 		curOldElt = null;
@@ -269,7 +294,26 @@
 	
 	public void modifyAttr(String attr, String oldVal, String newVal)
 	{
-		curHint += attr + " changed. ";
+		if (attr.equalsIgnoreCase("centerx") || 
+			attr.equalsIgnoreCase("centery") ||
+			attr.equalsIgnoreCase("endx") ||
+			attr.equalsIgnoreCase("endy") ||
+			attr.equalsIgnoreCase("startx") ||
+			attr.equalsIgnoreCase("starty"))
+		{
+			curHint.add ("position");
+		}
+		else if (
+			attr.equalsIgnoreCase("width") ||
+			attr.equalsIgnoreCase("height")
+			)
+		{
+			curHint.add ("size");
+		}
+		else
+		{
+			curHint.add (attr);
+		}
 	}
 
 	/**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffGui.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffGui.java	(revision 0)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffGui.java	(revision 1053)
@@ -0,0 +1,26 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+class GpmlDiffGui
+{
+	public static void main (String[] argv)
+	{
+		GpmlDiffWindow window = new GpmlDiffWindow();
+		window.setVisible (true);
+	}
+}
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffGui.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 0)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 1053)
@@ -0,0 +1,102 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import org.pathvisio.model.PathwayElement;
+import org.pathvisio.model.ObjectType;
+import org.pathvisio.model.PropertyType;
+import org.pathvisio.debug.Logger;
+import java.util.*;
+
+class BetterSim extends SimilarityFunction
+{
+
+	/**
+	   returns a score between 0 and 100, 100 if both elements are completely similar
+	*/
+	public int getSimScore (PathwayElement oldE, PathwayElement newE)
+	{
+		int oldOt = oldE.getObjectType();
+		int newOt = newE.getObjectType();
+		List<PropertyType> oldProps = oldE.getAttributes(true);
+		List<PropertyType> newProps = newE.getAttributes(true);
+
+		int oldN = oldProps.size();
+		int newN = newProps.size();
+
+		int possibleScore = 0;
+		int actualScore = 0;
+
+		for (PropertyType newProp : newProps)
+		{
+			if (oldProps.contains(newProp))
+			{
+				Object oo = oldE.getProperty(newProp);
+				Object no = newE.getProperty(newProp);
+				
+				int max = 0;
+				int score = 0;
+				
+				switch (newProp) 
+				{
+					case GRAPHID:
+					case GROUPID:
+						max = 80;
+						if (oo == null ? no == null : oo.equals (no))
+						{
+							score = max;
+						}
+						break;
+					case CENTERX:
+					case CENTERY:
+					case ENDX:
+					case ENDY:
+					case STARTX:		
+					case STARTY:
+						max = 10;
+						double delta = (Double)oo - (Double)no;
+						if (delta < 0.5)
+						{
+							score = 10;
+						}
+						else if (delta >= 0.5 && delta < 512)
+						{
+							score = 9 - (int)(Math.log10 (delta) / Math.log10 (2));
+						}
+						else
+						{
+							score = 0;
+						}							
+						break;
+					default:
+						max = 10;
+						if (oo == null ? no == null : oo.equals (no))
+						{
+							score = max;
+						}
+						break;
+				}
+								
+				possibleScore += max;
+				actualScore += score;
+			}
+		}
+
+		if (possibleScore == 0) return 0; // div by zero prevention
+		return 100 * actualScore / possibleScore;
+	}
+}
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/plan/TODO.txt
===================================================================
--- trunk/tools/gpmldiff/plan/TODO.txt	(revision 1052)
+++ trunk/tools/gpmldiff/plan/TODO.txt	(revision 1053)
@@ -2,10 +2,12 @@
 
 HIGH PRIORITY
 
+* Test with Sjoerd's modifications
+
+* BUG: Labels too big (don't scale with zoom factor?)
+
 * Patch tool using Dgpml input, with adjustable fuzz factor
 
-* Pathway.equals
-
 * Make similarity function more flexible. There must be a minimum
   similarity. Can two different object types match? Should there be a
   priority score per Attribute?
@@ -17,8 +19,11 @@
 
 * Better hinting: CenterX, CenterY changed should be Position changed.
 
+
 LOW PRIORITY
 
+* Pathway.equals
+
 * add timing code
 
 * Test with lot's of Biopax content (or maybe just ignore biopax content?)
@@ -45,7 +50,7 @@
    status: IN PROGRESS
  
  * Integration into wikipathways.org.
-   start : (Jul 2) Jul 23
+   start : (Jul 2) Jul 30
    status : NOT STARTED
 
  * User testing and performance optimization
Index: trunk/tools/gpmldiff/diffview.sh
===================================================================
--- trunk/tools/gpmldiff/diffview.sh	(revision 0)
+++ trunk/tools/gpmldiff/diffview.sh	(revision 1053)
@@ -0,0 +1,31 @@
+#!/bin/sh
+MYCLASSPATH=\
+build:\
+../../lib/BrowserLauncher.jar:\
+../../lib/batik/batik-awt-util.jar:\
+../../lib/batik/batik-bridge.jar:\
+../../lib/batik/batik-css.jar:\
+../../lib/batik/batik-dom.jar:\
+../../lib/batik/batik-ext.jar:\
+../../lib/batik/batik-extension.jar:\
+../../lib/batik/batik-gvt.jar:\
+../../lib/batik/batik-parser.jar:\
+../../lib/batik/batik-script.jar:\
+../../lib/batik/batik-svg-dom.jar:\
+../../lib/batik/batik-svggen.jar:\
+../../lib/batik/batik-transcoder.jar:\
+../../lib/batik/batik-util.jar:\
+../../lib/batik/batik-xml.jar:\
+../../lib/batik/pdf-transcoder.jar:\
+../../lib/batik/xml-apis.jar:\
+../../lib/derby.jar:\
+../../lib/jdom.jar:\
+../../lib/org.eclipse.core.commands.jar:\
+../../lib/org.eclipse.equinox.common.jar:\
+../../lib/org.eclipse.equinox.supplement.jar:\
+../../lib/org.eclipse.jface.jar:\
+../../lib/resources.jar:\
+../../lib/swt-linux-lib/swt.jar:\
+../../lib/swt-linux-lib.jar
+
+java -ea -cp $MYCLASSPATH org.pathvisio.gpmldiff.GpmlDiffGui $1 $2 $3 $4 $5 $6 $7 $8 $9
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/diffview.sh
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:executable
   + *

Index: trunk/tools/gpmldiff/build.xml
===================================================================
--- trunk/tools/gpmldiff/build.xml	(revision 1052)
+++ trunk/tools/gpmldiff/build.xml	(revision 1053)
@@ -24,33 +24,40 @@
 	</target>
 	
 	<target name="compile-soft" depends="prepare" description="Compile only modified sources">
-		<javac srcdir="${src.dir}" debug="true"	destdir="${build.dir}">
+		<javac srcdir="${src.dir}" 
+			    debug="true"	
+			    destdir="${build.dir}">
 			<classpath refid="project.class.path"/>
 		</javac>
 		<javac srcdir="../../src/core"
 			   includes="**"
-			   destdir="${build.dir}">
+			   destdir="${build.dir}"
+			   debug="true">
 		  <classpath refid="project.class.path"/>
 		</javac>
 		<javac srcdir="../../src/v2"
 			   includes="**"
-			   destdir="${build.dir}">
+			   destdir="${build.dir}"
+			   debug="true">
 		  <classpath refid="project.class.path"/>
 		</javac>
 		<javac srcdir="../../src/swt"
 			   includes="**"
-			   destdir="${build.dir}">
+			   destdir="${build.dir}"
+			   debug="true">
 		  <classpath refid="project.class.path"/>
 		</javac>
 		<javac srcdir="../../src/swing"
 			   includes="**"
-			   destdir="${build.dir}">
+			   destdir="${build.dir}"
+			   debug="true">
 		  <classpath refid="project.class.path"/>
 		</javac>
 	</target>
 
 	<target name="compile" depends="prepare" description="Compile all sources">
 		<javac srcdir="../../src/"
+			    debug="true"
 			   includes="core/**,v2/**,swing/**,swt/**"
 			   destdir="${build.dir}">
 		  <classpath refid="project.class.path"/>
