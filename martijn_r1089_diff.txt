Index: trunk/src/core/org/pathvisio/view/VPathway.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1089)
@@ -451,7 +451,14 @@
 		{
 			double vdx = ve.getX() - vPreviousX;
 			double vdy = ve.getY() - vPreviousY;
-			pressedObject.vMoveBy(vdx, vdy);
+			if (pressedObject instanceof Handle)
+			{
+				((Handle)(pressedObject)).vMoveTo(ve.getX(), ve.getY());
+			}
+			else
+			{
+				pressedObject.vMoveBy(vdx, vdy);
+			}
 				
 			vPreviousX = ve.getX();
 			vPreviousY = ve.getY();
Index: trunk/src/core/org/pathvisio/view/LinAlg.java
===================================================================
--- trunk/src/core/org/pathvisio/view/LinAlg.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/LinAlg.java	(revision 1089)
@@ -49,7 +49,7 @@
 		return Math.signum(p1.x * p2.y - p1.y * p2.x);
 	}
 	
-	public static double dot(Point v1, Point v2) 
+	private static double dot(Point v1, Point v2) 
 	{
 		double[] d1 = v1.asArray();
 		double[] d2 = v2.asArray();
@@ -57,13 +57,36 @@
 		for(int i = 0; i < Math.min(d1.length, d2.length); i++) sum += d1[i]*d2[i];
 		return sum;
 	}
+
+	/**
+	   Projection of point q on a line through p with direction vector v
+
+	   If p is 0,0, it's the same as the two-argument function with the same name.
+	 */
+	public static Point project (Point p, Point q, Point v)
+	{
+		Point q2 = new Point (q.x - p.x, q.y - p.y);
+		double vlen = dot (v, v);
+		if (vlen == 0)
+		{
+			return p;
+		}
+		else
+		{
+			double c = dot (q2, v) / dot (v, v);
+			return new Point (p.x + v.x * c, p.y + v.y * c);
+		}
+	}
 	
+	/**
+	  Projection of p1 on p2:
+	  
+	   p1.p2
+	   ----- . p2
+	   p2.p2
+	*/
 	public static Point project(Point p1, Point p2) 
 	{
-		//Projection of p1 on p2:
-		// p1.p2
-		// ----- . p2
-		// p2.p2
 		double c = dot(p1, p2) / dot(p2, p2);
 		return new Point(p2.x * c, p2.y * c);
 	}
Index: trunk/src/core/org/pathvisio/view/VPathwayElement.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathwayElement.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/VPathwayElement.java	(revision 1089)
@@ -198,10 +198,10 @@
 
 	/**
 	 * Transforms this object to fit to the coordinates
-	 * of the given handle
+	 * passed on by the given handle
 	 * @param h	The Handle to adjust to
 	 */
-	protected void adjustToHandle(Handle h) {}
+	protected void adjustToHandle(Handle h, double vx, double vy) {}
 
 	/**
 	 * Get all the handles belonging to this object
@@ -215,10 +215,9 @@
 	 * @param dx - the value of x-increment
 	 * @param dy - the value of y-increment
 	 */
-	// TODO: should really be mMoveBy, using model coords,
-	// because implementations do a lot of conversions anyway
-	// perhaps could even be partially implemented in PathwayElement 
-	protected void vMoveBy(double dx, double dy) { }
+	protected void vMoveBy(double vdx, double vdy)
+	{
+	}
 	
 	/**
 	 * Get the rectangular boundary of this object
Index: trunk/src/core/org/pathvisio/view/VPoint.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPoint.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/VPoint.java	(revision 1089)
@@ -107,10 +107,12 @@
 		return null;
 	}
 	
-	protected void adjustToHandle(Handle h) {
-		double mcx = h.mCenterx;
-		double mcy = h.mCentery;
-		for(MPoint p : mPoints) {
+	protected void adjustToHandle(Handle h, double vnewx, double vnewy)
+	{
+		double mcx = mFromV (vnewx);
+		double mcy = mFromV (vnewy);
+		for(MPoint p : mPoints)
+		{
 			p.setX(mcx);
 			p.setY(mcy);
 		}
Index: trunk/src/core/org/pathvisio/view/GraphicsShape.java
===================================================================
--- trunk/src/core/org/pathvisio/view/GraphicsShape.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/GraphicsShape.java	(revision 1089)
@@ -112,13 +112,6 @@
 	
 	public Handle[] getHandles()
 	{
-		if( this instanceof SelectionBox) {
-			// Only corner handles
-			return new Handle[] {
-					handleNE, handleSE,
-					handleSW, handleNW
-			};
-		}
 		if(	this instanceof GeneProduct || 
 			this instanceof Label) {
 			// No rotation handle for these objects
@@ -255,12 +248,14 @@
 //		SwtUtils.rotateGC(gc, tr, (float)Math.toDegrees(gdata.getRotation()), 
 //				getVCenterX(), getVCenterY());
 //	}
-	
-	public void adjustToHandle(Handle h) {
+
+
+	public void adjustToHandle(Handle h, double vnewx, double vnewy)
+	{
 		//Rotation
 		if 	(h == handleR) {
 			Point def = mRelativeToCenter(getMHandleLocation(h));
-			Point cur = mRelativeToCenter(new Point(h.mCenterx, h.mCentery));
+			Point cur = mRelativeToCenter(new Point(mFromV(vnewx), mFromV(vnewy)));
 			
 			setRotation(gdata.getRotation() + LinAlg.angle(def, cur));
 			
@@ -268,7 +263,7 @@
 		}
 					
 		// Transformation
-		Point mih = mToInternal(new Point(h.mCenterx, h.mCentery));
+		Point mih = mToInternal(new Point(mFromV(vnewx), mFromV(vnewy)));
 		
 		double mdx = 0;
 		double mdy = 0;
@@ -291,13 +286,17 @@
 			mdx = -(mih.x + gdata.getMWidth()/2);
 			mdw = -mdx;
 		};
+
+		double newmw = gdata.getMWidth() + mdx;
+		double newmh = gdata.getMHeight() + mdy;
+
+		Point mnc = mCalcNewCenter (newmw, newmh);
 		
-		Point mnc = mCalcNewCenter(gdata.getMWidth() + mdw, gdata.getMHeight() + mdh);
 //		gdata.dontFireEvents(1);
-		gdata.setMHeight(gdata.getMHeight() + mdy);
-		gdata.setMWidth(gdata.getMWidth() + mdx);
-		setMCenter(mnc);		
-	
+		gdata.setMWidth(newmw);
+		gdata.setMHeight(newmh);
+		setMCenter (mnc);
+						  
 		//In case object had zero width, switch handles
 		if(gdata.getMWidth() < 0) {
 			negativeWidth(h);
@@ -349,55 +348,34 @@
 	 * Sets the handles at the correct location;
 	 * @param ignore the position of this handle will not be adjusted
 	 */
-	private void setHandleLocation(Handle ignore)
+	protected void setHandleLocation()
 	{
 		Point p;
 		p = getMHandleLocation(handleN);
-		if(ignore != handleN) handleN.setMLocation(p.x, p.y);
+		handleN.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleE);
-		if(ignore != handleE) handleE.setMLocation(p.x, p.y);
+		handleE.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleS);
-		if(ignore != handleS) handleS.setMLocation(p.x, p.y);
+		handleS.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleW);
-		if(ignore != handleW) handleW.setMLocation(p.x, p.y);
+		handleW.setMLocation(p.x, p.y);
 		
 		p = getMHandleLocation(handleNE);
-		if(ignore != handleNE) handleNE.setMLocation(p.x, p.y);
+		handleNE.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleSE);
-		if(ignore != handleSE) handleSE.setMLocation(p.x, p.y);
+		handleSE.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleSW);
-		if(ignore != handleSW) handleSW.setMLocation(p.x, p.y);
+		handleSW.setMLocation(p.x, p.y);
 		p = getMHandleLocation(handleNW);
-		if(ignore != handleNW) handleNW.setMLocation(p.x, p.y);
+		handleNW.setMLocation(p.x, p.y);
 
 		p = getMHandleLocation(handleR);
-		if(ignore != handleR) handleR.setMLocation(p.x, p.y);
+		handleR.setMLocation(p.x, p.y);
 		
 		for(Handle h : getHandles()) h.rotation = gdata.getRotation();
 	}
-	
-	/**
-	 * Sets the handles at the correct location
-	 */
-	public void setHandleLocation()
-	{
-		setHandleLocation(null);
-	}
-	
-	/**
-	 * Get the default location of the given handle 
-	 * (in coordinates relative to the canvas)
-	 * @param h
-	 */
-	protected Point getVHandleLocation(Handle h) 
-	{
-		Point mp = getMHandleLocation (h);
-		if (mp != null)			
-			return new Point (vFromM(mp.x), vFromM(mp.y));
-		else return null;
-	}
-
-	protected Point getMHandleLocation(Handle h) {
+		
+	private Point getMHandleLocation(Handle h) {
 		if(h == handleN) return mToExternal(0, -gdata.getMHeight()/2);
 		if(h == handleE) return mToExternal(gdata.getMWidth()/2, 0);
 		if(h == handleS) return mToExternal(0,  gdata.getMHeight()/2);
@@ -422,7 +400,7 @@
 	 * Will be ignored for N, E, S and W handles
 	 * @return	The opposite handle
 	 */
-	Handle getOppositeHandle(Handle h, int direction) {
+	private Handle getOppositeHandle(Handle h, int direction) {
 		//Ignore direction for N, E, S and W
 		if(h == handleN) return handleS;
 		if(h == handleE) return handleW;
@@ -444,7 +422,7 @@
 		}
 	}
 	
-	int[] handleFromMatrix(Handle h) {
+	private int[] handleFromMatrix(Handle h) {
 		for(int x = 0; x < 2; x++) {
 			for(int y = 0; y < 2; y++) {
 				if(handleMatrix[x][y] == h) return new int[] {x,y};
Index: trunk/src/core/org/pathvisio/view/Handle.java
===================================================================
--- trunk/src/core/org/pathvisio/view/Handle.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/Handle.java	(revision 1089)
@@ -175,40 +175,50 @@
 	}
 		
 	/**
-	 * Moves this handle by the specified increments and
-	 * adjusts the {@link VPathwayElement} to the new position
+	   Note: don't use Handle.vMoveBy, use vMoveTo instead.
+	   it's impossible to handle snap-to-grid correctly if you only have the delta information.
 	 */
 	public void vMoveBy(double vdx, double vdy)
-	{	
+	{
+		assert (false);
+		// You shouldn't call vMoveBy on a handle! use vMoveTo instead
+	}
+	
+	/**
+	   Called when a mouse event forces the handle to move.
+	   Note: this doesn't cause the handle itself to move,
+	   rather, it passes the information to the underlying object.
+	 */
+	public void vMoveTo (double vnx, double vny)
+	{
 		markDirty();
 
 		if(direction != DIRECTION_FREE && direction != DIRECTION_ROT) {
 			Point v = new Point(0,0);
-			double xtraRot = 0;
-			if		(direction == DIRECTION_X) {
-				v = new Point(1,0);
+			Rectangle b = parent.getVBounds();
+			Point base = new Point (b.x + b.width / 2, b.y + b.height / 2);
+			if (direction == DIRECTION_X)
+			{
+				v = new Point (1, 0);
 			}
-			else if	(direction == DIRECTION_Y) {
-				v = new Point(0,1);
+			else if	(direction == DIRECTION_Y)
+			{
+				v = new Point (0, 1);
 			}
-			else if (direction == DIRECTION_XY) {
-				Rectangle b = parent.getVBounds();
-				v = new Point(b.width + 1, b.height + 1);
+			else if (direction == DIRECTION_XY)
+			{
+				v = new Point (b.width, b.height);
 			}
-			else if (direction == DIRECTION_MINXY) {
-				xtraRot = Math.PI/2;
-				Rectangle b = parent.getVBounds();
-				v = new Point(b.height + 1, b.width + 1);
+			else if (direction == DIRECTION_MINXY)
+			{
+				v = new Point (b.height, -b.width);
 			}
-			Point yr = LinAlg.rotate(v, -rotation + xtraRot);
-			Point prj = LinAlg.project(new Point(vdx, vdy), yr);
-			vdx = prj.x; vdy= prj.y;
+			Point yr = LinAlg.rotate(v, -rotation);
+			Point prj = LinAlg.project(base, new Point(vnx, vny), yr);
+			vnx = prj.x; vny = prj.y;
 		}
-		
-		mCenterx += mFromV(vdx);
-		mCentery += mFromV(vdy);
-		
-		parent.adjustToHandle(this);
+
+		parent.adjustToHandle(this, vnx, vny);
 		markDirty();
 	}
 			
Index: trunk/src/core/org/pathvisio/view/SelectionBox.java
===================================================================
--- trunk/src/core/org/pathvisio/view/SelectionBox.java	(revision 1088)
+++ trunk/src/core/org/pathvisio/view/SelectionBox.java	(revision 1089)
@@ -33,66 +33,97 @@
 import org.pathvisio.model.PathwayElement.MPoint;
 
 /**
- * This class implements a selectionbox 
+ This class implements a selectionbox
+
+ A selectionbox has two states: 1: while dragging (being created) and 2: when surrounding a selected area
+ in Case 1, the handles can move freely, in case 2, they move in such a way that the aspect ratio is always maintained.
+ 
+ It only stores the view coordinates, not the model coordinates.
+ Therefore it is important to call adjustToZoom when the zoom pct has changed, so the view coordinates can be recalculated.
  */ 
-public class SelectionBox extends GraphicsShape
+public class SelectionBox extends VPathwayElement
 {
+	//Corner handles
+	Handle handleNE;
+	Handle handleSE;
+	Handle handleSW;
+	Handle handleNW;
+
+	double vTop, vLeft, vWidth, vHeight;
+
 	private static final long serialVersionUID = 1L;
 		
 	private ArrayList<VPathwayElement> selection;
 	boolean isSelecting;
 	boolean isVisible;
-		
-	/**
-	 * Constructor for this class
-	 * @param canvas - the VPathway this selectionbox will be part of
-	 */
-	public SelectionBox(VPathway canvas)
+
+	public Handle[] getHandles()
 	{
-		// TODO: selectionbox shouldn't need a dataobject...
-		// note, not setting parent of PathwayElement here.
-		this(canvas, new PathwayElement(ObjectType.SHAPE));
-	}	
+		return new Handle[]
+		{
+			handleNE, handleSE,
+			handleSW, handleNW
+		};
+	}
 	
-	public SelectionBox(VPathway canvas, PathwayElement pe)
+	public SelectionBox(VPathway canvas)
 	{
-		super(canvas, pe);
+		super(canvas);
 			
 		selection = new ArrayList<VPathwayElement>();
+
+		handleNE = new Handle(Handle.DIRECTION_FREE, this, canvas);
+		handleSE = new Handle(Handle.DIRECTION_FREE, this, canvas);
+		handleSW = new Handle(Handle.DIRECTION_FREE, this, canvas);
+		handleNW = new Handle(Handle.DIRECTION_FREE, this, canvas);
 	}	
 	
-	public int getDrawingOrder() {
+	public int getDrawingOrder()
+	{
 		return VPathway.DRAW_ORDER_SELECTIONBOX;
 	}
 	
-	public ArrayList<VPathwayElement> getSelection() {
+	public ArrayList<VPathwayElement> getSelection()
+	{
 		return selection;
 	}
+
+	public Rectangle getVOutline()
+	{
+		return new Rectangle ((int)vLeft, (int)vTop, (int)vWidth, (int)vHeight);
+	}
 	
 	/**
 	 * Add an object to the selection
 	 * @param o
 	 */
-	public void addToSelection(VPathwayElement o) {
+	public void addToSelection(VPathwayElement o)
+	{
 		if(o == this || selection.contains(o)) return; //Is selectionbox or already in selection
-		if(o instanceof VPoint) {
-			for(Line l : ((VPoint)o).getLines()) {
+		if(o instanceof VPoint)
+		{
+			for(Line l : ((VPoint)o).getLines())
+			{
 				l.select();
 				doAdd(l);
 			}
-		} else {
+		}
+		else
+		{
 			o.select();
 			doAdd(o);
 		}
 		fireSelectionEvent(new SelectionEvent(this, SelectionEvent.OBJECT_ADDED, o));
 		if(isSelecting) return; //All we have to do if user is dragging selectionbox
-		if(hasMultipleSelection()) { 
+		if(hasMultipleSelection())
+		{ 
 			stopSelecting(); //show and fit to SelectionBox if performed after dragging
 		}
 		 
 	}
 	
-	private void doAdd(VPathwayElement o) {
+	private void doAdd(VPathwayElement o)
+	{
 		if(!selection.contains(o)) selection.add(o);
 	}
 	
@@ -153,7 +184,8 @@
 	 * Resets the selectionbox (unselect selected objects, clear selection, reset rectangle
 	 * to upperleft corner
 	 */
-	public void reset() { 
+	public void reset()
+	{ 
 		reset(0, 0, true);
 	}
 	
@@ -179,10 +211,10 @@
 					new SelectionEvent(this, SelectionEvent.SELECTION_CLEARED));
 		}
 		
-		gdata.setMLeft(mFromV(vStartX));
-		gdata.setMTop(mFromV(vStartY));
-		gdata.setMWidth(0);
-		gdata.setMHeight(0);
+		vLeft = vStartX;
+		vTop = vStartY;
+		vWidth = 0;
+		vHeight = 0;
 	}
 
 	/**
@@ -236,14 +268,28 @@
 		}
 	}
 	
-	public void select() {
+	public void select()
+	{
 		super.select();
+		for (Handle h : getHandles())
+		{
+			h.show();
+		}
 		for(VPathwayElement o : selection) {
 			o.select();
 			for(Handle h : o.getHandles()) h.hide();
 		}
 	}
-	
+
+	public void deselect()
+	{
+		super.deselect();
+		for (Handle h : getHandles())
+		{
+			h.hide();
+		}
+	}
+
 	/**
 	 * Fit the size of this object to the selected objects
 	 */
@@ -266,12 +312,23 @@
 			for(Handle h : o.getHandles()) h.hide();
 		}
 
-		gdata.setMWidth(mFromV(vr.width));
-		gdata.setMHeight(mFromV(vr.height));
-		gdata.setMLeft(mFromV(vr.x));
-		gdata.setMTop(mFromV(vr.y));
-		setHandleLocation();		
+		vWidth = vr.width;
+		vHeight = vr.height;
+		vLeft = vr.x;
+		vTop = vr.y;
+		setHandleLocation();
 	}
+
+	/**
+	 * Sets the handles at the correct location;
+	 */
+	protected void setHandleLocation()
+	{
+		handleNE.setMLocation(mFromV(vLeft + vWidth), mFromV(vTop));
+		handleSE.setMLocation(mFromV(vLeft + vWidth), mFromV(vTop + vHeight));
+		handleSW.setMLocation(mFromV(vLeft), mFromV(vTop + vHeight));
+		handleNW.setMLocation(mFromV(vLeft), mFromV(vTop));
+	}
 			
 	/**
 	 * Show the selectionbox
@@ -297,60 +354,161 @@
 	/**
 	 * Gets the corner handle (South east) for start dragging
 	 */
-	public Handle getCornerHandle() { return handleSE; }
+	public Handle getCornerHandle()
+	{
+		return handleSE;
+	}
 	
-	public void adjustToHandle(Handle h) {	
+	public void adjustToHandle(Handle h, double vnewx, double vnewy)
+	{
 		//Store original size and location before adjusting to handle
-		double vWidthOld = getVWidthDouble();
-		double vHeightOld = getVHeightDouble();
-		double vCenterXOld = getVCenterXDouble();
-		double vCenterYOld = getVCenterYDouble();
+		double vWidthOld = vWidth;
+		double vHeightOld = vHeight;
+		double vLeftOld = vLeft;
+		double vTopOld = vTop;
+
+		double vdx = 0;
+		double vdy = 0;
+		double vdw = 0;
+		double vdh = 0;
+		if (h == handleNE || h == handleNW)
+		{
+			vdy = vnewy - vTop;
+			vdh = -vdy;
+		}
+		if (h == handleSE || h == handleSW)
+		{
+			vdy = 0;
+			vdh = vnewy - (vTop + vHeight);
+		}
+		if (h == handleSE || h == handleNE)
+		{
+			vdx = 0;
+			vdw = vnewx - (vLeft + vWidth);			
+		}
+		if (h == handleSW || h == handleNW)
+		{
+			vdx = vnewx - vLeft;
+			vdw = -vdx;
+		}
+
+		markDirty();
+
+		vWidth += vdw;
+		vHeight += vdh;
+		vLeft += vdx;
+		vTop += vdy;
+
+		if(vWidth < 0)
+		{
+			negativeWidth(h);
+		}
+		if(vHeight < 0)
+		{
+			negativeHeight(h);
+		}
+
+		markDirty();
+		setHandleLocation();
 		
-		super.adjustToHandle(h);
-		if(isSelecting) { //Selecting, so add containing objects to selection
+		if(isSelecting)
+		{   //Selecting, so add containing objects to selection
 			Rectangle vr = getVBounds();
 			Rectangle2D.Double bounds = new Rectangle2D.Double(vr.x, vr.y, vr.width, vr.height);
-			for(VPathwayElement o : canvas.getDrawingObjects()) {
+			for(VPathwayElement o : canvas.getDrawingObjects())
+			{
 				if((o == this) || (o instanceof Handle)) continue;
-				if(o.vIntersects(bounds) && !(o instanceof Group)) { 
+				if(o.vIntersects(bounds) && !(o instanceof Group))
+				{ 
 					addToSelection(o);
 				} else if(o.isSelected()) removeFromSelection(o);
 			}
-		} else { //Resizing, so resize child objects too
-			double widthRatio = getVWidthDouble() / vWidthOld;
-			double heightRatio = getVHeightDouble() / vHeightOld;
+		}
+		else
+		{
+			//Resizing, so resize child objects too
+			double widthRatio = vWidth / vWidthOld;
+			double heightRatio = vHeight / vHeightOld;
 			//Scale all selected objects in x and y direction, treat points seperately
 			Set<VPoint> points = new HashSet<VPoint>();
-			for(VPathwayElement o : selection) { 
-				if(o instanceof Line) {
+			for(VPathwayElement o : selection)
+			{ 
+				if(o instanceof Line)
+				{
 					points.addAll(((Line)o).getPoints());
-				} else { 
+				}
+				else
+				{ 
 					Rectangle2D vr = o.getVScaleRectangle();
 					double newObjectWidth = vr.getWidth() * widthRatio;
 					double newObjectHeight = vr.getHeight() * heightRatio;
-					double objectFromCenterX = (vr.getX() - vCenterXOld) * widthRatio;
-					double objectFromCenterY = (vr.getY() - vCenterYOld) * heightRatio;
-					o.setVScaleRectangle(new Rectangle2D.Double(
-							getVCenterXDouble() + objectFromCenterX, 
-							getVCenterYDouble() + objectFromCenterY, 
-							newObjectWidth, 
-							newObjectHeight));
+					double objectFromCenterX = (vr.getX() - (vLeftOld + vWidthOld / 2)) * widthRatio;
+					double objectFromCenterY = (vr.getY() - (vTopOld + vHeightOld / 2)) * heightRatio;
+ 					o.setVScaleRectangle(
+ 						new Rectangle2D.Double(
+ 							(vLeft + vWidth / 2) + objectFromCenterX, 
+ 							(vTop + vHeight / 2) + objectFromCenterY, 
+ 							newObjectWidth, 
+ 							newObjectHeight));
 				}
 			}
 			for(VPoint p : points) {
-				double dx = (p.getVX() - vCenterXOld) * widthRatio;
-				double dy = (p.getVY() - vCenterYOld) * heightRatio;
-				p.setVLocation(getVCenterXDouble() + dx, getVCenterYDouble() + dy);
+				double dx = (p.getVX() - (vLeftOld + vWidthOld / 2)) * widthRatio;
+				double dy = (p.getVY() - (vTopOld + vHeightOld / 2)) * heightRatio;
+				p.setVLocation(vLeft + vWidth / 2 + dx, vTop + vHeight / 2 + dy);
 			}
 		}
 	}
-	
+
+	/**
+	 * This method implements actions performed when the width of
+	 * the object becomes negative after adjusting to a handle
+	 * @param h	The handle this object adjusted to
+	 */
+	public void negativeWidth(Handle h)
+	{
+		Handle opposite = null;
+		if(h == handleNE) opposite = handleNW;
+		else if(h == handleSE) opposite = handleSW;
+		else if(h == handleSW) opposite = handleSE;
+		else if(h == handleNW) opposite = handleNE;
+		assert (opposite != null);
+		
+		double vw = -vWidth;
+		double vsx = vLeft - vw;
+		vWidth = vw;
+		vLeft = vsx;
+		canvas.setPressedObject(opposite);
+	}
+
+	/**
+	 * This method implements actions performed when the height of
+	 * the object becomes negative after adjusting to a handle
+	 * @param h	The handle this object adjusted to
+	 */
+	public void negativeHeight(Handle h)
+	{
+		Handle opposite = null;
+		if(h == handleNE) opposite = handleSE;
+		else if(h == handleSE) opposite = handleNE;
+		else if(h == handleSW) opposite = handleNW;
+		else if(h == handleNW) opposite = handleSW;
+		assert (opposite != null);
+		
+		double ht = -vHeight;
+		double sy = vTop - ht;
+		vHeight = ht;
+		vTop = sy;
+		canvas.setPressedObject(opposite);
+	}
+
 	public void vMoveBy(double vdx, double vdy) 
 	{
+		vLeft += vdx;
+		vTop += vdy;
+		setHandleLocation();
+		markDirty();
 
-		gdata.setMLeft(gdata.getMLeft() + mFromV(vdx)); 
-		gdata.setMTop(gdata.getMTop() + mFromV(vdy));
-
 		//Move selected object and their references
 		Set<GraphRefContainer> not = new HashSet<GraphRefContainer>(); //Will be moved by linking object
 		Set<VPoint> points = new HashSet<VPoint>(); //Will not be moved by linking object
@@ -371,25 +529,29 @@
 
 		}
 		
-		for(GraphRefContainer ref : not) {
-			if(ref instanceof MPoint) {
+		for(GraphRefContainer ref : not)
+		{
+			if(ref instanceof MPoint)
+			{
 				points.remove(canvas.getPoint((MPoint)ref));
 			}
 		}
 			
-		for(VPoint p : points) {
+		for(VPoint p : points)
+		{
 			p.vMoveBy(vdx, vdy);
 		}
 	}
 	
 	public void doDraw(Graphics2D g)
 	{
-		if(isVisible) {
+		if(isVisible)
+		{
 			int sw = 1;
 			g.setStroke(new BasicStroke(sw, 
 					BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER, 
 					1, new float[] {1, 2}, 0));
-			g.drawRect(getVLeft(), getVTop(), getVWidth() - sw, getVHeight() - sw);
+			g.drawRect((int)vLeft, (int)vTop, (int)vWidth - sw, (int)vHeight - sw);
 		}
 	}
 		
@@ -397,13 +559,16 @@
 	
 	private List<SelectionListener> listeners = new ArrayList<SelectionListener>();
 	
-	public void addListener(SelectionListener l) {
-		if(!listeners.contains(l)) {
+	public void addListener(SelectionListener l)
+	{
+		if(!listeners.contains(l))
+		{
 			listeners.add(l);
 		}
 	}
 	
-	public void removeListener(SelectionListener l) {
+	public void removeListener(SelectionListener l)
+	{
 		listeners.remove(l);
 	}
 	
@@ -412,17 +577,21 @@
 	 * to this class
 	 * @param e
 	 */
-	public void fireSelectionEvent(SelectionEvent e) {
-		for(SelectionListener l : listeners) {
+	public void fireSelectionEvent(SelectionEvent e)
+	{
+		for(SelectionListener l : listeners)
+		{
 			l.selectionEvent(e);
 		}
 	}
 
-	public interface SelectionListener {
+	public interface SelectionListener
+	{
 		public void selectionEvent(SelectionEvent e);
 	}
 
-	public static class SelectionEvent extends EventObject {
+	public static class SelectionEvent extends EventObject
+	{
 		private static final long serialVersionUID = 1L;
 		public static final int OBJECT_ADDED = 0;
 		public static final int OBJECT_REMOVED = 1;
@@ -433,7 +602,8 @@
 		public int type;
 		public List<VPathwayElement> selection;
 
-		public SelectionEvent(SelectionBox source, int type, VPathwayElement affectedObject) {
+		public SelectionEvent(SelectionBox source, int type, VPathwayElement affectedObject)
+		{
 			super(source);
 			this.source = source;
 			this.type = type;
@@ -441,7 +611,8 @@
 			this.affectedObject = affectedObject;
 		}
 		
-		public SelectionEvent(SelectionBox source, int type) {
+		public SelectionEvent(SelectionBox source, int type)
+		{
 			this(source, type, null);
 		}
 	}	
