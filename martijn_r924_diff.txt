Index: trunk/src/v1/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 923)
+++ trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 924)
@@ -242,198 +242,8 @@
 		}
 	}
 	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
-	
-	/**
-	 * {@link Action} to add a new element to the gpml pathway
-	 */
-	private class NewElementAction extends Action
-	{
-		MainWindow window;
-		int element;
 		
-		/**
-		 * Constructor for this class
-		 * @param e	type of element this action adds; a {@link VPathway} field constant
-		 */
-		public NewElementAction (int e)
-		{
-			element = e;
-		
-			String toolTipText;
-			URL imageURL = null;
-			toolTipText = null;
-			switch(element) {
-			case VPathway.NEWLINE: 
-				toolTipText = "Draw new line";
-				imageURL = Engine.getResourceURL("icons/newline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEARROW:
-				toolTipText = "Draw new arrow";
-				imageURL = Engine.getResourceURL("icons/newarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHED:
-				toolTipText = "Draw new dashed line";
-				imageURL = Engine.getResourceURL("icons/newdashedline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHEDARROW:
-				toolTipText = "Draw new dashed arrow";
-				imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLABEL:
-				toolTipText = "Draw new label";
-				imageURL = Engine.getResourceURL("icons/newlabel.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWARC:
-				toolTipText = "Draw new arc";
-				imageURL = Engine.getResourceURL("icons/newarc.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWBRACE:
-				toolTipText = "Draw new brace";
-				imageURL = Engine.getResourceURL("icons/newbrace.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWGENEPRODUCT:
-				toolTipText = "Draw new geneproduct";
-				imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECTANGLE:
-				imageURL = Engine.getResourceURL("icons/newrectangle.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWOVAL:
-				toolTipText = "Draw new oval";
-				imageURL = Engine.getResourceURL("icons/newoval.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWTBAR:
-				toolTipText = "Draw new TBar";
-				imageURL = Engine.getResourceURL("icons/newtbar.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORROUND:
-				toolTipText = "Draw new round receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORSQUARE:
-				toolTipText = "Draw new square receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDROUND:
-				toolTipText = "Draw new round ligand";
-				imageURL = Engine.getResourceURL("icons/newligandround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDSQUARE:
-				toolTipText = "Draw new square ligand";
-				imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
-				imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
-				toolTipText = "Draw new line or arrow";
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
-				imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
-				toolTipText = "Draw new ligand or receptor";
-				break;
-			}
-			setToolTipText(toolTipText);
-			setId("newItemAction");
-			if(imageURL != null) setImageDescriptor(ImageDescriptor.createFromURL(imageURL));
-		}
-				
-		public void run () {
-			if(isChecked())
-			{
-				deselectNewItemActions();
-				setChecked(true);
-				Engine.getVPathway().setNewGraphics(element);
-			}
-			else
-			{	
-				Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-			}
-		}
-		
-	}
-	
 	/**
-	 * {@link IMenuCreator} that creates the drop down menus for 
-	 * adding new line-type and -shape elements
-	 */
-	private class NewItemMenuCreator implements IMenuCreator {
-		private Menu menu;
-		int element;
-		
-		/**
-		 * Constructor for this class
-		 * @param e	type of menu to create; one of {@link VPathway}.NEWLINEMENU
-		 * , {@link VPathway}.NEWLINESHAPEMENU
-		 */
-		public NewItemMenuCreator(int e) 
-		{
-			element = e;
-		}
-		
-		public Menu getMenu(Menu parent) {
-			return null;
-		}
-
-		public Menu getMenu(Control parent) {
-			if (menu != null)
-				menu.dispose();
-			
-			menu = new Menu(parent);
-			Vector<Action> actions = new Vector<Action>();
-			switch(element) {
-			case VPathway.NEWLINEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLINE));
-				actions.add(new NewElementAction(VPathway.NEWLINEARROW));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHED));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHEDARROW));
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLIGANDROUND));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORROUND));
-				actions.add(new NewElementAction(VPathway.NEWLIGANDSQUARE));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORSQUARE));
-			}
-			
-			for (Action act : actions)
-			{			
-				addActionToMenu(menu, act);
-			}
-
-			return menu;
-		}
-		
-		protected void addActionToMenu(Menu parent, Action a)
-		{
-			 ActionContributionItem item= new ActionContributionItem(a);
-			 item.fill(parent, -1);
-		}
-		
-		public void dispose() 
-		{
-			if (menu != null)  {
-				menu.dispose();
-				menu = null;
-			}
-		}
-	}
-	
-	/**
 	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
 	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
 	 */
Index: trunk/src/v2/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 923)
+++ trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 924)
@@ -103,132 +103,6 @@
 	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
 
 	/**
-	 * {@link Action} to add a new element to the gpml pathway
-	 */
-	private class NewElementAction extends Action
-	{
-		MainWindow window;
-		int element;
-		
-		/**
-		 * Constructor for this class
-		 * @param e	type of element this action adds; a {@link VPathway} field constant
-		 */
-		public NewElementAction (int e)
-		{
-			// TODO: this should be moved to CommonActions, since it is both in v1 and v2
-			element = e;
-		
-			String toolTipText;
-			URL imageURL = null;
-			toolTipText = null;
-			switch(element) {
-			case VPathway.NEWLINE: 
-				toolTipText = "Draw new line";
-				imageURL = Engine.getResourceURL("icons/newline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEARROW:
-				toolTipText = "Draw new arrow";
-				imageURL = Engine.getResourceURL("icons/newarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHED:
-				toolTipText = "Draw new dashed line";
-				imageURL = Engine.getResourceURL("icons/newdashedline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHEDARROW:
-				toolTipText = "Draw new dashed arrow";
-				imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLABEL:
-				toolTipText = "Draw new label";
-				imageURL = Engine.getResourceURL("icons/newlabel.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWARC:
-				toolTipText = "Draw new arc";
-				imageURL = Engine.getResourceURL("icons/newarc.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWBRACE:
-				toolTipText = "Draw new brace";
-				imageURL = Engine.getResourceURL("icons/newbrace.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWGENEPRODUCT:
-				toolTipText = "Draw new geneproduct";
-				imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECTANGLE:
-				imageURL = Engine.getResourceURL("icons/newrectangle.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWOVAL:
-				toolTipText = "Draw new oval";
-				imageURL = Engine.getResourceURL("icons/newoval.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWTBAR:
-				toolTipText = "Draw new TBar";
-				imageURL = Engine.getResourceURL("icons/newtbar.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORROUND:
-				toolTipText = "Draw new round receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORSQUARE:
-				toolTipText = "Draw new square receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDROUND:
-				toolTipText = "Draw new round ligand";
-				imageURL = Engine.getResourceURL("icons/newligandround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDSQUARE:
-				toolTipText = "Draw new square ligand";
-				imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
-				imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
-				toolTipText = "Draw new line or arrow";
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
-				imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
-				toolTipText = "Draw new ligand or receptor";
-				break;
-			}
-			setToolTipText(toolTipText);
-			setId("newItemAction");
-			if(imageURL != null) setImageDescriptor(ImageDescriptor.createFromURL(imageURL));
-		}
-				
-		public void run () {
-			if(isChecked())
-			{
-				deselectNewItemActions();
-				setChecked(true);
-				Engine.getVPathway().setNewGraphics(element);
-			}
-			else
-			{	
-				Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-			}
-		}
-		
-	}
-
-	/**
 	 * {@link Action} to select a Gene Database
 	 */
 	private class SelectGdbAction extends Action
@@ -650,91 +524,8 @@
 			}
 		}
 	}
-	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);
-					
+	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);		
 	
-	/**
-	 * {@link IMenuCreator} that creates the drop down menus for 
-	 * adding new line-type and -shape elements
-	 */
-	private class NewItemMenuCreator implements IMenuCreator {
-		private Menu menu;
-		int element;
-		
-		/**
-		 * Constructor for this class
-		 * @param e	type of menu to create; one of {@link VPathway}.NEWLINEMENU
-		 * , {@link VPathway}.NEWLINESHAPEMENU
-		 */
-		public NewItemMenuCreator(int e) 
-		{
-			element = e;
-		}
-		
-		public Menu getMenu(Menu parent) {
-			return null;
-		}
-
-		public Menu getMenu(Control parent) {
-			if (menu != null)
-				menu.dispose();
-			
-			menu = new Menu(parent);
-			Vector<Action> actions = new Vector<Action>();
-			switch(element) {
-			case VPathway.NEWLINEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLINE));
-				actions.add(new NewElementAction(VPathway.NEWLINEARROW));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHED));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHEDARROW));
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLIGANDROUND));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORROUND));
-				actions.add(new NewElementAction(VPathway.NEWLIGANDSQUARE));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORSQUARE));
-			}
-			
-			for (Action act : actions)
-			{			
-				addActionToMenu(menu, act);
-			}
-
-			return menu;
-		}
-		
-		protected void addActionToMenu(Menu parent, Action a)
-		{
-			 ActionContributionItem item= new ActionContributionItem(a);
-			 item.fill(parent, -1);
-		}
-		
-		public void dispose() 
-		{
-			if (menu != null)  {
-				menu.dispose();
-				menu = null;
-			}
-		}
-	}
-	
-	/**
-	 * Deselects all NewElementActions on the toolbar and sets 
-	 * VPathway.newGraphics to VPathway.NEWNONE
-	 */
-	public void deselectNewItemActions()
-	{
-		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-	
 	// Elements of the coolbar
 	ToolBarContributionItem commonActionsCI;
 	ToolBarContributionItem editActionsCI;
@@ -767,7 +558,24 @@
 		toolBarManager.add(saveAction);
 		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
 	}
-	
+
+		/**
+	 * Deselects all NewElementActions on the toolbar and sets 
+	 * VPathway.newGraphics to VPathway.NEWNONE
+	 */
+	public void deselectNewItemActions()
+	{
+		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
+
 	/**
 	 * Creates element of the coolbar only shown in edit mode (new element actions)
 	 */
Index: trunk/src/core/org/pathvisio/model/Pathway.java
===================================================================
--- trunk/src/core/org/pathvisio/model/Pathway.java	(revision 923)
+++ trunk/src/core/org/pathvisio/model/Pathway.java	(revision 924)
@@ -60,7 +60,28 @@
 */
 public class Pathway implements PathwayListener
 {
+
 	/**
+	   "changed" tracks if the Pathway has been changed since the file
+	   was opened or last saved. New pathways start changed.
+	 */
+	private boolean changed = true;
+	public boolean hasChanged() { return changed; }
+	/**
+	   clearChangedFlag should be called after when the current
+	   pathway is known to be the same as the one on disk. This
+	   happens when you just opened it, or when you just saved it.
+	*/
+	private void clearChangedFlag() { changed = false; }
+	/**
+	   To be called after each edit operation
+	*/
+	private void markChanged()
+	{
+		changed = true;
+	}
+	
+	/**
 	 * Logger to which all logging will be performed
 	 */
 	private static Logger log = new Logger();
@@ -516,8 +537,14 @@
 	private List<PathwayListener> listeners = new ArrayList<PathwayListener>();
 	public void addListener(PathwayListener v) { listeners.add(v); }
 	public void removeListener(PathwayListener v) { listeners.remove(v); }
+	
+    /**
+	   Firing the ObjectModifiedEvent has the side effect of
+	   marking the Pathway as changed.
+	 */
 	public void fireObjectModifiedEvent(PathwayEvent e) 
 	{
+		markChanged();
 		for (PathwayListener g : listeners)
 		{
 			g.gmmlObjectModified(e);
Index: trunk/src/core/org/pathvisio/gui/NewElementAction.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/NewElementAction.java	(revision 0)
+++ trunk/src/core/org/pathvisio/gui/NewElementAction.java	(revision 924)
@@ -0,0 +1,223 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+
+package org.pathvisio.gui;
+
+import java.util.*;
+import java.net.URL;
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IMenuCreator;
+import org.eclipse.swt.widgets.*;
+import org.pathvisio.view.VPathway;
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.action.ActionContributionItem;
+import org.eclipse.jface.action.IContributionItem;
+
+/**
+ * {@link Action} to add a new element to the gpml pathway
+ */
+public class NewElementAction extends Action
+{
+	MainWindow window;
+	int element;
+		
+	/**
+	 * Constructor for this class
+	 * @param e	type of element this action adds; a {@link VPathway} field constant
+	 */
+	public NewElementAction (int e)
+	{
+		// TODO: this should be moved to CommonActions, since it is both in v1 and v2
+		element = e;
+		
+		String toolTipText;
+		URL imageURL = null;
+		toolTipText = null;
+		switch(element) {
+		case VPathway.NEWLINE: 
+			toolTipText = "Draw new line";
+			imageURL = Engine.getResourceURL("icons/newline.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLINEARROW:
+			toolTipText = "Draw new arrow";
+			imageURL = Engine.getResourceURL("icons/newarrow.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLINEDASHED:
+			toolTipText = "Draw new dashed line";
+			imageURL = Engine.getResourceURL("icons/newdashedline.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLINEDASHEDARROW:
+			toolTipText = "Draw new dashed arrow";
+			imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLABEL:
+			toolTipText = "Draw new label";
+			imageURL = Engine.getResourceURL("icons/newlabel.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWARC:
+			toolTipText = "Draw new arc";
+			imageURL = Engine.getResourceURL("icons/newarc.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWBRACE:
+			toolTipText = "Draw new brace";
+			imageURL = Engine.getResourceURL("icons/newbrace.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWGENEPRODUCT:
+			toolTipText = "Draw new geneproduct";
+			imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWRECTANGLE:
+			imageURL = Engine.getResourceURL("icons/newrectangle.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWOVAL:
+			toolTipText = "Draw new oval";
+			imageURL = Engine.getResourceURL("icons/newoval.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWTBAR:
+			toolTipText = "Draw new TBar";
+			imageURL = Engine.getResourceURL("icons/newtbar.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWRECEPTORROUND:
+			toolTipText = "Draw new round receptor";
+			imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWRECEPTORSQUARE:
+			toolTipText = "Draw new square receptor";
+			imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLIGANDROUND:
+			toolTipText = "Draw new round ligand";
+			imageURL = Engine.getResourceURL("icons/newligandround.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLIGANDSQUARE:
+			toolTipText = "Draw new square ligand";
+			imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
+			setChecked(false);
+			break;
+		case VPathway.NEWLINEMENU:
+			setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
+			imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
+			toolTipText = "Draw new line or arrow";
+			break;
+		case VPathway.NEWLINESHAPEMENU:
+			setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
+			imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
+			toolTipText = "Draw new ligand or receptor";
+			break;
+		}
+		setToolTipText(toolTipText);
+		setId("newItemAction");
+		if(imageURL != null) setImageDescriptor(ImageDescriptor.createFromURL(imageURL));
+	}
+				
+	public void run () {
+		if(isChecked())
+		{
+			Engine.getWindow().deselectNewItemActions();
+			setChecked(true);
+			Engine.getVPathway().setNewGraphics(element);
+		}
+		else
+		{	
+			Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+		}
+	}
+
+	/**
+	 * {@link IMenuCreator} that creates the drop down menus for 
+	 * adding new line-type and -shape elements
+	 */
+	private class NewItemMenuCreator implements IMenuCreator
+	{
+		private Menu menu;
+		int element;
+		
+		/**
+		 * Constructor for this class
+		 * @param e	type of menu to create; one of {@link VPathway}.NEWLINEMENU
+		 * , {@link VPathway}.NEWLINESHAPEMENU
+		 */
+		public NewItemMenuCreator(int e) 
+		{
+			element = e;
+		}
+		
+		public Menu getMenu(Menu parent)
+		{
+			return null;
+		}
+
+		public Menu getMenu(Control parent)
+		{
+			if (menu != null)
+				menu.dispose();
+			
+			menu = new Menu(parent);
+			Vector<Action> actions = new Vector<Action>();
+			switch(element)
+			{
+			case VPathway.NEWLINEMENU:
+				actions.add(new NewElementAction(VPathway.NEWLINE));
+				actions.add(new NewElementAction(VPathway.NEWLINEARROW));
+				actions.add(new NewElementAction(VPathway.NEWLINEDASHED));
+				actions.add(new NewElementAction(VPathway.NEWLINEDASHEDARROW));
+				break;
+			case VPathway.NEWLINESHAPEMENU:
+				actions.add(new NewElementAction(VPathway.NEWLIGANDROUND));
+				actions.add(new NewElementAction(VPathway.NEWRECEPTORROUND));
+				actions.add(new NewElementAction(VPathway.NEWLIGANDSQUARE));
+				actions.add(new NewElementAction(VPathway.NEWRECEPTORSQUARE));
+			}
+			
+			for (Action act : actions)
+			{			
+				addActionToMenu(menu, act);
+			}
+
+			return menu;
+		}
+		
+		protected void addActionToMenu(Menu parent, Action a)
+		{
+			ActionContributionItem item = new ActionContributionItem(a);
+			item.fill(parent, -1);
+		}
+		
+		public void dispose() 
+		{
+			if (menu != null)  {
+				menu.dispose();
+				menu = null;
+			}
+		}
+	}
+
+}

Property changes on: trunk/src/core/org/pathvisio/gui/NewElementAction.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/src/core/org/pathvisio/gui/CommonActions.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 923)
+++ trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 924)
@@ -18,6 +18,7 @@
 
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -29,6 +30,7 @@
 import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.preference.PreferenceManager;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.widgets.FileDialog;
@@ -576,10 +578,12 @@
 			setToolTipText ("Edit BioPAX code");
 		}
 		
-		public void run () {
+		public void run ()
+		{
 			BiopaxDialog d = new BiopaxDialog(window.getShell());
 			d.setPathway(Engine.getPathway());
 			d.open();
 		}
 	}
+
 }
