Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Map2D.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Map2D.java	(revision 0)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Map2D.java	(revision 1137)
@@ -0,0 +1,67 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Collection;
+
+public class Map2D <S, T, U>
+{
+	Map<S, Integer> rows;
+	Map<T, Integer> cols;
+	U[][] cell;
+
+	void set (S row, T col, U value)
+	{
+		int rowInt = rows.get (row);
+		int colInt = cols.get (col);
+		cell[rowInt][colInt] = value;
+	}
+	
+	U get (S row, T col)
+	{
+		int rowInt = rows.get (row);
+		int colInt = cols.get (col);
+		return cell[rowInt][colInt];
+	}
+
+	/**
+	   Note: doubles in the collection are discarded!
+	 */
+	Map2D (Collection<S> _rows, Collection<T> _cols)
+	{
+		rows = new HashMap <S, Integer>();
+		cols = new HashMap <T, Integer>();
+		int i = 0;
+		for (S s : _rows)
+		{
+			rows.put (s, i);
+			i++;
+		}
+		i = 0;
+		for (T t : _cols)
+		{
+			cols.put (t, i);
+			i++;
+		}
+		// Generate cell array as Object[][], not possible to do U[][] directly.
+		// this will give an unavoidable compiler warning.
+		cell = (U[][]) new Object[rows.size()][cols.size()];
+	}
+	
+}
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Map2D.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1136)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1137)
@@ -24,6 +24,8 @@
 import java.util.Set;
 import java.util.Map;
 import java.util.HashMap;
+import java.util.Comparator;
+import java.util.Collections;
 import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
@@ -115,20 +117,20 @@
 	/**
 	   Calculates a table with similarity scores.
 	*/
-	static public Map <PathwayElement, Map <PathwayElement, Integer>> getSimTable (PwyDoc oldDoc, PwyDoc newDoc, SimilarityFunction simFun)		
+	static public Map2D <PathwayElement, PathwayElement, Integer> getSimTable (PwyDoc oldDoc, PwyDoc newDoc, SimilarityFunction simFun)		
 	{
-		Map <PathwayElement, Map <PathwayElement, Integer>> result =
-			new HashMap <PathwayElement, Map <PathwayElement, Integer>>();
-		
+		Map2D <PathwayElement, PathwayElement, Integer> result =
+			new Map2D <PathwayElement, PathwayElement, Integer>(
+				oldDoc.getElts(),
+				newDoc.getElts()
+				);
+
 		for (PathwayElement oldElt : oldDoc.getElts())
 		{
-			Map <PathwayElement, Integer> row = new HashMap <PathwayElement, Integer>();
-			
 			for (PathwayElement newElt : newDoc.getElts())
 			{
-				row.put (newElt, simFun.getSimScore(oldElt, newElt));
+				result.set (oldElt, newElt, simFun.getSimScore(oldElt, newElt));
 			}
-			result.put (oldElt, row);
 		}
 
 		return result;
@@ -162,10 +164,29 @@
 		}		
 	}
 	
+	class MaxScoreComparator implements Comparator<PathwayElement>
+	{
+		Map <PathwayElement, Integer> scores;
+		
+		public MaxScoreComparator (Map<PathwayElement, Integer> scores)
+		{
+			this.scores = scores;
+		}
+
+		public int compare (PathwayElement a, PathwayElement b)
+		{
+			return scores.get (b) - scores.get(a);
+		}
+	}
+	
 	/**
-	   Finds correspondence set with the lowest cost using Dijkstra's algorithm
-	   //TODO: currently not using Dijkstra's algorithm but ad-hoc.
-	   
+	   Finds correspondence set with the lowest cost 
+
+	   Originally I planned to use Dijkstra's algorithm as described
+	   in the xmldiff whitepaper, but it turned out not to be
+	   necessary, and a simple ad-hoc algorithm suffices (and is
+	   probably faster)
+
 	   Call this on the OLD doc
 	   @param newDoc the New doc
 	   @param simFun similarity function
@@ -173,15 +194,64 @@
 	*/
 	SearchNode findCorrespondence(PwyDoc newDoc, SimilarityFunction simFun, CostFunction costFun)
 	{
-		SearchNode currentNode = null;
-				
+		/*
+		   Compare each old element with each new element and store
+		   this in a scoring matrix.
+		 */
+		Map2D<PathwayElement, PathwayElement, Integer> scoreMatrix =
+			getSimTable (this, newDoc, simFun);
+
+		/*
+		  We're going to calculate the maximum score for each row in
+		  the table and store the results in this Map.
+		 */		
+		Map <PathwayElement, Integer> maxScores =
+			new HashMap<PathwayElement, Integer>();
+		
 		for (PathwayElement oldElt : elts)
 		{						
 			int maxScore = 0;
 			PathwayElement maxNewElt = null;
 			for (PathwayElement newElt : newDoc.getElts())
 			{
-				// if it's the first node, or if the newElt is not yet in the searchpath
+				int score = scoreMatrix.get (oldElt, newElt);
+				if (score > maxScore)
+				{
+					maxScore = score;
+				}				
+			}
+			maxScores.put (oldElt, maxScore);
+		}
+
+		/*
+		  Now sort the elements descending by their maximum score.
+		  The reasoning is that if the maximum score is high
+		  (e.g. 100), this means that there is really no doubt that
+		  they go together, so we want to get those done first and
+		  then leave the doubtful ones last.
+
+		  That way we prevent that a doubtful pair gets mixed up with
+		  a perfect matching pair.
+		 */
+		Collections.sort (elts, new MaxScoreComparator (maxScores));
+
+		/*
+		  The results are recorded in a linear tree of SearchNodes.
+		  This is perhaps a strange way to record the results, but it
+		  works and it will make it easier to switch to a different
+		  algorithm in the future without modifying the rest of the
+		  project.
+		 */
+		SearchNode currentNode = null;
+		
+		for (PathwayElement oldElt : elts)
+		{
+			int maxScore = 0;
+			PathwayElement maxNewElt = null;
+			for (PathwayElement newElt : newDoc.getElts())
+			{
+				// if it's the first node, or if the newElt is not yet
+				// in the searchpath
 				if (currentNode == null || !currentNode.ancestryHasElt (newElt))
 				{
 					int score = simFun.getSimScore (oldElt, newElt);
@@ -192,20 +262,18 @@
 					}
 				}
 			}
-			
-			Logger.log.trace (PwyElt.summary (oldElt) + "/" + PwyElt.summary (maxNewElt) + "/" + maxScore);
-
-			if (maxNewElt != null && maxScore > 49)
+			// we have a cut-off at 60. Below this, an element is
+			// considered to be deleted from the new Pathway
+			if (maxNewElt != null && maxScore >= 60)
 			{
-				// add pairing to search tree.
+				// add this pairing to the search tree.
 				SearchNode newNode = new SearchNode (currentNode, oldElt, maxNewElt, 0);
 				currentNode = newNode;
 			}
-
 		}
 		return currentNode;
 	}
-		
+
 	/**
 	   Output the Diff after the best correspondence has been
 	   calculated.  call this on the OLD doc.
@@ -246,7 +314,7 @@
 			// if the newElt doesn't have a corresponding oldElt
 			if (!bothNew.contains(newElt))
 			{
-				// then we have an insertioncurrent.getOldElt()
+				// then we have an insertion
 				out.insert (newElt);
 			}
 		}
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GlassPane.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GlassPane.java	(revision 1136)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GlassPane.java	(revision 1137)
@@ -26,11 +26,14 @@
 import java.awt.Point;
 import java.awt.Rectangle;
 import java.awt.Shape;
+import java.awt.BasicStroke;
 import java.awt.event.AWTEventListener;
 import java.awt.event.MouseEvent;
 import java.awt.font.*;
+import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
 import java.awt.geom.RoundRectangle2D;
+import java.awt.geom.GeneralPath;
 import java.text.*;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -39,6 +42,8 @@
 import javax.swing.*;
 
 /**
+ * Derived from:
+ * 
  * GlassPane tutorial
  * "A well-behaved GlassPane"
  * http://weblogs.java.net/blog/alexfromsun/
@@ -55,15 +60,28 @@
 class GlassPane extends JPanel implements AWTEventListener
 {
     private final JFrame frame;
-    private Point point = new Point();
+    private Point mousePos = new Point();
 
 	// baloon margin is both the horizontal and vertical margin.
 	private static final int BALOON_SPACING = 50;
 	private static final int BALOON_MARGIN = 20;
 	private static final Color BALOON_PAINT = Color.YELLOW;
 	private static final int HINT_FONT_SIZE = 11;
+	private static final float WAYPOINT_OFFSET = 200;
+
+	private double zoomFactor = 1.0;
+
 	
 	private boolean alignTop = true;
+
+	void setPctZoom (double value)
+	{
+		zoomFactor = value / 100;
+		if (showHint)
+		{
+			repaint();
+		}
+	}
 	
     public GlassPane(JFrame frame)
 	{
@@ -88,15 +106,58 @@
 		y1 = _y1;
 		x2 = _x2;
 		y2 = _y2;
-		showHint (true);
+		showHint = true;
+		repaint();
 	}
 
+	private int baloonWidth = 0;
+	private int baloonHeight = 0;
+
+	JViewport oldView;
+	JViewport newView;
+
+	void setViewPorts (JViewport o, JViewport n)
+	{
+		oldView = o;
+		newView = n;
+	}
+
 	/**
+	   Note: don't call getHintShape() before setting baloonwidth and
+	   baloonheight to meaningful values
+	*/
+	private Shape getHintShape()
+	{
+		Point pos = getHintPos();
+		Shape bg = new RoundRectangle2D.Double( 
+			pos.getX(), pos.getY(),
+			baloonWidth, baloonHeight,
+			BALOON_MARGIN, BALOON_MARGIN
+			);
+		return bg;
+	}
+
+	
+	/**
+	   Note: don't call getHintPos() before setting baloonwidth and
+	   baloonheight to meaningful values
+	*/
+	private Point getHintPos()
+	{
+		int xpos = (int)((getSize().getWidth() - baloonWidth) / 2);
+		int ypos = alignTop ? BALOON_SPACING : (int)(getSize().getHeight() - baloonHeight - BALOON_SPACING);
+		return new Point (xpos, ypos);
+	}
+	
+	/**
 	   enable showing of hint.
 	 */
-	void showHint(boolean value)
+	void clearHint()
 	{
-		showHint = value;
+		hint = null;
+		baloonWidth = 0;
+		baloonHeight = 0;
+		showHint = false;
 		repaint();
 	}
 	
@@ -137,26 +198,16 @@
 			int width = (int)(b0.getWidth() + b1.getWidth());
 			if (width > maxTextWidth) { maxTextWidth = width; }
 		}
-		int baloonWidth = maxTextWidth + 2 * BALOON_MARGIN;
-		int baloonHeight = ypos + 2 * BALOON_MARGIN;
+		baloonWidth = maxTextWidth + 2 * BALOON_MARGIN;
+		baloonHeight = ypos + 2 * BALOON_MARGIN;
 
 		// figure out coordinates that are not in the way of the mouse.
-		int xpos = (int)((getSize().getWidth() - baloonWidth) / 2);
-		ypos = alignTop ? BALOON_SPACING : (int)(getSize().getHeight() - baloonHeight - BALOON_SPACING);
-
-		Shape bg = new RoundRectangle2D.Double (
-				xpos, ypos,
-				baloonWidth, baloonHeight,
-				BALOON_MARGIN, BALOON_MARGIN);
-		if (point != null && bg.contains(point))
+		Shape bg = getHintShape();
+		if (mousePos != null && bg.contains(mousePos))
 		{
 			// toggle alignTop and calculate new shape
 			alignTop = !alignTop;
-			ypos = alignTop ? BALOON_SPACING : (int)(getSize().getHeight() - baloonHeight - BALOON_SPACING);
-			bg = new RoundRectangle2D.Double (
-				xpos, ypos,
-				baloonWidth, baloonHeight,
-				BALOON_MARGIN, BALOON_MARGIN);
+			bg = getHintShape();
 		}
 
 		g2.setPaint (BALOON_PAINT);
@@ -164,28 +215,84 @@
 		g2.setColor (Color.BLACK);
 		g2.draw (bg);
 
+		Point hintPos = getHintPos();
 		// then do actual drawing
 		for (Map.Entry<TextLayout, Point> entry : layouts.entrySet())
 		{
-			Point p = entry.getValue();
+			Point textPos = entry.getValue();
 			TextLayout l = entry.getKey();
-			l.draw(g2, (float)(xpos + BALOON_MARGIN + p.getX()), (float)(ypos + p.getY() + BALOON_MARGIN));
+			l.draw(
+				g2,
+				(float)(hintPos.getX() + textPos.getX() + BALOON_MARGIN),
+				(float)(hintPos.getY() + textPos.getY() + BALOON_MARGIN));
 		}
 
+		// draw lines
+
+		
+		Point p = relativeToView (x1, y1, oldView);
+		GeneralPath path = new GeneralPath ();
+		Point s = new Point (
+			(int)(hintPos.getX()),
+			(int)(hintPos.getY() + baloonHeight / 2)
+			);
+		path.moveTo ((float)s.getX(), (float)s.getY());
+		path.curveTo (
+			(float)(s.getX() - WAYPOINT_OFFSET),
+			(float)(s.getY()),
+			(float)(p.getX() + WAYPOINT_OFFSET),
+			(float)p.getY(),
+			(float)p.getX(),
+			(float)p.getY()
+			);
+		p = relativeToView (x2, y2, newView);
+		s = new Point (
+			(int)(hintPos.getX() + baloonWidth),
+			(int)(hintPos.getY() + baloonHeight / 2)
+			);
+		path.moveTo ((float)s.getX(), (float)s.getY());
+		path.curveTo (
+			(float)s.getX() + WAYPOINT_OFFSET,
+			(float)s.getY(),
+			(float)p.getX() - WAYPOINT_OFFSET,
+			(float)p.getY(),
+			(float)p.getX(),
+			(float)p.getY());
+			
+		g2.setStroke (new BasicStroke (5));
+		g2.setColor (Color.YELLOW);
+		g2.draw (path);
+		
 		g2.dispose();
     }
 
-    public void eventDispatched(AWTEvent event) {
-        if (event instanceof MouseEvent) {
+	Point relativeToView (double x, double y, JViewport view)
+	{
+		Point p = view.getLocationOnScreen();
+		Point p2 = getLocationOnScreen();
+		Point p3 = view.getViewPosition();
+		int rx = (int)(p.getX() - p2.getX() - p3.getX() + (x * zoomFactor / 15.0));
+		int ry = (int)(p.getY() - p2.getY() - p3.getY() + (y * zoomFactor / 15.0));
+		return new Point (rx, ry);
+	}
+	
+    public void eventDispatched(AWTEvent event)
+	{
+        if (event instanceof MouseEvent)
+		{
             MouseEvent me = (MouseEvent) event;
-            if (!SwingUtilities.isDescendingFrom(me.getComponent(), frame)) {
+            if (!SwingUtilities.isDescendingFrom(me.getComponent(), frame))
+			{
                 return;
             }
-            if (me.getID() == MouseEvent.MOUSE_EXITED && me.getComponent() == frame) {
-                point = null;
-            } else {
+            if (me.getID() == MouseEvent.MOUSE_EXITED && me.getComponent() == frame)
+			{
+                mousePos = null;
+            }
+			else
+			{
                 MouseEvent converted = SwingUtilities.convertMouseEvent(me.getComponent(), me, frame.getGlassPane());
-                point = converted.getPoint();
+                mousePos = converted.getPoint();
 			}
             repaint();
         }
@@ -198,10 +305,12 @@
      * otherwise we return false to respect the cursors
      * for the underneath components
      */
-    public boolean contains(int x, int y) {
+    public boolean contains(int x, int y)
+	{
         if (getMouseListeners().length == 0 && getMouseMotionListeners().length == 0
                 && getMouseWheelListeners().length == 0
-                && getCursor() == Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR)) {
+                && getCursor() == Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR))
+		{
             return false;
         }
         return super.contains(x, y);
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1136)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1137)
@@ -178,6 +178,7 @@
 			if(view[1] != null)
 			{
 				view[1].setPctZoom(zoomFactor);
+				glassPane.setPctZoom (view[1].getPctZoom());
 			}
 		}
 		
@@ -240,6 +241,9 @@
 		pwyPane[PWY_OLD].setPreferredSize (new Dimension (400, 300));
 		contents.add (pwyPane[PWY_NEW]);
 		pwyPane[PWY_NEW].setPreferredSize (new Dimension (400, 300));
+		
+		glassPane.setViewPorts (pwyPane[0].getViewport(), pwyPane[1].getViewport());
+		
 		validate();
 	}
 
@@ -247,24 +251,16 @@
 	{
 		if (e.getType() == VPathwayEvent.ELEMENT_CLICKED_DOWN)
 		{
-/*			if (e.getSource() == view[PWY_OLD])
+			if (outputter != null)
 			{
-				System.out.println ("Element clicked in old pathway");
-			}
-			else if (e.getSource() == view[PWY_NEW])
-			{
-				System.out.println ("Element clicked in new pathway");
-			}
-*/			if (outputter != null)
-			{
 				PanelOutputter.ModData mod = outputter.modsByElt.get (e.getAffectedElement());
 				if (mod != null)
 				{
-					glassPane.setHint (mod.hints, 0, 0, 0, 0);
+					glassPane.setHint (mod.hints, mod.x1, mod.y1, mod.x2, mod.y2);
 				}
 				else
 				{
-					glassPane.showHint (false);
+					glassPane.clearHint ();
 				}
 			}		
 		}
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/AppletMain.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/AppletMain.java	(revision 0)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/AppletMain.java	(revision 1137)
@@ -0,0 +1,37 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import javax.swing.*;
+import java.awt.*;
+
+public class AppletMain extends JApplet
+{
+	String oldPwy, newPwy;
+	
+	public void init()
+	{
+		Container contentPane = getContentPane();
+		contentPane.setLayout (new FlowLayout());
+		oldPwy = getParameter ("old");
+		newPwy = getParameter ("new");
+		JLabel friendlyLabel = new JLabel (oldPwy + " " + newPwy);
+		contentPane.add (friendlyLabel);
+
+	}
+	
+}
\ No newline at end of file

Property changes on: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/AppletMain.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PanelOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PanelOutputter.java	(revision 1136)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PanelOutputter.java	(revision 1137)
@@ -146,10 +146,10 @@
 		Rectangle r2 = veltNew.getVBounds();
 
 		ModData mod = new ModData (
-				(int)(r1.getX() + r1.getWidth() / 2),
-				(int)(r1.getY() + r1.getHeight() / 2),
-				(int)(r2.getX() + r2.getWidth() / 2),
-				(int)(r2.getY() + r2.getHeight() / 2),
+			(int)vpwy[PWY_OLD].mFromV(r1.getX() + r1.getWidth() / 2),
+			(int)vpwy[PWY_OLD].mFromV(r1.getY() + r1.getHeight() / 2),
+			(int)vpwy[PWY_NEW].mFromV(r2.getX() + r2.getWidth() / 2),
+			(int)vpwy[PWY_NEW].mFromV(r2.getY() + r2.getHeight() / 2),
 				curHint);
 
 		modifications.add (mod);
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 1136)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 1137)
@@ -73,20 +73,76 @@
 				
 				switch (newProp) 
 				{
-					case GRAPHID:
-					case GROUPID:
+				case GRAPHID:
+				case GROUPID:
 						max = 600 / oldN;
 						if (oo == null ? no == null : oo.equals (no))
 						{
 							score = max;
 						}
 						break;
-					case CENTERX:
-					case CENTERY:
-					case ENDX:
-					case ENDY:
-					case STARTX:		
-					case STARTY:
+				case STARTX:
+				case ENDX:
+					// disregard x coords, we do the calculations for y coords.
+					break;
+				case STARTY:
+				{					
+					max = 300 / oldN;
+					double dx = newE.getMStartX() - oldE.getMStartX();
+					double dy = newE.getMStartY() - oldE.getMStartY();					
+					double dist = Math.sqrt (dx * dx + dy * dy);
+					if (dist < 1)
+					{
+						score = max;
+					}
+					else if (dist < 10)
+					{
+						score = max * 3 / 4;
+					}
+					else if (dist < 100)
+					{
+						score = max / 2;
+					}
+					else if (dist < 1000)
+					{
+						score = max / 4;
+					}
+					else
+					{
+						score = 0;
+					}
+				}
+					break;
+				case ENDY:
+				{
+					max = 300 / oldN;
+					double dx = newE.getMEndX() - oldE.getMEndX();
+					double dy = newE.getMEndY() - oldE.getMEndY();					
+					double dist = Math.sqrt (dx * dx + dy * dy);
+					if (dist < 1)
+					{
+						score = max;
+					}
+					else if (dist < 10)
+					{
+						score = max * 3 / 4;
+					}
+					else if (dist < 100)
+					{
+						score = max / 2;
+					}
+					else if (dist < 1000)
+					{
+						score = max / 4;
+					}
+					else
+					{
+						score = 0;
+					}
+				}
+					break;
+				case CENTERX:
+				case CENTERY:
 						max = 100 / oldN;
 						double delta = (Double)oo - (Double)no;
 						if (delta < 0.5)
@@ -103,7 +159,14 @@
 						}							
 						break;
 					default:
-						max = 100 / oldN;
+						if (oo != null && no != null)
+						{
+							max = 100 / oldN;
+						}
+						else
+						{
+							max = 50 / oldN;
+						}
 						if (oo == null ? no == null : oo.equals (no))
 						{
 							score = max;
Index: trunk/tools/gpmldiff/table2xls.pl
===================================================================
--- trunk/tools/gpmldiff/table2xls.pl	(revision 1136)
+++ trunk/tools/gpmldiff/table2xls.pl	(revision 1137)
@@ -67,7 +67,7 @@
 		{
 			$format = $header_format;
 		}
-		elsif ($field >= 50)
+		elsif ($field >= 60)
 		{
 			$format = $data_format2;
 		}
@@ -126,4 +126,4 @@
 {
 	#this works on ubuntu breezy linux, and probably other current gnome-based distros
 	system ("gnome-open", $fnOut);
-}
\ No newline at end of file
+}
