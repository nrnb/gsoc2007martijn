Index: trunk/src/core/org/pathvisio/model/UndoManager.java
===================================================================
--- trunk/src/core/org/pathvisio/model/UndoManager.java	(revision 1106)
+++ trunk/src/core/org/pathvisio/model/UndoManager.java	(revision 1107)
@@ -1,51 +0,0 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
-package org.pathvisio.model;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class UndoManager 
-{
-	private List<UndoAction> undoList = new ArrayList<UndoAction>();
-
-	void newAddAction (PathwayElement affectedObject)
-	{
-		undoList.clear();		
-	}
-	
-	void newChangeAction (PathwayElement affectedObject)
-	{
-		UndoAction a = new UndoAction ("Change object", UndoAction.UNDO_CHANGE, affectedObject);
-		undoList.add(a);
-	}
-	
-	void newRemoveAction (PathwayElement affectedObject)
-	{
-		undoList.clear();
-	}
-	
-	void undo()
-	{
-		if (undoList.size() > 0)
-		{
-			UndoAction a = undoList.get(undoList.size()-1);
-			a.undo();
-			undoList.remove(a);
-		}
-	}
-}
Index: trunk/src/core/org/pathvisio/model/UndoAction.java
===================================================================
--- trunk/src/core/org/pathvisio/model/UndoAction.java	(revision 1106)
+++ trunk/src/core/org/pathvisio/model/UndoAction.java	(revision 1107)
@@ -1,74 +0,0 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
-package org.pathvisio.model;
-
-public class UndoAction 
-{
-	
-	public UndoAction(String _message, 
-			int _actionType,
-			PathwayElement _affectedObject)
-	{
-		parent = _affectedObject.getParent();
-		message = _message;
-		actionType = _actionType;
-		affectedObject = _affectedObject;
-		if (actionType == UNDO_CHANGE)
-		{
-			//TODO: doesn't work right now because
-			//copy is made after change already took place!
-			savedObject = affectedObject.copy(); 
-		}
-	}
-	
-	String message;
-	Pathway parent;
-	
-	public static final int UNDO_ADD = 1;
-	public static final int UNDO_REMOVE = 2;
-	public static final int UNDO_CHANGE = 3;
-	
-	int actionType;
-	
-	/**
-	 * affectedObject contains a reference to the actual object,
-	 * used in all three event types.
-	 * It acts like a pointer, its fields may be changed by following actions. 
-	 */
-	private PathwayElement affectedObject;
-	/**
-	 * savedObject contains a copy of the actual object,
-	 * used only for the UNDO_CHANGE type.
-	 */
-	private PathwayElement savedObject = null;
-	
-	public void undo()
-	{
-		switch (actionType)
-		{
-			case UNDO_ADD:
-				parent.remove(affectedObject);
-				break;
-			case UNDO_REMOVE:
-				parent.add(affectedObject);
-				break;
-			case UNDO_CHANGE:
-				affectedObject.copyValuesFrom(savedObject);
-				break;
-		}
-	}
-}
Index: trunk/src/core/org/pathvisio/model/Pathway.java
===================================================================
--- trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1106)
+++ trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1107)
@@ -462,33 +462,26 @@
 		return systemCodes;
 	}
 	
-	UndoManager undoManager = new UndoManager();
-	
-	public void undo()
-	{
-		undoManager.undo();
-	}
-
 	/**
 	 * register undo actions,
 	 * disabled for the moment.
 	 */
 	public void gmmlObjectModified(PathwayEvent e) 
 	{
-		switch (e.getType())
+		markChanged();
+	}
+
+	public Pathway clone()
+	{
+		Pathway result = new Pathway();
+		int i = 0;
+		for (PathwayElement pe : dataObjects)
 		{
-			case PathwayEvent.MODIFIED_GENERAL:
-			case PathwayEvent.MODIFIED_SHAPE:
-				undoManager.newChangeAction(e.getAffectedData());
-				break;
-			case PathwayEvent.ADDED:
-				undoManager.newAddAction(e.getAffectedData());
-				break;
-			case PathwayEvent.DELETED:
-				undoManager.newRemoveAction(e.getAffectedData());
-				break;
+			result.add (pe.copy());
+			i++;
 		}
-		markChanged();
+		System.out.println (i + " objects copied");
+		return result;
 	}
 
 }
Index: trunk/src/core/org/pathvisio/view/UndoManager.java
===================================================================
--- trunk/src/core/org/pathvisio/view/UndoManager.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/UndoManager.java	(revision 1107)
@@ -0,0 +1,46 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.view;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.pathvisio.Engine;
+import org.pathvisio.model.Pathway;
+
+public class UndoManager 
+{
+	private List<UndoAction> undoList = new ArrayList<UndoAction>();
+
+	void newAction (String desc)
+	{
+		Pathway pwy = Engine.getCurrent().getActivePathway();
+		UndoAction x = new UndoAction (desc, (Pathway)pwy.clone());
+		undoList.add (x);
+	}
+		
+	void undo()
+	{
+		if (undoList.size() > 0)
+		{
+			UndoAction a = undoList.get(undoList.size()-1);
+			System.out.println ("Undoing " + a.getMessage());
+			a.undo();
+			undoList.remove(a);
+			System.out.println (undoList.size() + " remaining");
+		}
+	}
+}

Property changes on: trunk/src/core/org/pathvisio/view/UndoManager.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/src/core/org/pathvisio/view/UndoAction.java
===================================================================
--- trunk/src/core/org/pathvisio/view/UndoAction.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/UndoAction.java	(revision 1107)
@@ -0,0 +1,43 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.view;
+
+import org.pathvisio.model.Pathway;
+import org.pathvisio.Engine;
+
+public class UndoAction 
+{	
+	public UndoAction(String _message, 
+					  Pathway current)
+	{
+		message = _message;
+		originalState = current;
+	}
+	
+	private String message;
+	private Pathway originalState;
+
+	public String getMessage()
+	{
+		return message;	
+	}
+	
+	public void undo()
+	{
+		Engine.getCurrent().getActiveVPathway().replacePathway (originalState);
+	}
+}

Property changes on: trunk/src/core/org/pathvisio/view/UndoAction.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/src/core/org/pathvisio/view/VPathway.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1106)
+++ trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1107)
@@ -201,14 +201,27 @@
 		}
 		return result;
 	}
-	
+
 	/**
+	   used by undo manager.
+	 */
+	void replacePathway (Pathway originalState)
+	{
+		drawingObjects	= new ArrayList<VPathwayElement>();
+		selection = new SelectionBox(this);
+		pressedObject = null;
+		selectedGraphics = null;
+		data = null;
+		fromGmmlData (originalState);
+	}
+
+
+	/**
 	 * Maps the contents of a pathway to this VPathway
 	 */	
 	public void fromGmmlData(Pathway _data)
 	{		
 		data = _data;
-			
 		for (PathwayElement o : data.getDataObjects())
 		{
 			fromGmmlDataObject (o);
@@ -462,6 +475,35 @@
 	{
 		pressedObject = o;
 	}
+
+	/**
+	   @arg p2d point where mouse is at
+	 */
+	private void linkPointToObject (Point2D p2d, Handle g)
+	{
+		undoManager.newAction ("Link point to object");
+		resetHighlight();
+		List<VPathwayElement> objects = getObjectsAt (p2d);
+		Collections.sort(objects);
+		VPoint p = (VPoint)g.parent;
+		VPathwayElement x = null;
+		for (VPathwayElement o : objects)
+		{
+			if (o instanceof VPoint && o != p)
+			{
+				x = o;
+				p.link((VPoint)o);
+				break;
+			} else if (o instanceof Graphics && !(o instanceof Line))
+			{
+				x = o;
+				p.link((Graphics)o);
+				break;
+			} 
+		}
+		if (x != null)
+			x.highlight();		
+	}
 	
 	int vPreviousX;
 	int vPreviousY;
@@ -493,29 +535,7 @@
 					&& newGraphics == NEWNONE
 					&& ((Handle) pressedObject).parent instanceof VPoint)
 			{
-				resetHighlight();
-				Point2D p2d = new Point2D.Double(ve.getX(), ve.getY());
-				List<VPathwayElement> objects = getObjectsAt (p2d);
-				Collections.sort(objects);
-				Handle g = (Handle)pressedObject;
-				VPoint p = (VPoint)g.parent;
-				VPathwayElement x = null;
-				for (VPathwayElement o : objects)
-				{
-					if (o instanceof VPoint && o != p)
-					{
-						x = o;
-						p.link((VPoint)o);
-						break;
-					} else if (o instanceof Graphics && !(o instanceof Line))
-					{
-						x = o;
-						p.link((Graphics)o);
-						break;
-					} 
-				}
-				if (x != null)
-					x.highlight();
+				linkPointToObject (new Point2D.Double(ve.getX(), ve.getY()), (Handle)pressedObject);
 			}
 			redrawDirtyRect();
 		}
@@ -571,7 +591,7 @@
 			if (newGraphics != NEWNONE)
 			{
 				newObject(new Point(e.getX(), e.getY()));
-				//SwtEngine.getCurrent().getWindow().deselectNewItemActions();
+				//SwtGui.getCurrent().getWindow().deselectNewItemActions();
 			} else
 			{
 				editObject(new Point(e.getX(), e.getY()), e);
@@ -789,8 +809,10 @@
 			vPreviousX = p.x;
 			vPreviousY = p.y;
 			
-			isDragging = true;		
-		} else
+			isDragging = true;
+			undoManager.newAction ("Dragging");
+		}
+		else
 		{
 			// start dragging selectionbox	
 			startSelecting(p2d);
@@ -930,6 +952,7 @@
 	 */
 	private void newObject(Point ve)
 	{
+		undoManager.newAction ("New Object");
 		newObjectDragStart = ve;
 		int mx = (int)mFromV((double)ve.x);
 		int my = (int)mFromV((double)ve.y); 
@@ -1405,36 +1428,36 @@
 			parent.registerKeyboardAction(KEY_SELECT_ALL, viewActions.selectAll);
 			parent.registerKeyboardAction(KEY_DELETE, viewActions.delete);
 			parent.registerKeyboardAction(KEY_MOVELEFT, new AbstractAction()
-					{
-						public void actionPerformed(ActionEvent e)
-						{
-						keyMove(KEY_MOVELEFT);
-						}
-					});
+			{
+				public void actionPerformed(ActionEvent e)
+				{
+					keyMove(KEY_MOVELEFT);
+				}
+			});
 			parent.registerKeyboardAction(KEY_MOVERIGHT, new AbstractAction()
-					{
-						public void actionPerformed(ActionEvent e)
-						{
-						keyMove(KEY_MOVERIGHT);
-						}
-					});
+			{
+				public void actionPerformed(ActionEvent e)
+				{
+					keyMove(KEY_MOVERIGHT);
+				}
+			});
 			parent.registerKeyboardAction(KEY_MOVEUP, new AbstractAction()
-					{
-						public void actionPerformed(ActionEvent e)
-						{
-						keyMove(KEY_MOVEUP);
-						}
-					});
+			{
+				public void actionPerformed(ActionEvent e)
+				{
+					keyMove(KEY_MOVEUP);
+				}
+			});
 			parent.registerKeyboardAction(KEY_MOVEDOWN, new AbstractAction()
-					{
-						public void actionPerformed(ActionEvent e)
-						{
-						keyMove(KEY_MOVEDOWN);
-						}
-					});
+			{
+				public void actionPerformed(ActionEvent e)
+				{
+					keyMove(KEY_MOVEDOWN);
+				}
+			});
 		}
 	}
-
+	
 	public void keyReleased(KeyEvent e)
 	{
 		//use registerKeyboardActions
@@ -1450,8 +1473,7 @@
 	{
 		for(VPathwayElement o : toRemove)
 		{
-			removeDrawingObject(o);
-			
+			removeDrawingObject(o);			
 		}
 		selection.fitToSelection();
 	}
@@ -1969,28 +1991,36 @@
 	}
 	
 	//AP20070716
-	public class YComparator implements Comparator<Graphics> {
-		public int compare(Graphics g1, Graphics g2) {
+	public class YComparator implements Comparator<Graphics>
+	{
+		public int compare(Graphics g1, Graphics g2)
+		{
 			if (g1.getVCenterY() == g2.getVCenterY())
 				return 0;
 			else if (g1.getVCenterY() < g2.getVCenterY())
 				return -1;
 			else
-
 				return 1;
 		}
 	}
-	public class XComparator implements Comparator<Graphics> {
-		public int compare(Graphics g1, Graphics g2) {
+	
+	public class XComparator implements Comparator<Graphics>
+	{
+		public int compare(Graphics g1, Graphics g2)
+		{
 			if (g1.getVCenterX() == g2.getVCenterX())
 				return 0;
 			else if (g1.getVCenterX() < g2.getVCenterX())
 				return -1;
 			else
-
 				return 1;
 		}
 	}
+
+	UndoManager undoManager = new UndoManager();
 	
-
-} // end of class
+	public void undo()
+	{
+		undoManager.undo();
+	}
+}
Index: trunk/src/core/org/pathvisio/view/ShapeRegistry.java
===================================================================
--- trunk/src/core/org/pathvisio/view/ShapeRegistry.java	(revision 1106)
+++ trunk/src/core/org/pathvisio/view/ShapeRegistry.java	(revision 1107)
@@ -50,9 +50,9 @@
 		{
 			// now scale the path so it has proper w and h.
 			Rectangle r = sh.getBounds();
-			AffineTransform at = AffineTransform.getScaleInstance (w / r.width, h / r.height);
-			sh = at.createTransformedShape (sh);
-			at = AffineTransform.getTranslateInstance (x - r.x, y - r.y);
+			AffineTransform at = new AffineTransform();
+			at.translate (x - r.x, y - r.y);
+			at.scale (w / r.width, h / r.height);
 			return at.createTransformedShape (sh);
 		}
 		return null;
@@ -132,210 +132,45 @@
 			path.closePath();
 			break;
 		case PROTEINB:
-			path.moveTo (36, 0);
-			path.curveTo (28, 1, 22, 5, 19, 11);
-			path.curveTo (9, 13, 1, 22, 1, 33);
-			path.curveTo (1, 43, 8, 52, 18, 55);
-			path.curveTo (21, 61, 28, 66, 36, 66);
-			path.curveTo (44, 66, 51, 61, 55, 55);
-			path.curveTo (65, 53, 73, 44, 73, 33);
-			path.curveTo (73, 22, 65, 13, 55, 11);
-			path.curveTo (51, 5, 45, 0, 37, 0);
-			path.curveTo (37, 0, 36, 0, 36, 0);
+			path.moveTo (35.22f, 1.03f);
+			path.curveTo (28.17f, 1.34f, 21.64f, 5.70f, 18.19f, 11.78f);
+			path.curveTo (7.92f, 13.45f, 0.25f, 23.46f, 0.47f, 33.72f);
+			path.curveTo (0.27f, 43.64f, 7.43f, 53.33f, 17.25f, 55.40f);
+			path.curveTo (21.43f, 63.78f, 31.55f, 68.86f, 40.71f, 66.31f);
+			path.curveTo (46.39f, 64.88f, 51.27f, 60.86f, 54.06f, 55.75f);
+			path.curveTo (64.33f, 54.31f, 72.18f, 44.49f, 72.18f, 34.27f);
+			path.curveTo (72.63f, 24.01f, 65.17f, 13.84f, 54.94f, 11.93f);
+			path.curveTo (52.33f, 8.95f, 49.65f, 5.12f, 45.70f, 3.35f);
+			path.curveTo (42.49f, 1.64f, 38.84f, 0.89f, 35.22f, 1.03f);
 			path.closePath();
-			path.moveTo (36, 4);
-			path.curveTo (36, 4, 36, 4, 37, 4);
-			path.curveTo (44, 4, 50, 8, 53, 14);
-			path.curveTo (53, 15, 53, 16, 54, 17);
-			path.curveTo (54, 17, 54, 18, 54, 18);
-			path.curveTo (54, 19, 55, 21, 55, 22);
-			path.curveTo (55, 24, 54, 26, 54, 28);
-			path.curveTo (54, 29, 53, 29, 53, 30);
-			path.curveTo (52, 29, 52, 29, 51, 28);
-			path.curveTo (51, 28, 51, 28, 51, 28);
-			path.curveTo (50, 27, 49, 26, 47, 25);
-			path.curveTo (47, 25, 47, 24, 46, 24);
-			path.curveTo (45, 24, 44, 23, 43, 23);
-			path.curveTo (42, 23, 42, 22, 42, 22);
-			path.curveTo (40, 22, 38, 21, 36, 21);
-			path.curveTo (34, 21, 33, 22, 31, 22);
-			path.curveTo (29, 23, 28, 23, 26, 24);
-			path.curveTo (26, 24, 26, 24, 26, 24);
-			path.curveTo (24, 26, 22, 27, 20, 29);
-			path.curveTo (20, 28, 20, 28, 20, 27);
-			path.curveTo (19, 26, 19, 24, 19, 22);
-			path.curveTo (19, 22, 19, 22, 19, 22);
-			path.curveTo (19, 22, 19, 22, 19, 22);
-			path.curveTo (19, 21, 19, 19, 20, 18);
-			path.curveTo (20, 18, 20, 17, 20, 17);
-			path.curveTo (20, 16, 21, 15, 21, 14);
-			path.curveTo (24, 8, 29, 4, 36, 4);
+			path.moveTo (35.41f, 4.53f);
+			path.curveTo (43.73f, 3.99f, 51.43f, 10.33f, 53.37f, 18.29f);
+			path.curveTo (54.52f, 22.42f, 54.39f, 27.08f, 52.34f, 30.90f);
+			path.curveTo (47.43f, 24.06f, 37.85f, 20.57f, 29.78f, 23.34f);
+			path.curveTo (25.94f, 24.54f, 22.47f, 26.87f, 19.87f, 29.94f);
+			path.curveTo (15.56f, 19.96f, 22.24f, 6.85f, 33.04f, 4.83f);
+			path.curveTo (33.82f, 4.67f, 34.61f, 4.57f, 35.41f, 4.53f);
 			path.closePath();
-			path.moveTo (17, 15);
-			path.curveTo (17, 15, 17, 15, 17, 15);
-			path.curveTo (17, 15, 17, 16, 17, 16);
-			path.curveTo (16, 16, 16, 17, 16, 17);
-			path.curveTo (16, 19, 16, 21, 16, 22);
-			path.curveTo (16, 22, 16, 22, 16, 22);
-			path.curveTo (16, 22, 16, 22, 16, 22);
-			path.curveTo (16, 24, 16, 26, 16, 28);
-			path.curveTo (16, 28, 16, 28, 16, 28);
-			path.curveTo (17, 30, 17, 31, 18, 32);
-			path.curveTo (17, 34, 17, 35, 16, 37);
-			path.curveTo (16, 37, 16, 37, 16, 38);
-			path.curveTo (15, 40, 15, 42, 15, 44);
-			path.curveTo (15, 46, 15, 47, 16, 49);
-			path.curveTo (16, 49, 16, 50, 16, 50);
-			path.curveTo (9, 48, 4, 41, 4, 33);
-			path.curveTo (4, 24, 10, 17, 17, 15);
+			path.moveTo (16.34f, 15.78f);
+			path.curveTo (14.45f, 21.42f, 14.57f, 28.02f, 17.50f, 33.37f);
+			path.curveTo (14.54f, 38.79f, 13.51f, 45.40f, 15.56f, 51.31f);
+			path.curveTo (6.44f, 47.89f, 1.80f, 36.75f, 4.90f, 27.69f);
+			path.curveTo (6.60f, 22.24f, 10.89f, 17.59f, 16.34f, 15.78f);
 			path.closePath();
-			path.moveTo (57, 15);
-			path.curveTo (64, 17, 69, 24, 69, 33);
-			path.curveTo (69, 41, 64, 49, 56, 51);
-			path.curveTo (57, 50, 57, 49, 57, 48);
-			path.curveTo (57, 48, 57, 48, 57, 48);
-			path.curveTo (57, 48, 57, 48, 57, 48);
-			path.curveTo (57, 46, 58, 45, 58, 44);
-			path.curveTo (58, 43, 57, 42, 57, 41);
-			path.curveTo (57, 41, 57, 40, 57, 39);
-			path.curveTo (57, 38, 56, 37, 56, 37);
-			path.curveTo (56, 36, 56, 35, 55, 34);
-			path.curveTo (55, 34, 55, 34, 55, 34);
-			path.curveTo (56, 32, 57, 31, 57, 29);
-			path.curveTo (58, 27, 58, 25, 58, 22);
-			path.curveTo (58, 21, 58, 19, 57, 17);
-			path.curveTo (57, 17, 57, 16, 57, 16);
-			path.curveTo (57, 15, 57, 15, 57, 15);
+			path.moveTo (56.28f, 15.81f);
+			path.curveTo (65.68f, 18.80f, 70.76f, 29.93f, 67.94f, 39.17f);
+			path.curveTo (66.32f, 45.03f, 61.68f, 50.04f, 55.81f, 51.78f);
+			path.curveTo (57.00f, 48.33f, 57.35f, 44.62f, 56.61f, 41.03f);
+			path.curveTo (56.22f, 37.40f, 53.29f, 34.25f, 56.26f, 30.98f);
+			path.curveTo (58.07f, 26.12f, 57.96f, 20.69f, 56.28f, 15.81f);
 			path.closePath();
-			path.moveTo (36, 25);
-			path.curveTo (38, 25, 39, 25, 41, 26);
-			path.curveTo (41, 26, 41, 26, 41, 26);
-			path.curveTo (43, 26, 44, 27, 45, 27);
-			path.curveTo (45, 28, 45, 28, 45, 28);
-			path.curveTo (47, 29, 48, 29, 49, 31);
-			path.curveTo (50, 32, 51, 33, 51, 34);
-			path.curveTo (52, 34, 52, 35, 52, 35);
-			path.curveTo (52, 36, 53, 37, 53, 38);
-			path.curveTo (53, 38, 53, 39, 54, 40);
-			path.curveTo (54, 40, 54, 41, 54, 41);
-			path.curveTo (54, 42, 54, 43, 54, 44);
-			path.curveTo (54, 45, 54, 46, 54, 48);
-			path.curveTo (53, 49, 53, 50, 53, 50);
-			path.curveTo (53, 51, 53, 51, 52, 51);
-			path.curveTo (50, 58, 43, 63, 36, 63);
-			path.curveTo (29, 63, 24, 58, 21, 53);
-			path.curveTo (21, 52, 21, 52, 21, 52);
-			path.curveTo (20, 51, 19, 50, 19, 48);
-			path.curveTo (19, 47, 19, 45, 19, 44);
-			path.curveTo (19, 42, 19, 40, 19, 38);
-			path.curveTo (20, 37, 20, 35, 21, 34);
-			path.curveTo (21, 34, 21, 34, 21, 34);
-			path.curveTo (21, 34, 21, 34, 21, 34);
-			path.curveTo (23, 31, 25, 29, 28, 27);
-			path.curveTo (30, 26, 33, 25, 36, 25);
+			path.moveTo (35.81f, 25.90f);
+			path.curveTo (43.76f, 25.85f, 50.93f, 31.93f, 52.77f, 39.57f);
+			path.curveTo (55.25f, 48.14f, 51.03f, 58.27f, 42.73f, 61.92f);
+			path.curveTo (35.28f, 65.52f, 25.73f, 62.48f, 21.37f, 55.55f);
+			path.curveTo (15.48f, 47.23f, 17.70f, 34.43f, 26.28f, 28.84f);
+			path.curveTo (29.08f, 26.94f, 32.44f, 25.90f, 35.81f, 25.90f);
 			path.closePath();
-			path.moveTo (36, 0);
-			path.curveTo (28, 1, 22, 5, 19, 11);
-			path.curveTo (9, 13, 1, 22, 1, 33);
-			path.curveTo (1, 43, 8, 52, 18, 55);
-			path.curveTo (21, 61, 28, 66, 36, 66);
-			path.curveTo (44, 66, 51, 61, 55, 55);
-			path.curveTo (65, 53, 73, 44, 73, 33);
-			path.curveTo (73, 22, 65, 13, 55, 11);
-			path.curveTo (51, 5, 45, 0, 37, 0);
-			path.curveTo (37, 0, 36, 0, 36, 0);
-			path.closePath();
-			path.moveTo (36, 4);
-			path.curveTo (36, 4, 36, 4, 37, 4);
-			path.curveTo (44, 4, 50, 8, 53, 14);
-			path.curveTo (53, 15, 53, 16, 54, 17);
-			path.curveTo (54, 17, 54, 18, 54, 18);
-			path.curveTo (54, 19, 55, 21, 55, 22);
-			path.curveTo (55, 24, 54, 26, 54, 28);
-			path.curveTo (54, 29, 53, 29, 53, 30);
-			path.curveTo (52, 29, 52, 29, 51, 28);
-			path.curveTo (51, 28, 51, 28, 51, 28);
-			path.curveTo (50, 27, 49, 26, 47, 25);
-			path.curveTo (47, 25, 47, 24, 46, 24);
-			path.curveTo (45, 24, 44, 23, 43, 23);
-			path.curveTo (42, 23, 42, 22, 42, 22);
-			path.curveTo (40, 22, 38, 21, 36, 21);
-			path.curveTo (34, 21, 33, 22, 31, 22);
-			path.curveTo (29, 23, 28, 23, 26, 24);
-			path.curveTo (26, 24, 26, 24, 26, 24);
-			path.curveTo (24, 26, 22, 27, 20, 29);
-			path.curveTo (20, 28, 20, 28, 20, 27);
-			path.curveTo (19, 26, 19, 24, 19, 22);
-			path.curveTo (19, 22, 19, 22, 19, 22);
-			path.curveTo (19, 22, 19, 22, 19, 22);
-			path.curveTo (19, 21, 19, 19, 20, 18);
-			path.curveTo (20, 18, 20, 17, 20, 17);
-			path.curveTo (20, 16, 21, 15, 21, 14);
-			path.curveTo (24, 8, 29, 4, 36, 4);
-			path.closePath();
-			path.moveTo (17, 15);
-			path.curveTo (17, 15, 17, 15, 17, 15);
-			path.curveTo (17, 15, 17, 16, 17, 16);
-			path.curveTo (16, 16, 16, 17, 16, 17);
-			path.curveTo (16, 19, 16, 21, 16, 22);
-			path.curveTo (16, 22, 16, 22, 16, 22);
-			path.curveTo (16, 22, 16, 22, 16, 22);
-			path.curveTo (16, 24, 16, 26, 16, 28);
-			path.curveTo (16, 28, 16, 28, 16, 28);
-			path.curveTo (17, 30, 17, 31, 18, 32);
-			path.curveTo (17, 34, 17, 35, 16, 37);
-			path.curveTo (16, 37, 16, 37, 16, 38);
-			path.curveTo (15, 40, 15, 42, 15, 44);
-			path.curveTo (15, 46, 15, 47, 16, 49);
-			path.curveTo (16, 49, 16, 50, 16, 50);
-			path.curveTo (9, 48, 4, 41, 4, 33);
-			path.curveTo (4, 24, 10, 17, 17, 15);
-			path.closePath();
-			path.moveTo (57, 15);
-			path.curveTo (64, 17, 69, 24, 69, 33);
-			path.curveTo (69, 41, 64, 49, 56, 51);
-			path.curveTo (57, 50, 57, 49, 57, 48);
-			path.curveTo (57, 48, 57, 48, 57, 48);
-			path.curveTo (57, 48, 57, 48, 57, 48);
-			path.curveTo (57, 46, 58, 45, 58, 44);
-			path.curveTo (58, 43, 57, 42, 57, 41);
-			path.curveTo (57, 41, 57, 40, 57, 39);
-			path.curveTo (57, 38, 56, 37, 56, 37);
-			path.curveTo (56, 36, 56, 35, 55, 34);
-			path.curveTo (55, 34, 55, 34, 55, 34);
-			path.curveTo (56, 32, 57, 31, 57, 29);
-			path.curveTo (58, 27, 58, 25, 58, 22);
-			path.curveTo (58, 21, 58, 19, 57, 17);
-			path.curveTo (57, 17, 57, 16, 57, 16);
-			path.curveTo (57, 15, 57, 15, 57, 15);
-			path.closePath();
-			path.moveTo (36, 25);
-			path.curveTo (38, 25, 39, 25, 41, 26);
-			path.curveTo (41, 26, 41, 26, 41, 26);
-			path.curveTo (43, 26, 44, 27, 45, 27);
-			path.curveTo (45, 28, 45, 28, 45, 28);
-			path.curveTo (47, 29, 48, 29, 49, 31);
-			path.curveTo (50, 32, 51, 33, 51, 34);
-			path.curveTo (52, 34, 52, 35, 52, 35);
-			path.curveTo (52, 36, 53, 37, 53, 38);
-			path.curveTo (53, 38, 53, 39, 54, 40);
-			path.curveTo (54, 40, 54, 41, 54, 41);
-			path.curveTo (54, 42, 54, 43, 54, 44);
-			path.curveTo (54, 45, 54, 46, 54, 48);
-			path.curveTo (53, 49, 53, 50, 53, 50);
-			path.curveTo (53, 51, 53, 51, 52, 51);
-			path.curveTo (50, 58, 43, 63, 36, 63);
-			path.curveTo (29, 63, 24, 58, 21, 53);
-			path.curveTo (21, 52, 21, 52, 21, 52);
-			path.curveTo (20, 51, 19, 50, 19, 48);
-			path.curveTo (19, 47, 19, 45, 19, 44);
-			path.curveTo (19, 42, 19, 40, 19, 38);
-			path.curveTo (20, 37, 20, 35, 21, 34);
-			path.curveTo (21, 34, 21, 34, 21, 34);
-			path.curveTo (21, 34, 21, 34, 21, 34);
-			path.curveTo (23, 31, 25, 29, 28, 27);
-			path.curveTo (30, 26, 33, 25, 36, 25);
-			path.closePath();			
 			break;
 		case VESICLE:
 			path.moveTo (15, 281);
@@ -375,6 +210,4 @@
 		path.closePath();
 		return path;
 	}
-	
-
 }
\ No newline at end of file
Index: trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1106)
+++ trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1107)
@@ -59,9 +59,9 @@
 		}
 		public void run() 
 		{
-			if (Engine.getCurrent().getActivePathway() != null)
+			if (Engine.getCurrent().getActiveVPathway() != null)
 			{
-				Engine.getCurrent().getActivePathway().undo();
+				Engine.getCurrent().getActiveVPathway().undo();
 			}
 		}
 	}
Index: trunk/build.xml
===================================================================
--- trunk/build.xml	(revision 1106)
+++ trunk/build.xml	(revision 1107)
@@ -1,5 +1,5 @@
 <?xml version="1.0"?>
-<project name="PathVisio" default="compile-v2" basedir=".">
+<project name="PathVisio" default="all" basedir=".">
 	
 	<property name="src.dir" value="src"/>
         
@@ -67,7 +67,6 @@
 	<target name="clean" description="Remove all generated files.">
 		<delete dir="${build.v1.dir}"/>
 		<delete dir="${build.v2.dir}"/>
-		<delete dir="${build.core.dir}"/>
 		<delete dir="${build.plugins.dir}"/>
 		<delete dir="${build.wikipathways.dir}"/>
 		<delete dir="${build.test.dir}"/>
@@ -77,27 +76,29 @@
 	</target>
 	
 	<target name="compile-v1" depends="prepare,resources-jar" description="Compile all sources">
-		<javac srcdir="."
-			includes="src/v1/**,src/core/**,src/swt/**"
+		<javac debug="true" srcdir="."
+			includes="src/v1/**,src/core/**,src/swt/**,src/swing/**"
 			destdir="${build.v1.dir}">
 			<classpath refid="project.v1.class.path"/>
 		</javac>
 	</target>
 
 	<target name="compile-v2" depends="prepare,resources-jar" description="Compile all sources">
-		<javac srcdir="." 
+		<javac debug="true" srcdir="." 
                includes="src/v2/**,src/core/**,src/swt/**,src/swing/**"
 			   
                destdir="${build.v2.dir}">
           <classpath refid="project.v2.class.path"/>
 		</javac>
-		<javac srcdir="src" 
+		<javac debug="true" srcdir="src" 
                     includes="plugins/**"
                     destdir="${build.plugins.dir}">
                     <classpath refid="project.v2.class.path"/>
 		</javac>
 	</target>
 
+	<target name="all" depends="compile-v1,compile-v2,compile-wikipathways" description="Compile all versions of this project" />
+
 	<target name="compile-wikipathways" depends="prepare, resources-jar" description="Compile wikipathways version">
 		<!-- Include packages					Exceptions
 			src/swing
