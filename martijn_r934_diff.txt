Index: trunk/src/v1/org/pathvisio/Globals.java
===================================================================
--- trunk/src/v1/org/pathvisio/Globals.java	(revision 933)
+++ trunk/src/v1/org/pathvisio/Globals.java	(revision 934)
@@ -26,4 +26,5 @@
 	public static final String APPLICATION_NAME = "PathVisio";
 	public static final String APPLICATION_VERSION_NAME = "PathVisio 1.0 release candidate 1";
 	public static final String HELP_URL = "http://wiki.bigcat.unimaas.nl/pathvisio/Help";
+	public static final boolean fUseExperimentalFeatures = false;
 }
Index: trunk/src/v1/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 933)
+++ trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 934)
@@ -70,7 +70,7 @@
 						ApplicationEventListener, ExpressionDataListener
 {
 	private static final long serialVersionUID = 1L;
-	public static int ZOOM_TO_FIT = -1;
+    static int ZOOM_TO_FIT = -1;
 	
 	private CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
 	private CommonActions.NewAction newAction = new CommonActions.NewAction (this);
@@ -79,13 +79,15 @@
 	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
 	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
 	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
-	private CommonActions.CloseAction closeAction = new CommonActions.CloseAction(this);	
 	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
 	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
 	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
 	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
 	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
 	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
+	private CommonActions.SwitchEditModeAction switchEditModeAction = new CommonActions.SwitchEditModeAction(this);
+	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
+	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
 	private AlignActions.AlignCenterXAction alignCenterXAction = new AlignActions.AlignCenterXAction(this);
 	private AlignActions.AlignCenterYAction alignCenterYAction = new AlignActions.AlignCenterYAction(this);
 	private AlignActions.AlignLeftAction alignLeftAction = new AlignActions.AlignLeftAction(this);
@@ -94,7 +96,7 @@
 	private AlignActions.AlignBottomAction alignBottomAction = new AlignActions.AlignBottomAction(this);
 	private AlignActions.SetCommonWidthAction setCommonWidthAction = new AlignActions.SetCommonWidthAction(this);
 	private AlignActions.SetCommonHeightAction setCommonHeightAction = new AlignActions.SetCommonHeightAction(this);
-	
+
 	/**
 	 * {@link Action} to select a Gene Database
 	 */
@@ -127,9 +129,27 @@
 			}
 		}
 	}
-	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
-	
+
 	/**
+	 * {@link Action} to show or hide the right sidepanel
+	 */
+	public class ShowRightPanelAction extends Action
+	{
+		MainWindow window;
+		public ShowRightPanelAction (MainWindow w)
+		{
+			super("Show &information panel", IAction.AS_CHECK_BOX);
+			window = w;
+			setChecked(true);
+		}
+		
+		public void run() {
+			if(isChecked()) rightPanel.show();
+			else rightPanel.hide();
+		}
+	}
+
+	/**
 	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
 	 */
 	private void cacheExpressionData()
@@ -153,97 +173,9 @@
 				}
 			}
 		}
-	}	
-					
-	/**
-	 * {@link Action} to switch between edit and view mode
-	 */
-	private class SwitchEditModeAction extends Action implements ApplicationEventListener
-	{
-		final String ttChecked = "Exit edit mode";
-		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
-		MainWindow window;
-		public SwitchEditModeAction (MainWindow w)
-		{
-			super("&Edit mode", IAction.AS_CHECK_BOX);
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
-			setToolTipText(ttUnChecked);
-			window = w;
-			
-			Engine.addApplicationEventListener(this);
-		}
-		
-		public void run () {
-			if(Engine.isDrawingOpen())
-			{
-				VPathway drawing = Engine.getVPathway();
-				if(isChecked())
-				{
-					//Switch to edit mode: show edit toolbar, show property table in sidebar
-					drawing.setEditMode(true);
-					showEditActionsCI(true);
-					showAlignActionsCI(true);
-					rightPanel.getTabFolder().setSelection(1);
-				}
-				else
-				{
-					//Switch to view mode: hide edit toolbar, show backpage browser in sidebar
-					drawing.setEditMode(false);
-					showEditActionsCI(false);
-					showAlignActionsCI(false);
-					rightPanel.getTabFolder().setSelection(0);
-				}
-			}
-			else //No gpml pathway loaded, deselect action and do nothing
-			{
-				setChecked(false);
-			}
-			getCoolBarManager().update(true);
-		}
-		
-		public void setChecked(boolean check) {
-			super.setChecked(check);
-			setToolTipText(check ? ttChecked : ttUnChecked);
-		}
-		
-		public void switchEditMode(boolean edit) {
-			setChecked(edit);
-			run();
-			
-		}
-
-		public void applicationEvent(ApplicationEvent e) {
-			if(e.type == ApplicationEvent.OPEN_PATHWAY) {
-				Engine.getVPathway().setEditMode(isChecked());
-			}
-			else if(e.type == ApplicationEvent.NEW_PATHWAY) {
-				switchEditMode(true);
-			}
-		}
 	}
-	private SwitchEditModeAction switchEditModeAction = new SwitchEditModeAction(this);
-		
+
 	/**
-	 * {@link Action} to show or hide the right sidepanel
-	 */
-	public class ShowRightPanelAction extends Action
-	{
-		MainWindow window;
-		public ShowRightPanelAction (MainWindow w)
-		{
-			super("Show &information panel", IAction.AS_CHECK_BOX);
-			window = w;
-			setChecked(true);
-		}
-		
-		public void run() {
-			if(isChecked()) rightPanel.show();
-			else rightPanel.hide();
-		}
-	}
-	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
-		
-	/**
 	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
 	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
 	 */
@@ -323,33 +255,7 @@
 		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
 	}
 	
-//	KH 20070514 begin
-	protected void createAlignActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(alignCenterXAction);
-		toolBarManager.add(alignCenterYAction);
-		toolBarManager.add(alignLeftAction);
-		toolBarManager.add(alignRightAction);
-		toolBarManager.add(alignTopAction);
-		toolBarManager.add(alignBottomAction);
-		toolBarManager.add(setCommonWidthAction);
-		toolBarManager.add(setCommonHeightAction);
-	
-		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
-	}
-	
-//	KH end
-
 	/**
-	   Invoked when user tries to close window
-	*/
-	protected boolean canHandleShellCloseEvent()
-	{
-		return Engine.canDiscardPathway();
-	}
-
-	/**
 	 * Creates element of the coolbar containing controls related to viewing a VPathway
 	 */
 	protected void createViewActionsCI()
@@ -389,7 +295,7 @@
 	 * Shows or hides the editActionsCI
 	 * @param show	true/false for either show or hide
 	 */
-	private void showEditActionsCI(boolean show)
+	public void showEditActionsCI(boolean show)
 	{
 		if(show) {
 			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
@@ -401,7 +307,11 @@
 		getCoolBarManager().update(true);
 	}
 	
-	private void showAlignActionsCI(boolean show)
+    /**
+	   Shows or hides the alignActionsCI.
+	   @param show	true/false for either show or hide
+	*/
+	public void showAlignActionsCI(boolean show)
 	{
 		if(show) {
 			getCoolBarManager().insertAfter(editActionsCI.getId(), alignActionsCI);
@@ -422,13 +332,12 @@
 	 */
 	protected MenuManager createMenuManager()
 	{
-		MenuManager m = new MenuManager();
+		menuManager = new MenuManager();
 		MenuManager fileMenu = new MenuManager ("&File");
 		fileMenu.add(newAction);
 		fileMenu.add(openAction);
 		fileMenu.add(saveAction);
 		fileMenu.add(saveAsAction);
-		//fileMenu.add(closeAction);
 		fileMenu.add(new Separator());
 		fileMenu.add(importAction);
 		fileMenu.add(exportAction);
@@ -457,20 +366,31 @@
 		MenuManager helpMenu = new MenuManager ("&Help");
 		helpMenu.add(aboutAction);
 		helpMenu.add(helpAction);
-		m.add(fileMenu);
-		m.add(editMenu);
-		m.add(viewMenu);
-		m.add(dataMenu);
-		m.add(helpMenu);
-		return m;
+		menuManager.add(fileMenu);
+		menuManager.add(editMenu);
+		menuManager.add(viewMenu);
+		menuManager.add(dataMenu);
+		menuManager.add(helpMenu);
+		return menuManager;
 	}
 	
 	public MainWindow()
 	{
 		this(null);
 	}
-	
+
+	private MenuManager menuManager = null;
 	/**
+	 * can be accessed by plugins etc. 
+	 * to add menu items and even complete menus.
+	 * 
+	 * (plugin API)
+	 */
+	public MenuManager getMenuManager()
+	{
+		return menuManager;
+	}
+	/**
 	 *Constructor for the MainWindow class
 	 *Initializes new MainWindow and sets properties for frame
 	 */
@@ -499,14 +419,13 @@
 	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
 	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
 	LegendPanel legend; //Legend to display colorset information
+
 	protected Control createContents(Composite parent)
 	{		
 		Shell shell = parent.getShell();
 		shell.setSize(800, 600);
 		shell.setLocation(100, 100);
 		
-//		shell.setText(Globals.APPLICATION_VERSION_NAME);
-		
 		GuiMain.loadImages(shell.getDisplay());
 		
 		shell.setImage(Engine.getImageRegistry().get("shell.icon"));
@@ -549,7 +468,7 @@
 		return parent;
 		
 	};
-	
+
 	public TabbedSidePanel getSidePanel() { return rightPanel; }
 	
 	public LegendPanel getLegend() { return legend; }
@@ -591,12 +510,46 @@
 	public void expressionDataEvent(ExpressionDataEvent e) {
 		switch(e.type) {
 		case ExpressionDataEvent.CONNECTION_CLOSED:
-			showLegend(false);
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					showLegend(false);
+				}
+			});
 			break;
 		case ExpressionDataEvent.CONNECTION_OPENED:
-			cacheExpressionData();
-			showLegend(true);
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					cacheExpressionData();
+					showLegend(true);
+				}
+			});
 			break;
 		}
 	}
+
+    //	KH 20070514 begin
+	protected void createAlignActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(alignCenterXAction);
+		toolBarManager.add(alignCenterYAction);
+		toolBarManager.add(alignLeftAction);
+		toolBarManager.add(alignRightAction);
+		toolBarManager.add(alignTopAction);
+		toolBarManager.add(alignBottomAction);
+		toolBarManager.add(setCommonWidthAction);
+		toolBarManager.add(setCommonHeightAction);
+	
+		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
+	}
+	
+//	KH end
+	/**
+	   Invoked when user tries to close window
+	*/
+	protected boolean canHandleShellCloseEvent()
+	{
+		return Engine.canDiscardPathway();
+	}
+	
 } // end of class
Index: trunk/src/v2/org/pathvisio/Globals.java
===================================================================
--- trunk/src/v2/org/pathvisio/Globals.java	(revision 933)
+++ trunk/src/v2/org/pathvisio/Globals.java	(revision 934)
@@ -26,4 +26,5 @@
 	public static final String APPLICATION_NAME = "PathVisio";
 	public static final String APPLICATION_VERSION_NAME = "PathVisio 2.0 (experimental)";
 	public static final String HELP_URL = "http://wiki.bigcat.unimaas.nl/pathvisio/Help_v2";
+	public static final boolean fUseExperimentalFeatures = true;
 }
Index: trunk/src/v2/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 933)
+++ trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 934)
@@ -70,8 +70,6 @@
 import org.pathvisio.visualization.VisualizationDialog;
 import org.pathvisio.visualization.VisualizationManager;
 
-import edu.stanford.ejalbert.BrowserLauncher;
-
 /**
  * This class is the main class in the GPML project. 
  * It acts as a container for pathwaydrawings and facilitates
@@ -90,17 +88,23 @@
 	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
 	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
 	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
-	private CommonActions.CloseAction closeAction = new CommonActions.CloseAction(this);	
 	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
 	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
 	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
 	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
 	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
 	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
-	
-	private SwitchEditModeAction switchEditModeAction = new SwitchEditModeAction(this);
+	private CommonActions.SwitchEditModeAction switchEditModeAction = new CommonActions.SwitchEditModeAction(this);
 	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
 	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
+	private AlignActions.AlignCenterXAction alignCenterXAction = new AlignActions.AlignCenterXAction(this);
+	private AlignActions.AlignCenterYAction alignCenterYAction = new AlignActions.AlignCenterYAction(this);
+	private AlignActions.AlignLeftAction alignLeftAction = new AlignActions.AlignLeftAction(this);
+	private AlignActions.AlignRightAction alignRightAction = new AlignActions.AlignRightAction(this);
+	private AlignActions.AlignTopAction alignTopAction = new AlignActions.AlignTopAction(this);
+	private AlignActions.AlignBottomAction alignBottomAction = new AlignActions.AlignBottomAction(this);
+	private AlignActions.SetCommonWidthAction setCommonWidthAction = new AlignActions.SetCommonWidthAction(this);
+	private AlignActions.SetCommonHeightAction setCommonHeightAction = new AlignActions.SetCommonHeightAction(this);
 
 	/**
 	 * {@link Action} to select a Gene Database
@@ -134,72 +138,7 @@
 			}
 		}
 	}
-	
-	/**
-	 * {@link Action} to switch between edit and view mode
-	 */
-	private class SwitchEditModeAction extends Action implements ApplicationEventListener
-	{
-		final String ttChecked = "Exit edit mode";
-		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
-		MainWindow window;
-		public SwitchEditModeAction (MainWindow w)
-		{
-			super("&Edit mode", IAction.AS_CHECK_BOX);
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
-			setToolTipText(ttUnChecked);
-			window = w;
-			
-			Engine.addApplicationEventListener(this);
-		}
-		
-		public void run () {
-			if(Engine.isDrawingOpen())
-			{
-				VPathway drawing = Engine.getVPathway();
-				if(isChecked())
-				{
-					//Switch to edit mode: show edit toolbar, show property table in sidebar
-					drawing.setEditMode(true);
-					showEditActionsCI(true);
-					rightPanel.getTabFolder().setSelection(1);
-				}
-				else
-				{
-					//Switch to view mode: hide edit toolbar, show backpage browser in sidebar
-					drawing.setEditMode(false);
-					showEditActionsCI(false);
-					rightPanel.getTabFolder().setSelection(0);
-				}
-			}
-			else //No gpml pathway loaded, deselect action and do nothing
-			{
-				setChecked(false);
-			}
-			getCoolBarManager().update(true);
-		}
-		
-		public void setChecked(boolean check) {
-			super.setChecked(check);
-			setToolTipText(check ? ttChecked : ttUnChecked);
-		}
-		
-		public void switchEditMode(boolean edit) {
-			setChecked(edit);
-			run();
-			
-		}
 
-		public void applicationEvent(ApplicationEvent e) {
-			if(e.type == ApplicationEvent.OPEN_PATHWAY) {
-				Engine.getVPathway().setEditMode(isChecked());
-			}
-			else if(e.type == ApplicationEvent.NEW_PATHWAY) {
-				switchEditMode(true);
-			}
-		}
-	}
-
 	/**
 	 * {@link Action} to show or hide the right sidepanel
 	 */
@@ -276,9 +215,26 @@
 			}
 		}
 	}
-	
 
 	/**
+	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
+	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
+	 */
+	public void deselectNewItemActions()
+	{
+		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
+
+
+	/**
 	 * {@link Action} that opens an {@link GexImportWizard} that guides the user
 	 * through the steps required to create a new
 	 * expression dataset
@@ -525,16 +481,31 @@
 		}
 	}
 	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);		
+
+	public void deselectAlignItemActions()
+	{
+		IContributionItem[] items = alignActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
 	
 	// Elements of the coolbar
 	ToolBarContributionItem commonActionsCI;
 	ToolBarContributionItem editActionsCI;
+	ToolBarContributionItem alignActionsCI;
 	ToolBarContributionItem visualizationCI;
 	ToolBarContributionItem viewActionsCI;
 	protected CoolBarManager createCoolBarManager(int style)
 	{
 		createCommonActionsCI();
 		createEditActionsCI();
+		createAlignActionsCI();
 		createViewActionsCI();
 		createVisualizationCI();
 		
@@ -559,23 +530,6 @@
 		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
 	}
 
-		/**
-	 * Deselects all NewElementActions on the toolbar and sets 
-	 * VPathway.newGraphics to VPathway.NEWNONE
-	 */
-	public void deselectNewItemActions()
-	{
-		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-
 	/**
 	 * Creates element of the coolbar only shown in edit mode (new element actions)
 	 */
@@ -591,7 +545,7 @@
 		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
 		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
 		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
-		
+
 		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
 	}
 	
@@ -646,7 +600,7 @@
 	 * Shows or hides the editActionsCI
 	 * @param show	true/false for either show or hide
 	 */
-	private void showEditActionsCI(boolean show)
+	public void showEditActionsCI(boolean show)
 	{
 		if(show) {
 			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
@@ -657,12 +611,28 @@
 //		showVisualizationCI(!show); //Visualizations can show up in edit mode...
 		getCoolBarManager().update(true);
 	}
-	
+
 	/**
+	   Shows or hides the alignActionsCI.
+	   @param show	true/false for either show or hide
+	*/
+	public void showAlignActionsCI(boolean show)
+	{
+		if(show) {
+			getCoolBarManager().insertAfter(editActionsCI.getId(), alignActionsCI);
+		}
+		else {
+			getCoolBarManager().remove(alignActionsCI);
+		}
+//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
+		getCoolBarManager().update(true);
+	}
+
+	/**
 	 * Shows or hides the visualizationCI
 	 * @param show	true/false for either show or hide
 	 */
-	private void showVisualizationCI(boolean show) {
+	public void showVisualizationCI(boolean show) {
 		if(show) {
 			getCoolBarManager().insertAfter(viewActionsCI.getId(), visualizationCI);
 		} else {
@@ -686,7 +656,6 @@
 		fileMenu.add(openAction);
 		fileMenu.add(saveAction);
 		fileMenu.add(saveAsAction);
-		//fileMenu.add(closeAction);
 		fileMenu.add(new Separator());
 		fileMenu.add(importAction);
 		fileMenu.add(exportAction);
@@ -757,8 +726,8 @@
 		return menuManager;
 	}
 	/**
-	 *Constructor for the Engine class
-	 *Initializes new Engine and sets properties for frame
+	 *Constructor for the MainWindow class
+	 *Initializes new MainWindow and sets properties for frame
 	 */
 	public MainWindow(Shell shell)
 	{
@@ -785,6 +754,7 @@
 	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
 	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
 	LegendPanel legend; //Legend to display colorset information
+
 	protected Control createContents(Composite parent)
 	{		
 		Shell shell = parent.getShell();
@@ -834,21 +804,13 @@
 		
 	};
 
-	/**
-	   Invoked when user tries to close window
-	 */
-	protected boolean canHandleShellCloseEvent()
-	{
-		return Engine.canDiscardPathway();
-	}
-	
 	public TabbedSidePanel getSidePanel() { return rightPanel; }
 	
 	public LegendPanel getLegend() { return legend; }
 	
 	public void showLegend(boolean show) {	
 		if(show && Gex.isConnected()) {
-			if(rightPanel.isVisible("Legend")) return; //Legend already visible
+			if(rightPanel.isVisible("Legend")) return; //Legend already visible, only refresh
 			rightPanel.unhideTab("Legend", 0);
 			rightPanel.selectTab("Legend");
 		}
@@ -899,4 +861,30 @@
 			break;
 		}
 	}
+
+	//	KH 20070514 begin
+	protected void createAlignActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(alignCenterXAction);
+		toolBarManager.add(alignCenterYAction);
+		toolBarManager.add(alignLeftAction);
+		toolBarManager.add(alignRightAction);
+		toolBarManager.add(alignTopAction);
+		toolBarManager.add(alignBottomAction);
+		toolBarManager.add(setCommonWidthAction);
+		toolBarManager.add(setCommonHeightAction);
+	
+		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
+	}
+	
+//	KH end
+	/**
+	   Invoked when user tries to close window
+	*/
+	protected boolean canHandleShellCloseEvent()
+	{
+		return Engine.canDiscardPathway();
+	}
+	
 } // end of class
Index: trunk/src/core/org/pathvisio/model/Pathway.java
===================================================================
--- trunk/src/core/org/pathvisio/model/Pathway.java	(revision 933)
+++ trunk/src/core/org/pathvisio/model/Pathway.java	(revision 934)
@@ -59,8 +59,7 @@
 * one object of the type INFOBOX.
 */
 public class Pathway implements PathwayListener
-{
-
+{	
 	/**
 	   "changed" tracks if the Pathway has been changed since the file
 	   was opened or last saved. New pathways start changed.
Index: trunk/src/core/org/pathvisio/visualization/plugins/PluginManager.java
===================================================================
--- trunk/src/core/org/pathvisio/visualization/plugins/PluginManager.java	(revision 933)
+++ trunk/src/core/org/pathvisio/visualization/plugins/PluginManager.java	(revision 934)
@@ -45,7 +45,7 @@
 import org.pathvisio.data.Gex;
 
 public abstract class PluginManager {
-	static final String PLUGIN_PKG = "visualization.plugins";
+	static final String PLUGIN_PKG = "org.pathvisio.visualization.plugins";
 	static final String PKG_DIR = PLUGIN_PKG.replace('.', '/');
 	static final String FILE_ADD_PLUGINS = "visplugins.xml";
 	static final String XML_ELEMENT = "additional-plugins";
Index: trunk/src/core/org/pathvisio/gui/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/Engine.java	(revision 933)
+++ trunk/src/core/org/pathvisio/gui/Engine.java	(revision 934)
@@ -541,8 +541,10 @@
 		double usedZoom = vPathway.getPctZoom();
 		// Set zoom to 100%
 		vPathway.setPctZoom(100);			
-		// Overwrite the existing xml file
-		if (pathway.getSourceFile() != null)
+		
+        // Overwrite the existing xml file.
+		// If the target file is read-only, let the user select a new pathway
+		if (pathway.getSourceFile() != null && pathway.getSourceFile().canWrite())
 		{
 			try
 			{
Index: trunk/src/core/org/pathvisio/gui/CommonActions.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 933)
+++ trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 934)
@@ -23,19 +23,24 @@
 import java.util.Collections;
 import java.util.HashMap;
 
+import edu.stanford.ejalbert.BrowserLauncher;
+
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.preference.PreferenceManager;
 import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.widgets.FileDialog;
 import org.pathvisio.Globals;
 import org.pathvisio.biopax.gui.BiopaxDialog;
+import org.pathvisio.gui.Engine.ApplicationEvent;
+import org.pathvisio.gui.Engine.ApplicationEventListener;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
 import org.pathvisio.model.PathwayExporter;
@@ -43,7 +48,6 @@
 import org.pathvisio.preferences.Preferences;
 import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
 import org.pathvisio.view.VPathway;
-import edu.stanford.ejalbert.BrowserLauncher;
 
 /**
    This class contains a large number of JFace Actions that are both in V1 and V2.
@@ -372,24 +376,6 @@
 	}
 
 	/**
-	 * {@link Action} to close the gpml pathway (does nothing yet)
-	 */
-	static class CloseAction extends Action 
-	{
-		MainWindow window;
-		public CloseAction (MainWindow w)
-		{
-			window = w;
-			setText ("&Close pathway@Ctrl+W");
-			setToolTipText ("Close this pathway");
-		}
-		public void run ()
-		{
-			//TODO: unload drawing, ask to save
-		}
-	}
-
-	/**
 	 * {@link Action} to exit the application
 	 */
 	static class ExitAction extends Action 
@@ -586,4 +572,82 @@
 		}
 	}
 
+	/**
+	 * {@link Action} to switch between edit and view mode
+	 */
+	static class SwitchEditModeAction extends Action implements ApplicationEventListener
+	{
+		final String ttChecked = "Exit edit mode";
+		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
+		MainWindow window;
+		public SwitchEditModeAction (MainWindow w)
+		{
+			super("&Edit mode", IAction.AS_CHECK_BOX);
+			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
+			setToolTipText(ttUnChecked);
+			window = w;
+			
+			Engine.addApplicationEventListener(this);
+		}
+		
+		public void run ()
+		{
+			if(Engine.isDrawingOpen())
+			{
+				VPathway drawing = Engine.getVPathway();
+				Pathway pathway = Engine.getPathway();
+				if(isChecked())
+				{
+					// give a warning that this can't be edited.
+					if (pathway.getSourceFile() != null && !pathway.getSourceFile().canWrite())
+					{
+						MessageDialog.openWarning(
+							window.getShell(), "Read-only Warning",
+							"You're trying to edit a Read-only file.\n" +
+							"When you want to save your changes, you have to save to a different file.");
+					}
+					//Switch to edit mode: show edit toolbar, show property table in sidebar
+					drawing.setEditMode(true);
+					window.showEditActionsCI(true);
+					window.showAlignActionsCI(true);
+					window.rightPanel.getTabFolder().setSelection(1);
+				}
+				else
+				{
+					//Switch to view mode: hide edit toolbar, show backpage browser in sidebar
+					drawing.setEditMode(false);
+					window.showEditActionsCI(false);
+					window.showAlignActionsCI(false);
+					window.rightPanel.getTabFolder().setSelection(0);
+				}
+			}
+			else //No gpml pathway loaded, deselect action and do nothing
+			{
+				setChecked(false);
+			}
+			window.getCoolBarManager().update(true);
+		}
+		
+		public void setChecked(boolean check) {
+			super.setChecked(check);
+			setToolTipText(check ? ttChecked : ttUnChecked);
+		}
+		
+		public void switchEditMode(boolean edit) {
+			setChecked(edit);
+			run();
+			
+		}
+
+		public void applicationEvent(ApplicationEvent e) {
+			if(e.type == ApplicationEvent.OPEN_PATHWAY) {
+				Engine.getVPathway().setEditMode(isChecked());
+			}
+			else if(e.type == ApplicationEvent.NEW_PATHWAY) {
+				switchEditMode(true);
+			}
+		}
+	}
+
 }
+
