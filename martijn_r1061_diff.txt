Index: trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1060)
+++ trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1061)
@@ -46,7 +46,7 @@
 	private static URL IMG_COPY= Engine.getCurrent().getResourceURL("icons/copy.gif");
 	private static URL IMG_PASTE = Engine.getCurrent().getResourceURL("icons/paste.gif");
 	
-	public static class ZoomAction extends AbstractAction {
+	static class ZoomAction extends AbstractAction {
 		Component parent;
 		double zoomFactor;
 		
Index: trunk/src/swing/com/mammothsoftware/frwk/ddb/RolloverButton.java
===================================================================
--- trunk/src/swing/com/mammothsoftware/frwk/ddb/RolloverButton.java	(revision 1060)
+++ trunk/src/swing/com/mammothsoftware/frwk/ddb/RolloverButton.java	(revision 1061)
@@ -1,19 +1,3 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
 // Copyright (C) 2005 Mammoth Software LLC
 //
 // This library is free software; you can redistribute it and/or
Index: trunk/src/swing/com/mammothsoftware/frwk/ddb/DropDownButton.java
===================================================================
--- trunk/src/swing/com/mammothsoftware/frwk/ddb/DropDownButton.java	(revision 1060)
+++ trunk/src/swing/com/mammothsoftware/frwk/ddb/DropDownButton.java	(revision 1061)
@@ -1,19 +1,3 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
 // Copyright (C) 2005 Mammoth Software LLC
 //
 // This library is free software; you can redistribute it and/or
Index: trunk/src/core/org/pathvisio/view/VPathwayWrapper.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathwayWrapper.java	(revision 1060)
+++ trunk/src/core/org/pathvisio/view/VPathwayWrapper.java	(revision 1061)
@@ -22,7 +22,8 @@
 import javax.swing.Action;
 import javax.swing.KeyStroke;
 
-public abstract interface VPathwayWrapper {		
+public abstract interface VPathwayWrapper
+{		
 	public void redraw();
 	public void redraw(Rectangle r);
 	public void setVSize(Dimension size);
Index: trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1060)
+++ trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1061)
@@ -82,7 +82,8 @@
 		repaint();
 	}
 
-	protected void paintComponent(Graphics g) {
+	protected void paintComponent(Graphics g)
+	{
 		child.draw((Graphics2D) g);
 	}
 
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1060)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1061)
@@ -16,10 +16,13 @@
 //
 package org.pathvisio.gpmldiff;
 
+
+
+import java.io.IOException;
 import java.awt.BorderLayout;
+import java.awt.GridLayout;
 import java.awt.Container;
 import java.awt.event.ActionEvent;
-
 import javax.swing.AbstractAction;
 import javax.swing.Action;
 import javax.swing.JFileChooser;
@@ -28,7 +31,6 @@
 import javax.swing.JMenuBar;
 import javax.swing.JOptionPane;
 import javax.swing.JScrollPane;
-
 import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swing.CommonActions;
 import org.pathvisio.model.ConverterException;
@@ -47,9 +49,12 @@
 	private static final int PWY_OLD = 0;
 	private static final int PWY_NEW = 1;
 
-	private VPathwaySwing[] wrapper = new VPathwaySwing[2];
-	private VPathway[] view = new VPathway[2];
+	private VPathwaySwing[] wrapper = { null, null };
+	private VPathway[] view = { null, null };
+	private PwyDoc[] doc = { null, null };
 
+	double zoomFactor = 100;
+	
 	private class LoadPwyAction extends AbstractAction
 	{
 		private int pwyType;
@@ -75,15 +80,35 @@
 			if (status == JFileChooser.APPROVE_OPTION)
 			{
 				Pathway pwy = new Pathway();
-				try
-				{
-					pwy.readFromXml(jfc.getSelectedFile(), true);
+				//try
+				//{
+					doc[pwyType] = PwyDoc.read (jfc.getSelectedFile());
+					assert (doc[pwyType] != null);
 					
 					wrapper[pwyType] = new VPathwaySwing(pwyPane[pwyType]);
 
 					view[pwyType] = wrapper[pwyType].createVPathway();
-					view[pwyType].fromGmmlData(pwy);
-				}
+					view[pwyType].fromGmmlData(doc[pwyType].getPathway());
+					view[pwyType].setPctZoom (zoomFactor);
+					
+					if (view[PWY_OLD] != null && view[PWY_NEW] != null)
+					{
+						SearchNode result = doc[PWY_OLD].findCorrespondence (doc[PWY_NEW], new BetterSim(), new BasicCost());
+						PanelOutputter outputter = new PanelOutputter(view[PWY_OLD], view[PWY_NEW]);
+						doc[PWY_OLD].writeResult (result, doc[PWY_NEW], outputter);
+						try
+						{
+							outputter.flush();
+						}
+						catch (IOException ex) { ex.printStackTrace(); }
+
+						// merge models of the two pathways
+						pwyPane[0].getHorizontalScrollBar().setModel(
+							pwyPane[1].getHorizontalScrollBar().getModel());
+						pwyPane[0].getVerticalScrollBar().setModel(
+							pwyPane[1].getVerticalScrollBar().getModel());
+					}
+					/*}
 				
 				catch (ConverterException ce)
 				{
@@ -93,7 +118,7 @@
 						"Please check that the file you opened is a valid Gpml file.",
 						"Open Error", JOptionPane.ERROR_MESSAGE);
 					Logger.log.error ("Error opening gpml", ce);
-				}
+					}*/
 			}
 		}
 	}
@@ -125,7 +150,43 @@
 		{
 		}
 	}
-	
+
+	private class ZoomAction extends AbstractAction
+	{
+		double actionZoomFactor;
+		
+		public ZoomAction(double zf)
+		{
+			actionZoomFactor = zf;
+			String descr = "Set zoom to " + (int)zf + "%";
+			putValue(Action.NAME, toString());
+			putValue(Action.SHORT_DESCRIPTION, descr);
+			putValue(Action.LONG_DESCRIPTION, descr);
+		}
+		
+		public void actionPerformed(ActionEvent e)
+		{
+			zoomFactor = actionZoomFactor;
+			if(view[0] != null)
+			{			   
+				view[0].setPctZoom(zoomFactor);
+			}
+			if(view[1] != null)
+			{
+				view[1].setPctZoom(zoomFactor);
+			}
+		}
+		
+		public String toString()
+		{
+			if(actionZoomFactor == VPathway.ZOOM_TO_FIT)
+			{
+				return "Fit to window";
+			}
+			return (int)actionZoomFactor + "%";
+		}
+	}
+
 	void addMenuActions()
 	{
 		JMenu filemenu = new JMenu ("File");
@@ -134,12 +195,12 @@
 		filemenu.add (new CloseAction(this));
 
 		JMenu viewmenu = new JMenu ("View");
-		viewmenu.add (new CommonActions.ZoomAction(VPathway.ZOOM_TO_FIT));
-		viewmenu.add (new CommonActions.ZoomAction(30));
-		viewmenu.add (new CommonActions.ZoomAction(50));
-		viewmenu.add (new CommonActions.ZoomAction(75));
-		viewmenu.add (new CommonActions.ZoomAction(100));
-		viewmenu.add (new CommonActions.ZoomAction(120));
+		viewmenu.add (new ZoomAction(VPathway.ZOOM_TO_FIT));
+		viewmenu.add (new ZoomAction(30));
+		viewmenu.add (new ZoomAction(50));
+		viewmenu.add (new ZoomAction(75));
+		viewmenu.add (new ZoomAction(100));
+		viewmenu.add (new ZoomAction(120));
 		viewmenu.addSeparator();
 		viewmenu.add (new CenterAction());
 		
@@ -153,7 +214,7 @@
 
 		setSize (WINDOW_WIDTH, WINDOW_HEIGHT);
 		Container contents = getContentPane();
-		contents.setLayout (new BorderLayout());
+		contents.setLayout (new GridLayout(1,2));
 		setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
 		
 		menubar = new JMenuBar();
@@ -165,8 +226,9 @@
 			pwyPane[i] = new JScrollPane();
 		}
 
-		contents.add (pwyPane[PWY_OLD], BorderLayout.WEST);
-		contents.add (pwyPane[PWY_NEW], BorderLayout.EAST);
+		contents.add (pwyPane[PWY_OLD]);
+		contents.add (pwyPane[PWY_NEW]);
+		validate();
 	}
 
 }
\ No newline at end of file
