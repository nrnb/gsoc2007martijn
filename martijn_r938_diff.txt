Index: branches/g2d-branch/build.xml
===================================================================
--- branches/g2d-branch/build.xml	(revision 937)
+++ branches/g2d-branch/build.xml	(revision 938)
@@ -72,9 +72,11 @@
 
 	<target name="compile-v2" depends="prepare,resources-jar" description="Compile all sources">
 		<javac srcdir="src" 
-                    includes="v2/**,core/**"
-                    destdir="${build.v2.dir}">
-                    <classpath refid="project.v2.class.path"/>
+               includes="v2/**,core/**"
+			   excludes="core/org/pathvisio/view/VPathwayOld.java"
+			   
+               destdir="${build.v2.dir}">
+          <classpath refid="project.v2.class.path"/>
 		</javac>
 		<javac srcdir="src" 
                     includes="plugins/**"
Index: branches/g2d-branch/tools/gpmldiff/gpmldiff.sh
===================================================================
--- branches/g2d-branch/tools/gpmldiff/gpmldiff.sh	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/gpmldiff.sh	(revision 938)
@@ -0,0 +1,6 @@
+#!/bin/sh
+MYCLASSPATH=\
+build:\
+../../lib/jdom.jar
+
+java -cp $MYCLASSPATH org.pathvisio.gpmldiff.GpmlDiff $1 $2
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/gpmldiff.sh
___________________________________________________________________
Name: svn:eol-style
   + native
Name: svn:executable
   + *

Index: branches/g2d-branch/tools/gpmldiff/TODO.txt
===================================================================
--- branches/g2d-branch/tools/gpmldiff/TODO.txt	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/TODO.txt	(revision 938)
@@ -0,0 +1,6 @@
+* consistent naming: this vs other, doc1 vs doc2 ---> old vs new
+* add timing code
+* Outputter for xml output
+* Make similarity function more flexible. Right now, if two elts have different tag names, they match 0 because the keys don't match
+* Test with lot's of Biopax content
+* Make Dgpmldiff output entire jdom tree instead of summary

Property changes on: branches/g2d-branch/tools/gpmldiff/TODO.txt
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/MANIFEST.MF
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/MANIFEST.MF	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/MANIFEST.MF	(revision 938)
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Main-Class: org.pathvisio.gpmldiff.GpmlDiff
+Class-Path: lib/jdom.jar
\ No newline at end of file
Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayImporter.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayImporter.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayImporter.java	(revision 938)
@@ -0,0 +1,25 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.io.File;
+
+public interface PathwayImporter {
+	public String getName();
+	public String[] getExtensions();	
+	public void doImport(File file, Pathway pathway) throws ConverterException;
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayImporter.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ShapeType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ShapeType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ShapeType.java	(revision 938)
@@ -0,0 +1,114 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public enum ShapeType 
+{
+	
+	RECTANGLE ("Rectangle", "Rectangle"),
+	OVAL ("Oval", "Oval"),
+	ARC ("Arc", "Arc"),
+	CELLA ("CellA", "CellA"),
+	RIBOSOME ("Ribosome", "Ribosome"),
+	ORGANA ("OrganA", "OrganA"),
+	ORGANB ("OrganB", "OrganB"),
+	ORGANC ("OrganC", "OrganC"),
+	PROTEINB ("ProteinB", "ProteinComplex"),
+	TRIANGLE ("Poly", "Triangle"), // poly in MAPP
+	VESICLE ("Vesicle", "Vesicle"),
+	PENTAGON ("Poly", "Pentagon"), // poly in MAPP
+	HEXAGON ("Poly", "Hexagon"), // poly in MAPP
+	BRACE ("Brace", "Brace");
+	
+	private static final Map<String, ShapeType> mappMappings = initMappMappings();
+	private static final Map<String, ShapeType> gpmlMappings = initGpmlMappings();	
+	private String gpmlName;
+	private String mappName;
+	
+	ShapeType(String _mappName, String _gpmlName)
+	{
+		mappName = _mappName;
+		gpmlName = _gpmlName;
+	}
+	
+	static Map<String, ShapeType> initMappMappings()
+	{
+		Map<String, ShapeType> result = new HashMap<String, ShapeType>();
+		
+		for (ShapeType s : ShapeType.values())
+		{
+			result.put(s.mappName, s);
+		}
+		return result;
+	}
+
+	static Map<String, ShapeType> initGpmlMappings()
+	{
+		Map<String, ShapeType> result = new HashMap<String, ShapeType>();
+		
+		for (ShapeType s : ShapeType.values())
+		{
+			result.put(s.gpmlName, s);
+		}
+		return result;
+	}
+
+
+	/*
+	 * Warning when using fromMappName: in case value == Poly, 
+	 * this will return Triangle. The caller needs to check for 
+	 * this special
+	 * case.
+	 */
+	public static ShapeType fromMappName (String value)
+	{
+		return mappMappings.get(value);
+	}
+	
+	public static String toMappName (ShapeType value)
+	{
+		return value.mappName;
+	}
+
+	public static ShapeType fromGpmlName (String value)
+	{
+		return gpmlMappings.get(value);
+	}
+	
+	public static String toGpmlName (ShapeType value)
+	{
+		return value.gpmlName;
+	}
+	
+	static public String[] getNames()
+	{
+		List<String> result = new ArrayList<String>();		
+		for (ShapeType s : ShapeType.values())
+		{
+			result.add("" + s.gpmlName);
+		}
+		String [] resultArray = new String [result.size()];
+		return result.toArray(resultArray);
+	}
+
+}
+

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ShapeType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/MappFormat.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/MappFormat.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/MappFormat.java	(revision 938)
@@ -0,0 +1,1012 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+// $Id: MappToGmml.java,v 1.5 2005/10/21 12:33:27 gontran Exp $
+package org.pathvisio.model;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.sql.Types;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * The class MappFormat is responsible for all interaction with 
+ * .mapp files (GenMapp pathway format). Here is also codified all the
+ * assumptions about the .mapp format.
+ * 
+ * @author Martijn, Thomas
+ *
+ */
+public class MappFormat implements PathwayImporter, PathwayExporter
+{		
+	private static final String sqlInfoInsert = 
+		"INSERT INTO INFO (Title, MAPP, GeneDB, Version, Author, " +
+		"Maint, Email, Copyright, Modify, Remarks, BoardWidth, BoardHeight, " +
+		"WindowWidth, WindowHeight, Notes) " +
+		"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+	// note: column GeneDBVersion is not in all mapps. 
+	// Notably the mapps converted from kegg are different from the rest. 
+	private static final String sqlObjectsInsert = 
+		"INSERT INTO OBJECTS (ObjKey, ID, SystemCode, Type, CenterX, " + 
+		"CenterY, SecondX, SecondY, Width, Height, Rotation, " +
+		"Color, Label, Head, Remarks, Image, Links, Notes) " +
+		"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+
+	private static final String sqlInfoSelect = 
+		"SELECT Title, MAPP, GeneDB, Version, Author, " +
+		"Maint, Email, Copyright, Modify, Remarks, BoardWidth, BoardHeight, " +
+		"WindowWidth, WindowHeight, Notes " +
+		"FROM INFO";
+	private static final String sqlObjectsSelect = 
+		"SELECT ObjKey, ID, SystemCode, Type, CenterX, " + 
+		"CenterY, SecondX, SecondY, Width, Height, Rotation, " +
+		"Color, Label, Head, Remarks, Image, Links, Notes " +
+		"FROM OBJECTS";
+
+	public static final String[] organism_latin_name = {
+		"",
+		"Mus musculus",
+		"Homo sapiens",
+		"Rattus norvegicus",
+		"Bos taurus",
+		"Caenorhabditis elegans",
+		"Gallus gallus",
+		"Danio rero",
+		"Drosophila melanogaster",
+		"Canis familiaris",
+		"Xenopus tropicalis",
+		"Arabidopsis thaliana"
+
+	};
+
+	static final String[] organism_short_code = {
+		"___",
+		"Mm_", 
+		"Hs_", 
+		"Rn_", 
+		"Bt_", 
+		"Ce_", 
+		"Gg_", 
+		"Dr_", 
+		"Dm_", 
+		"Cf_", 
+		"Xt_", 
+		"At_", 				
+	};
+
+    private static String database_after = ";DriverID=22;READONLY=true";
+    private static String database_before =
+            "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=";
+    
+    //  These constants below define columns in the info table.
+    //  they are linked to the order of columns in the sqlInfoSelect 
+    //  statement above
+	static final int icolTitle = 0;
+	static final int icolMAPP = 1;
+	static final int icolGeneDB = 2;
+	static final int icolVersion = 3;
+	static final int icolAuthor = 4;
+	static final int icolMaint = 5;
+	static final int icolEmail = 6;
+	static final int icolCopyright = 7;
+	static final int icolModify = 8;
+	static final int icolRemarks = 9;
+	static final int icolBoardWidth = 10;
+	static final int icolBoardHeight = 11;
+	static final int icolWindowWidth = 12;
+	static final int icolWindowHeight = 13;
+	static final int icolNotes = 14;
+
+	// these constants define the columns in the Objects table.
+	// they are linked to the order of columns in the sqlObjectsSelect 
+	// statement above.
+	static final int colObjKey = 0;
+	static final int colID = 1;
+	static final int colSystemCode = 2;
+	static final int colType = 3;
+	static final int colCenterX = 4;
+	static final int colCenterY = 5;
+	static final int colSecondX = 6;
+	static final int colSecondY = 7;
+	static final int colWidth = 8;
+	static final int colHeight = 9;
+	static final int colRotation = 10;
+	static final int colColor = 11;
+	static final int colLabel = 12;
+	static final int colHead = 13;
+	static final int colRemarks = 14;
+	static final int colImage = 15;
+	static final int colLinks = 16;
+	static final int colNotes = 17;
+
+    /**
+     * MAPPTmpl.gtp is a template access database for newly generated
+     * mapp's. This file should be
+     * in the classpath, normally in resources.jar.
+     */
+	private static String mappTemplateFile = "MAPPTmpl.gtp";
+    
+    static void readFromMapp (String filename, Pathway data)
+    	throws ConverterException
+    {
+    	String database = database_before + filename + database_after;
+
+    	try
+    	{
+	    	// Load Sun's jdbc-odbc driver
+	        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
+    	} catch (ClassNotFoundException cnfe)
+    	{
+    		// decoupling: wrap classnotfoundexception into converterexception
+    		ConverterException ce = new ConverterException("Class not found exception in converter");
+    		ce.setStackTrace(cnfe.getStackTrace());
+    		throw ce;
+    	}
+        System.out.println ("Connection string: " + database);
+		
+		// Create the connection to the database
+        
+        try 
+        {
+	        Connection con = DriverManager.getConnection(database, "", "");
+	        
+	        Statement s = con.createStatement();
+	        
+	        System.out.println ("READING INFO TABLE");
+	        // first do the INFO table, only one row.
+		    {
+		        ResultSet r = s.executeQuery(sqlInfoSelect);
+		        r.next();
+		        int cCol = r.getMetaData().getColumnCount();
+		        String[] row = new String[cCol];
+		        for (int i = 0; i < cCol; ++i) row[i] = r.getString(i + 1);
+		        
+		        copyMappInfo(row, data, filename);
+	    	}    
+	
+		    System.out.println ("READING OBJECTS TABLE");
+	        // now do the OBJECTS table, multiple rows
+	        {
+		        ResultSet r = s.executeQuery(sqlObjectsSelect);
+		        int cCol = r.getMetaData().getColumnCount();
+		        String[] row = new String[cCol];
+		        while (r.next())
+		        {
+		        	for (int i = 0; i < cCol; ++i) row[i] = r.getString(i + 1);
+		        	copyMappObjects(row, data);
+		        }
+	        }
+        }
+        catch (SQLException sqle)
+        {
+        	// decoupling: wrap sqlexception into converterexception
+    		ConverterException ce = new ConverterException("SQLException while converting");
+    		ce.setStackTrace(sqle.getStackTrace());
+    		throw ce;
+        }
+    }
+    
+    private static void copyResource(String resource, java.io.File destination) throws IOException 
+    {
+		try {
+			ClassLoader cl = MappFormat.class.getClassLoader();
+			InputStream inStream = cl.getResourceAsStream(resource);
+
+			java.io.FileOutputStream outStream=new java.io.FileOutputStream(destination);
+
+			int len;
+			byte[] buf=new byte[2048];
+			 
+			while ((len=inStream.read(buf))!=-1) {
+				outStream.write(buf,0,len);
+			}
+		} catch (Exception e) {
+			throw new IOException("Can't copy resource "+mappTemplateFile+" -> "+destination+".\n" + e.getMessage());
+		}
+	}
+
+    public static void exportMapp (String filename, 
+    		String[] mappInfo, List<String[]> mappObjects)
+    {    	
+        String database = database_before + filename + ";DriverID=22";
+        
+        try {
+        	copyResource (mappTemplateFile, new File(filename));
+        	
+            // Load Sun's jdbc-odbc driver
+            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
+            
+            // Create the connection to the database
+            Connection con = DriverManager.getConnection(database, "", "");
+            
+            // Create a new sql statement
+
+    		PreparedStatement sInfo = con.prepareStatement(sqlInfoInsert);
+            PreparedStatement sObjects = con.prepareStatement(sqlObjectsInsert);
+            
+            
+            int k = 1;
+            for (String[] row : mappObjects)
+            {
+    			sObjects.setInt (1, k);
+    			for (int j = 1; j < row.length; ++j)
+    			{
+    				System.out.println ("[" + (j + 1) + "] " + row[j]);
+//    				System.err.println ("[" + (j + 1) + "] " + row[j]);
+    				if (j >= 14 && j < 17)
+    				{
+    					if (row[j] != null && row[j].equals("")) row[j] = null;
+    					sObjects.setObject(j + 1, row[j], Types.LONGVARCHAR);
+    					// bug workaround, see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4401822
+    				}
+    				else
+    				{
+    					// the line below is a bugfix for 
+    					// Hs_Contributed_20060824/cellular_process-GenMAPP/Hs_Signaling_of_Hepatocyte_Growth_Factor_Receptor_Biocarta.mapp. 
+    					// No idea why this is necessary
+    					if (row[j] == null) row[j] = "";
+    					sObjects.setString(j + 1, row[j]);
+    				}
+    			}
+    			
+    			sObjects.executeUpdate();    			
+    			k++;
+            }
+
+			for (int j = 0; j < mappInfo.length; ++j)
+			{
+				System.out.println("[" + (j + 1) + "] " + mappInfo[j]);
+				
+				sInfo.setString (j + 1, mappInfo[j]);
+			}    			
+			sInfo.executeUpdate();
+            con.close();
+            
+        } catch (ClassNotFoundException cl_ex) {
+        	System.out.println ("-> Could not find the Sun JbdcObdcDriver\n");
+        } catch (SQLException ex) {
+        	System.out.println ("-> SQLException: "+ex.getMessage());        
+            ex.printStackTrace();
+        } catch (IOException e)
+        {
+        	System.out.println (e.getMessage());
+        }
+    }
+    
+	public static String[] uncopyMappInfo (Pathway data)
+	{
+		String[] mappInfo = new String[15];
+		
+		PathwayElement mi = null;
+		for (PathwayElement o : data.getDataObjects())
+		{
+			if (o.getObjectType() == ObjectType.MAPPINFO)
+				mi = o;
+		}
+			
+		mappInfo[icolTitle] = mi.getMapInfoName();
+		mappInfo[icolVersion] = mi.getVersion();
+		mappInfo[icolAuthor] = mi.getAuthor();
+		mappInfo[icolMaint] = mi.getMaintainer();
+		mappInfo[icolEmail] = mi.getEmail();
+		mappInfo[icolCopyright] = mi.getCopyright();
+		mappInfo[icolModify] = mi.getLastModified();
+		
+		mappInfo[icolNotes] = mi.findComment("GenMAPP notes");
+		mappInfo[icolRemarks] = mi.findComment("GenMAPP remarks");		
+		
+		mappInfo[icolBoardWidth] = "" + mi.getMBoardWidth();
+		mappInfo[icolBoardHeight] = "" + mi.getMBoardHeight();
+		mappInfo[icolWindowWidth] = "" + mi.getWindowWidth();
+		mappInfo[icolWindowHeight] = "" + mi.getWindowHeight();
+		
+		return mappInfo;
+	}
+	
+	// This method copies the Info table of the genmapp mapp to a new gpml
+	// pathway
+	public static void copyMappInfo(String[] row, Pathway data, String filename)
+	{
+
+		/* Data is lost when converting from GenMAPP to GPML:
+		*
+		* GenMAPP: 
+		*		"Title", "MAPP", "Version", "Author",
+		* 		"Maint", "Email", "Copyright","Modify", 
+		*		"Remarks", "BoardWidth", "BoardHeight","WindowWidth",
+		*		"WindowHeight", "GeneDB", "Notes"
+		* GPML:    
+		*		"Name", NONE, Version, "Author",  
+		*		"MaintainedBy", "Email", "Availability", "LastModified",
+		*		"Comment", "BoardWidth", "BoardHeight", NONE, 
+		*		NONE, NONE, "Notes"
+		*
+		*/
+	
+		System.out.println ("CONVERTING INFO TABLE TO GPML");
+		
+		PathwayElement o = data.getMappInfo();
+		
+		o.setMapInfoName(row[icolTitle]);
+		o.setMapInfoDataSource("GenMAPP 2.0");
+		o.setVersion(row[icolVersion]);
+		o.setAuthor(row[icolAuthor]);
+		o.setMaintainer(row[icolMaint]);
+		o.setEmail(row[icolEmail]);
+		o.setCopyright(row[icolCopyright]);
+		o.setLastModified(row[icolModify]);
+	
+		o.addComment(row[icolNotes], "GenMAPP notes");
+		o.addComment(row[icolRemarks], "GenMAPP remarks");
+
+		o.setMBoardWidth(Double.parseDouble(row[icolBoardWidth]));
+		o.setMBoardHeight(Double.parseDouble(row[icolBoardHeight]));
+		o.setWindowWidth(Double.parseDouble(row[icolWindowWidth]));
+		o.setWindowHeight(Double.parseDouble(row[icolWindowHeight]));
+		
+		// guess organism based on first three characters of filename
+		String short_code = new File (filename).getName().substring(0, 3);
+		if (code2organism.containsKey(short_code))
+		{		
+			o.setOrganism(code2organism.get(short_code));
+		}
+	}
+       
+	private static String mapBetween (String[] from, String[] to, String value) throws ConverterException
+    {
+    	for(int i=0; i < from.length; i++) 
+		{
+		    if(from[i].equals(value)) 
+		    {
+		    	return to[i];
+		    }		    
+		    else if (i == from.length-1) 
+		    {
+		    	throw new ConverterException ("'" + value + "' is invalid\n");
+		    }
+		}
+    	return null;
+    }
+
+	public static List<String[]> uncopyMappObjects(Pathway data) throws ConverterException
+	{
+		List<String[]> result = new ArrayList<String[]>();
+		
+		for (PathwayElement o : data.getDataObjects())
+		{
+			int objectType = o.getObjectType();
+			String[] row = new String[18];
+			
+			// init:
+			row[colCenterX] = "0.0";
+			row[colCenterY] = "0.0";
+			row[colSecondX] = "0.0";
+			row[colSecondY] = "0.0";
+			row[colWidth] = "0.0";
+			row[colHeight] = "0.0";
+			row[colRotation] = "0.0";
+			row[colColor] = "-1";
+			
+			switch (objectType)
+			{
+				case ObjectType.LINE:
+					unmapNotesAndComments (o, row);
+					unmapLineType(o, row);
+					result.add(row);
+					break;
+				case ObjectType.DATANODE:	
+					unmapNotesAndComments (o, row);
+					unmapGeneProductType(o, row);
+					result.add(row);
+					break;
+				case ObjectType.INFOBOX:
+					unmapInfoBoxType(o, row);
+					result.add(row);
+					break;
+				case ObjectType.LABEL:
+					unmapNotesAndComments (o, row);
+					unmapLabelType(o, row);
+					result.add(row);
+					break;
+				case ObjectType.LEGEND:
+					unmapLegendType(o, row);
+					result.add(row);
+					break;
+				case ObjectType.SHAPE:
+					
+					unmapNotesAndComments (o, row);
+					switch (o.getShapeType())
+					{
+						case BRACE:
+							unmapBraceType(o, row);
+							break;
+						case OVAL:
+						case ARC:
+						case RECTANGLE:					
+							unmapShapeType(o, row);
+							break;
+						case CELLA:
+						case PROTEINB:
+						case ORGANA:
+						case ORGANB:
+						case ORGANC:
+							unmapFixedShapeType(o, row);
+							break;
+						case PENTAGON: //TODO: incorrect separation
+						case HEXAGON:
+						case RIBOSOME:
+						case TRIANGLE:
+						case VESICLE:							
+							unmapComplexShapeType(o, row);
+					}
+					result.add(row);
+					break;
+			}
+			
+		}
+				
+		return result;
+	}
+
+	private static void unmapNotesAndComments(PathwayElement o, String[] row)
+	{		
+		row[colNotes] = o.findComment("GenMAPP notes");
+		row[colRemarks] = o.findComment("GenMAPP remarks");		
+	}
+	
+	private static void mapNotesAndComments(PathwayElement o, String[] row)
+	{
+        if (row[colNotes] != null &&
+        		!row[colNotes].equals(""))
+        {        	
+    		o.addComment(row[colNotes], "GenMAPP notes");
+        }
+
+        if (row[colRemarks] != null &&
+        		!row[colRemarks].equals(""))
+        {            
+    		o.addComment(row[colRemarks], "GenMAPP remarks");
+        }
+	}
+
+	// This list adds the elements from the OBJECTS table to the new gpml
+	// pathway
+    public static void copyMappObjects(String[] row, Pathway data) throws ConverterException
+    {
+
+		// Create the GenMAPP --> GPML mappings list for use in the switch
+		// statement
+
+		List typeslist = Arrays.asList(new String[] { 
+				"Arrow", "DottedArrow", "DottedLine", "Line",
+				"Brace", "Gene", "InfoBox", "Label", "Legend", "Oval",
+				"Rectangle", "TBar", "Receptor", "LigandSq",  "ReceptorSq",
+				"LigandRd", "ReceptorRd", "CellA", "Arc", "Ribosome",
+				"OrganA", "OrganB", "OrganC", "ProteinB", "Poly", "Vesicle"
+		});
+		PathwayElement o = null;		
+		int index = typeslist.indexOf(row[colType]);		
+		switch(index) {
+		
+				case 0: /*Arrow*/
+				case 1: /*DottedArrow*/
+				case 2: /*DottedLine"*/			
+				case 3: /*Line*/
+				case 11: /*TBar*/
+				case 12: /*Receptor*/           
+				case 13: /*LigandSq*/           
+				case 14: /*ReceptorSq*/         
+				case 15: /*LigandRd*/
+				case 16: /*ReceptorRd*/
+						o = mapLineType(row);
+						mapNotesAndComments (o, row);
+						break;							
+				case 4: /*Brace*/
+						o = mapBraceType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;							
+				case 5: /*Gene*/
+						o = mapGeneProductType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;																					
+				case 6: /*InfoBox*/
+						o = mapInfoBoxType (row, data);
+						break;
+				case 7: /*Label*/
+						o = mapLabelType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;
+				case 8: /*Legend*/
+						o = mapLegendType(row);
+						break;							
+				case 9: /*Oval*/						
+				case 10: /*Rectangle*/
+				case 18: /*Arc*/
+						o = mapShapeType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;							
+				case 17: /*CellA*/
+				case 19: /*Ribosome*/							
+				case 20: /*OrganA*/							
+				case 21: /*OrganB*/							
+				case 22: /*OrganC*/
+						o = mapFixedShapeType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;							
+				case 23: /*ProteinB*/
+				case 24: /*Poly*/
+				case 25: /*Vesicle*/
+						o = mapComplexShapeType(row);
+						mapNotesAndComments (o, row);
+						o.setGraphId(data.getUniqueId());
+						break;
+				default: 
+						throw new ConverterException (
+							"-> Type '" 
+							+ row[colType]
+							+ "' is not recognised as a GenMAPP type "
+							+ "and is therefore not processed.\n");							
+		}
+		data.add(o);
+    }
+
+    
+    private static void unmapLineType (PathwayElement o, String[] mappObject)
+    {   	
+    	int lineStyle = o.getLineStyle();
+		LineType lineType = o.getLineType();
+		String style = lineType.getMappName();
+		if (lineStyle == LineStyle.DASHED && (lineType == LineType.ARROW || lineType == LineType.LINE))
+			style = "Dotted" + style;
+		
+		mappObject[colType] = style;		
+		mappObject[colCenterX] = "" + o.getMStartX();
+    	mappObject[colCenterY] = "" + o.getMStartY();
+    	mappObject[colSecondX] = "" + o.getMEndX();
+    	mappObject[colSecondY] = "" + o.getMEndY();
+    	unmapColor (o, mappObject);    	
+    }
+
+	private static void mapColor(PathwayElement o, String[] mappObject)
+	{
+        int i = Integer.parseInt(mappObject[colColor]);
+        o.setTransparent(i < 0);
+		o.setColor(ConvertType.fromMappColor(mappObject[colColor]));	
+	}
+
+	private static void unmapColor(PathwayElement o, String[] mappObject)
+	{
+		mappObject[colColor] = ConvertType.toMappColor(o.getColor(), o.isTransparent());	
+	}
+
+	private static Map<String,LineType> mappLineTypes = initMappLineTypes();
+	
+	static private Map<String,LineType> initMappLineTypes()
+	{
+		Map<String,LineType> result = new HashMap<String,LineType>();
+		result.put ("DottedLine", LineType.LINE);
+		result.put ("DottedArrow", LineType.ARROW);
+		for (LineType l : LineType.values())
+		{
+			result.put (l.getMappName(), l);
+		}
+		return result;
+	}
+	
+	private static PathwayElement mapLineType(String [] mappObject) throws ConverterException
+	{		
+    	PathwayElement o = new PathwayElement(ObjectType.LINE);
+    	
+		String type = mappObject[colType];
+    	if(type.startsWith("Dotted"))
+    	{
+			o.setLineStyle(LineStyle.DASHED);
+    	}
+    	else
+    	{
+    		o.setLineStyle(LineStyle.SOLID);
+    	}
+    	    	
+    	o.setLineType(mappLineTypes.get(type));		
+        o.setMStartX(Double.parseDouble(mappObject[colCenterX]));       
+        o.setMStartY(Double.parseDouble(mappObject[colCenterY]));
+        o.setMEndX(Double.parseDouble(mappObject[colSecondX]));
+        o.setMEndY(Double.parseDouble(mappObject[colSecondY]));
+        mapColor(o, mappObject);        
+        return o;
+	}
+    
+	private static void unmapCenter (PathwayElement o, String[] mappObject)
+	{
+		mappObject[colCenterX] = "" + o.getMCenterX();
+    	mappObject[colCenterY] = "" + o.getMCenterY();	
+	}
+	
+	private static void mapCenter (PathwayElement o, String[] mappObject)
+	{
+		o.setMCenterX(Double.parseDouble(mappObject[colCenterX]));
+		o.setMCenterY(Double.parseDouble(mappObject[colCenterY]));
+	}
+
+	private static void unmapRotation (PathwayElement o, String[] mappObject)
+	{
+		mappObject[colRotation] = "" + o.getRotation();
+	}
+	
+	private static void mapRotation (PathwayElement o, String[] mappObject)
+	{
+		o.setRotation(Double.parseDouble(mappObject[colRotation]));
+	}
+	
+	private static void unmapShape (PathwayElement o, String[] mappObject)
+	{
+    	unmapCenter(o, mappObject);    	
+    	mappObject[colWidth] = "" + o.getMWidth();
+    	mappObject[colHeight] = "" + o.getMHeight();	
+	}
+
+	private static void mapShape (PathwayElement o, String[] mappObject)
+	{
+    	mapCenter(o, mappObject);    	
+    	o.setMWidth(Double.parseDouble(mappObject[colWidth]));
+    	o.setMHeight(Double.parseDouble(mappObject[colHeight]));
+	}
+	
+	private static void unmapShape_half (PathwayElement o, String[] mappObject)
+	{
+    	unmapCenter(o, mappObject);    	
+    	mappObject[colWidth] = "" + o.getMWidth() / 2;
+    	mappObject[colHeight] = "" + o.getMHeight() / 2;	
+	}
+
+	private static void mapShape_half (PathwayElement o, String[] mappObject)
+	{
+    	mapCenter(o, mappObject);    	
+    	o.setMWidth(Double.parseDouble(mappObject[colWidth]) * 2);
+    	o.setMHeight(Double.parseDouble(mappObject[colHeight]) * 2);	
+	}
+
+	private static void unmapBraceType (PathwayElement o, String[] mappObject) throws ConverterException
+    {    	
+    	mappObject[colType] = "Brace";    	
+    	mappObject[colRotation] = "" + o.getOrientation();    	
+    	unmapShape (o, mappObject);
+    	unmapColor (o, mappObject);
+    }
+
+    private static PathwayElement mapBraceType(String[] mappObject) throws ConverterException
+    {
+    	PathwayElement o = new PathwayElement(ObjectType.SHAPE);
+    	o.setShapeType (ShapeType.BRACE);
+    	mapShape(o, mappObject);
+    	mapColor(o, mappObject);
+    	o.setOrientation((int)Double.parseDouble(mappObject[colRotation]));
+        return o;          
+    }
+    
+    private static void unmapGeneProductType (PathwayElement o, String[] mappObject) throws ConverterException
+    {    	
+    	mappObject[colType] = "Gene";
+    	mappObject[colSystemCode] =
+			mapBetween (DataSources.dataSources, DataSources.systemCodes, 
+					o.getDataSource());
+
+		mappObject[colHead] = o.getBackpageHead();
+		mappObject[colID] = o.getGeneID();
+		mappObject[colLabel] = o.getTextLabel();
+		mappObject[colLinks] = o.getXref();    	
+		unmapShape(o, mappObject);
+    }
+    
+    private static PathwayElement mapGeneProductType(String[] mappObject) throws ConverterException
+	{
+    	PathwayElement o = new PathwayElement(ObjectType.DATANODE);
+    	
+    	String syscode = mappObject[colSystemCode];
+    	if (syscode == null) syscode = "";
+    	syscode = syscode.trim();
+    	
+        o.setDataSource(mapBetween (
+				DataSources.systemCodes, DataSources.dataSources, syscode));  
+
+        o.setBackpageHead(mappObject[colHead]);
+        if (mappObject[colID] == null)
+        {
+        	o.setGeneID("");
+        }
+        else
+        {
+        	o.setGeneID(mappObject[colID]);
+        }
+        o.setTextLabel(mappObject[colLabel]);
+
+        // TODO:  for some IDs the type is known, e.g. SwissProt is always a
+		// protein, incorporate this knowledge to assign a type per ID
+        o.setDataNodeType("GeneProduct");
+        String xrefv = mappObject[colLinks];
+        if (xrefv == null) { xrefv = ""; }
+        o.setXref(xrefv);
+        
+        mapShape(o, mappObject);
+        return o;			
+	}
+    
+	private static PathwayElement mapInfoBoxType (String[] mappObject, Pathway data)
+	{
+    	PathwayElement o = data.getInfoBox();
+        
+    	mapCenter (o, mappObject);                
+        return o;
+	}
+	
+	private static void unmapInfoBoxType (PathwayElement o, String[] mappObject)
+    {    	
+    	mappObject[colType] = "InfoBox";
+    	
+    	unmapCenter (o, mappObject);
+    }
+
+	private static PathwayElement mapLegendType (String[] mappObject)
+	{
+    	PathwayElement o = new PathwayElement(ObjectType.LEGEND);
+ 
+    	mapCenter (o, mappObject);
+    	        
+        return o;
+	}
+	
+	private static void unmapLegendType (PathwayElement o, String[] mappObject)
+    {    	
+    	mappObject[colType] = "Legend";
+    	
+    	unmapCenter (o, mappObject);    	
+    }
+
+	private final static int styleBold = 1; 
+	private final static int styleItalic = 2;
+	private final static int styleUnderline = 4;
+	private final static int styleStrikethru = 8;
+    
+    private static PathwayElement mapLabelType(String[] mappObject) 
+    {
+    	PathwayElement o = new PathwayElement(ObjectType.LABEL);
+
+    	mapShape(o, mappObject);
+    	mapColor(o, mappObject);
+        
+    	o.setTextLabel(mappObject[colLabel]);
+        
+    	if (mappObject[colID] == null)
+    	{
+    		o.setFontName("");
+    	}
+    	else
+    	{
+    		o.setFontName(mappObject[colID]);
+    	}
+    	
+        
+        o.setMFontSize(15.0 * Double.parseDouble(mappObject[colSecondX]));
+        
+        String styleString = mappObject[colSystemCode]; 
+        int style = styleString == null ? 0 : (int)(styleString.charAt(0));
+            
+        o.setBold((style & styleBold) > 0);
+        o.setItalic((style & styleItalic) > 0);
+        o.setUnderline((style & styleUnderline) > 0);
+        o.setStrikethru((style & styleStrikethru) > 0);
+        
+        
+        String xrefv = mappObject[colLinks];
+        if (xrefv == null) { xrefv = ""; }
+        o.setXref(xrefv);
+        return o;
+    }
+
+    private static void unmapLabelType (PathwayElement o, String[] mappObject)
+    {    	
+    	mappObject[colType] = "Label";
+    	mappObject[colLabel] = o.getTextLabel();
+    	
+    	unmapShape(o, mappObject);
+    	unmapColor(o, mappObject);
+    	
+    	mappObject[colID] = o.getFontName();
+    	mappObject[colSecondX] = "" + (o.getMFontSize() / 15.0);
+    	
+    	int style = 16; 
+    	// note: from VB source I learned that 16 is added to prevent field from becoming 0, 
+    	// as this can't be stored in a text field in the database
+    	if (o.isBold()) style |= styleBold;   	
+    	if (o.isItalic()) style |= styleItalic;    	
+    	if (o.isUnderline()) style |= styleUnderline;    	
+    	if (o.isStrikethru()) style |= styleStrikethru;
+    	
+    	char stylechars[] = new char[1];
+    	stylechars[0] = (char)style;
+    	
+    	mappObject[colSystemCode] = new String (stylechars);    	
+		mappObject[colLinks] = o.getXref();    	
+    }
+    
+	private static PathwayElement mapShapeType(String[] mappObject)
+    {
+    	PathwayElement o = new PathwayElement(ObjectType.SHAPE);
+    	ShapeType shapeType = ShapeType.fromMappName(mappObject[colType]);
+    	o.setShapeType(shapeType);        
+    	if (shapeType == ShapeType.ARC || shapeType == ShapeType.OVAL)
+    		mapShape_half (o, mappObject);
+    	else
+    		mapShape (o, mappObject);
+		
+        int i = Integer.parseInt(mappObject[colColor]);
+        o.setTransparent(i < 0);
+        if (shapeType == ShapeType.ARC)
+        {
+        	o.setColor(ConvertType.fromMappColor(mappObject[colColor]));
+        }
+        else
+        {
+        	o.setFillColor(ConvertType.fromMappColor(mappObject[colColor]));
+        }        
+		
+        mapRotation (o, mappObject);        
+        return o;
+    }
+    
+    private static void unmapShapeType (PathwayElement o, String[] mappObject)
+    {    	
+    	ShapeType shapeType = o.getShapeType();
+    	mappObject[colType] = ShapeType.toMappName(shapeType);
+    	if (shapeType == ShapeType.ARC || shapeType == ShapeType.OVAL)
+    		unmapShape_half (o, mappObject);
+    	else
+    		unmapShape (o, mappObject);
+		
+		// note: when converting gpml to mapp,
+		// line color is discarded for oval and rect
+    	if (shapeType == ShapeType.ARC)
+    	{
+    		mappObject[colColor] = ConvertType.toMappColor(o.getColor(), o.isTransparent());	
+    	}
+    	else
+    	{
+    		mappObject[colColor] = ConvertType.toMappColor(o.getFillColor(), o.isTransparent());
+    	}
+		unmapRotation (o, mappObject);    	
+    }
+    
+    private static PathwayElement mapFixedShapeType(String[] mappObject)
+    {
+    	PathwayElement o = new PathwayElement(ObjectType.SHAPE);
+        o.setShapeType(ShapeType.fromMappName(mappObject[colType]));
+        mapShape (o, mappObject);
+        return o;        
+    }
+
+    private static void unmapFixedShapeType (PathwayElement o, String[] mappObject)
+    {    	
+    	ShapeType shapeType = o.getShapeType();
+    	mappObject[colType] = ShapeType.toMappName(shapeType);
+    	
+    	if (shapeType == ShapeType.CELLA)
+    	{
+    		mappObject[colRotation] = "-1.308997";
+    		mappObject[colColor] = "0";
+    		mappObject[colWidth] = "1500";
+    		mappObject[colHeight] = "375";
+    	}    	
+    	unmapShape (o, mappObject);
+    }
+        
+    private static PathwayElement mapComplexShapeType(String[] mappObject) throws ConverterException 
+	{       		
+    	PathwayElement o = new PathwayElement(ObjectType.SHAPE);
+    	
+    	if (mappObject[colType].equals("Poly"))
+        {
+        	switch ((int)Double.parseDouble(mappObject[colSecondY]))
+        	{
+        	case 3: o.setShapeType(ShapeType.TRIANGLE); break;
+        	case 5: o.setShapeType(ShapeType.PENTAGON); break;
+        	case 6: o.setShapeType(ShapeType.HEXAGON); break;
+        	default: throw
+        		new ConverterException ("Found polygon with unexpectec edge count: " + 
+        				mappObject[colSecondY]); 
+        	}
+        }
+    	else
+    	{
+    		o.setShapeType(ShapeType.fromMappName(mappObject[colType]));            
+    	}
+        
+    	mapShape (o, mappObject);
+        mapRotation (o, mappObject);
+        return o;
+    }
+    
+    private static void unmapComplexShapeType (PathwayElement o, String[] mappObject)
+    {   
+    	ShapeType shapeType = o.getShapeType();
+    	mappObject[colType] = ShapeType.toMappName(shapeType);
+ 		
+    	if (shapeType == ShapeType.TRIANGLE)
+    	{
+    		mappObject[colSecondY] = "3";
+    	} else if (shapeType == ShapeType.PENTAGON)
+    	{
+    		mappObject[colSecondY] = "5";    		
+		} else if (shapeType == ShapeType.HEXAGON)
+		{
+			mappObject[colSecondY] = "6";  			
+		}
+    	
+    	unmapShape (o, mappObject);
+        unmapRotation (o, mappObject);
+    }
+    
+	/**
+	 * {@link HashMap} containing mappings from system name (as used in Gpml) to system code
+	 */
+	private static final HashMap<String,String> code2organism = initOrganism2code();
+
+	private static HashMap<String, String> initOrganism2code()
+	{
+		HashMap<String, String> result = new HashMap<String,String>();
+		for(int i = 0; i < organism_latin_name.length; i++)
+			result.put(organism_short_code[i], organism_latin_name[i]);
+		return result;
+	}
+	
+	private static String[] extensions = new String[] { "mapp" };
+
+	public String getName() {
+		return "GenMAPP";
+	}
+
+	public String[] getExtensions() {
+		return extensions;
+	}
+	
+	public void doExport(File file, Pathway pathway) throws ConverterException {
+		String[] mappInfo = MappFormat.uncopyMappInfo(pathway);
+		List<String[]> mappObjects = MappFormat.uncopyMappObjects(pathway);
+		MappFormat.exportMapp (file.getAbsolutePath(), mappInfo, mappObjects);
+	}
+	
+	public void doImport(File file, Pathway pathway) throws ConverterException {
+        String inputString = file.getAbsolutePath();
+
+        MappFormat.readFromMapp (inputString, pathway);
+	}
+    
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/MappFormat.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayExporter.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayExporter.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayExporter.java	(revision 938)
@@ -0,0 +1,25 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.io.File;
+
+public interface PathwayExporter {
+	public String getName();
+	public String[] getExtensions();
+	public void doExport(File file, Pathway pathway) throws ConverterException;
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayExporter.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ObjectType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ObjectType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ObjectType.java	(revision 938)
@@ -0,0 +1,56 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.Arrays;
+import java.util.List;
+
+/**
+   Possible values for PathwayElement.getObjectType(), such as "DataNode" or "Shape"
+ */   
+public class ObjectType
+{	 
+	//TODO: enum
+	public static final int MIN_VALID = 0; // lowest valid value
+	public static final int SHAPE = 0;
+	public static final int DATANODE = 1;
+	public static final int LABEL = 2;
+	public static final int LINE = 3;
+	public static final int LEGEND = 4;
+	public static final int INFOBOX = 5;
+	public static final int MAPPINFO = 6;
+	public static final int GROUP = 7;
+	public static final int BIOPAX = 8;
+	public static final int MAX_VALID = 8;
+	 
+	// Some mappings to Gpml TAGS
+	 // TODO: is this actually used?
+	private static final List<String> tagMappings = Arrays.asList(new String[] {
+		"Shape", "DataNode", "Label", "Line", "Legend", "InfoBox", 
+		"Pathway", "Group", "Biopax"
+	});
+
+	public static int getTagMapping(String value)
+	{
+		return tagMappings.indexOf(value);
+	}
+	
+	public static String getTagMapping(int value)
+	{
+		return (String)tagMappings.get(value);
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ObjectType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineStyle.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineStyle.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineStyle.java	(revision 938)
@@ -0,0 +1,22 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+public class LineStyle {
+	public static final int SOLID = 0;
+	public static final int DASHED = 1;
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineStyle.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GpmlFormat.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GpmlFormat.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GpmlFormat.java	(revision 938)
@@ -0,0 +1,1023 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.jdom.Attribute;
+import org.jdom.Content;
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.Namespace;
+import org.jdom.filter.Filter;
+
+/**
+ * class responsible for interaction with Gpml format.
+ * Contains all gpml-specific constants,
+ * and should be the only class (apart from svgFormat)
+ * that needs to import jdom
+ *  
+ * @author Martijn
+ *
+ */
+public class GpmlFormat 
+{
+	public static final Namespace GPML = Namespace.getNamespace("gpml", "http://genmapp.org/GPML/2007");
+	public static final Namespace RDF = Namespace.getNamespace("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
+	public static final Namespace RDFS = Namespace.getNamespace("rdfs", "http://www.w3.org/2000/01/rdf-schema#");
+	public static final Namespace BIOPAX = Namespace.getNamespace("bp", "http://www.biopax.org/release/biopax-level2.owl#");
+	public static final Namespace OWL = Namespace.getNamespace("owl", "http://www.w3.org/2002/07/owl#");
+	
+	private static class AttributeInfo
+	{
+		/**
+		 * xsd validated type. Note that in the current implementation
+		 * we don't do anything with restrictions, only with the
+		 * base type.
+		 */
+		public String schemaType;
+		
+		/**
+		 * default value for the attribute
+		 */
+		public String def; // default
+		
+		/**
+		 * use of the attribute: can be "required" or "optional"
+		 */
+		public String use;
+		
+		AttributeInfo (String _schemaType, String _def, String _use)
+		{
+			schemaType = _schemaType;
+			def = _def;
+			use = _use;
+		}
+	}
+
+	static final Map<String, AttributeInfo> attributeInfo = initAttributeInfo();
+	
+	static Map<String, AttributeInfo> initAttributeInfo()
+	{
+		Map<String, AttributeInfo> result = new HashMap<String, AttributeInfo>();
+		// IMPORTANT: this array has been generated from the xsd with 
+		// an automated perl script. Don't edit this directly, use the perl script instead.
+		/* START OF AUTO-GENERATED CONTENT */
+		result.put("PublicationXref@ID", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("PublicationXref@Database", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("Comment@Source", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway.Graphics@BoardWidth", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Pathway.Graphics@BoardHeight", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Pathway.Graphics@WindowWidth", new AttributeInfo ("gpml:Dimension", "18000", "optional"));
+		result.put("Pathway.Graphics@WindowHeight", new AttributeInfo ("gpml:Dimension", "12000", "optional"));
+		result.put("Pathway@Name", new AttributeInfo ("gpml:NameType", null, "required"));
+		result.put("Pathway@Organism", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Data-Source", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Version", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Author", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Maintainer", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Email", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Copyright", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Pathway@Last-Modified", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("DataNode.Graphics@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("DataNode.Graphics@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("DataNode.Graphics@Width", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("DataNode.Graphics@Height", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("DataNode.Graphics@Color", new AttributeInfo ("gpml:ColorType", null, "optional"));
+		result.put("DataNode.Xref@Database", new AttributeInfo ("gpml:DatabaseType", null, "required"));
+		result.put("DataNode.Xref@ID", new AttributeInfo ("gpml:NameType", null, "required"));
+		result.put("DataNode@GraphId", new AttributeInfo ("xsd:ID", null, "optional"));
+		result.put("DataNode@GroupRef", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("DataNode@ObjectType", new AttributeInfo ("gpml:ObjectType", "Annotation", "optional"));
+		result.put("DataNode@TextLabel", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("DataNode@BackpageHead", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("DataNode@GenMAPP-Xref", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("DataNode@Type", new AttributeInfo ("gpml:DataNodeType", "Unknown", "optional"));
+		result.put("Line.Graphics.Point@x", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Line.Graphics.Point@y", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Line.Graphics.Point@GraphRef", new AttributeInfo ("xsd:IDREF", null, "optional"));
+		result.put("Line.Graphics.Point@GraphId", new AttributeInfo ("xsd:ID", null, "optional"));
+		result.put("Line.Graphics.Point@Head", new AttributeInfo ("xsd:string", "Line", "optional"));
+		result.put("Line.Graphics@Color", new AttributeInfo ("gpml:ColorType", "Black", "optional"));
+		result.put("Line@Style", new AttributeInfo ("xsd:string", "Solid", "optional"));
+		result.put("Label.Graphics@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Label.Graphics@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Label.Graphics@Width", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Label.Graphics@Height", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Label.Graphics@Color", new AttributeInfo ("gpml:ColorType", null, "optional"));
+		result.put("Label.Graphics@FontName", new AttributeInfo ("xsd:string", "Arial", "optional"));
+		result.put("Label.Graphics@FontStyle", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Label.Graphics@FontDecoration", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Label.Graphics@FontStrikethru", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Label.Graphics@FontWeight", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Label.Graphics@FontSize", new AttributeInfo ("xsd:nonNegativeInteger", "12", "optional"));
+		result.put("Label@GraphId", new AttributeInfo ("xsd:ID", null, "optional"));
+		result.put("Label@GroupRef", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Label@ObjectType", new AttributeInfo ("gpml:ObjectType", "Annotation", "optional"));
+		result.put("Label@TextLabel", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("Label@Xref", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Label@GenMAPP-Xref", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Link.Graphics@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Link.Graphics@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Link.Graphics@Width", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Link.Graphics@Height", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Link.Graphics@Color", new AttributeInfo ("gpml:ColorType", null, "optional"));
+		result.put("Link.Graphics@FontName", new AttributeInfo ("xsd:string", "Arial", "optional"));
+		result.put("Link.Graphics@FontStyle", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Link.Graphics@FontDecoration", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Link.Graphics@FontStrikethru", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Link.Graphics@FontWeight", new AttributeInfo ("xsd:string", "Normal", "optional"));
+		result.put("Link.Graphics@FontSize", new AttributeInfo ("xsd:nonNegativeInteger", "12", "optional"));
+		result.put("Link@Href", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Link@GraphId", new AttributeInfo ("xsd:ID", null, "optional"));
+		result.put("Link@GroupRef", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Link@ObjectType", new AttributeInfo ("gpml:ObjectType", "Annotation", "optional"));
+		result.put("Link@TextLabel", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("Link@GenMAPP-Xref", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Shape.Graphics@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Shape.Graphics@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Shape.Graphics@Width", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Shape.Graphics@Height", new AttributeInfo ("gpml:Dimension", null, "required"));
+		result.put("Shape.Graphics@Color", new AttributeInfo ("gpml:ColorType", "Black", "optional"));
+		result.put("Shape.Graphics@Rotation", new AttributeInfo ("gpml:RotationType", "Top", "optional"));
+		result.put("Shape.Graphics@FillColor", new AttributeInfo ("gpml:ColorType", "Transparent", "optional"));
+		result.put("Shape@Type", new AttributeInfo ("xsd:string", null, "required"));
+		result.put("Shape@GraphId", new AttributeInfo ("xsd:ID", null, "optional"));
+		result.put("Shape@GroupRef", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Shape@ObjectType", new AttributeInfo ("gpml:ObjectType", "Annotation", "optional"));
+		result.put("Group@GroupId", new AttributeInfo ("xsd:ID", null, "required"));
+		result.put("Group@GroupRef", new AttributeInfo ("xsd:string", null, "optional"));
+		result.put("Group@TextLabel", new AttributeInfo("xsd:string", null, "optional"));
+		result.put("Group@Style", new AttributeInfo ("gpml:GroupStyleType", "None", "optional"));
+		result.put("InfoBox@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("InfoBox@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Legend@CenterX", new AttributeInfo ("xsd:float", null, "required"));
+		result.put("Legend@CenterY", new AttributeInfo ("xsd:float", null, "required"));
+		/* END OF AUTO-GENERATED CONTENT */
+
+		return result;
+	};
+	
+	/**
+	 * Sets a certain attribute value, 
+	 * Does a basic check for some types,
+	 * throws an exception when you're trying to set an invalid value
+	 * If you're trying to set a default value, or an optional value to null,
+	 * the attribute is omitted,
+	 * leading to a leaner xml output. 
+	 * 
+	 * @param tag used for lookup in the defaults table
+	 * @param name used for lookup in the defaults table
+	 * @param el jdom element where this attribute belongs in
+	 * @param value value you wan't to check and set
+	 */
+	private static void setAttribute(String tag, String name, Element el,
+			String value) throws ConverterException {
+		String key = tag + "@" + name;
+		if (!attributeInfo.containsKey(key))
+			throw new ConverterException("Trying to set invalid attribute "
+					+ key);
+		AttributeInfo aInfo = attributeInfo.get(key);
+		boolean isDefault = false;
+		// here we start seeing if the attribute is equal to the
+		// default value
+		// if so, we can leave out the attribute from the jdom
+		// altogether
+		if (aInfo.use.equals("optional")) {
+			if (aInfo.schemaType.equals("xsd:string")
+					|| aInfo.schemaType.equals("xsd:ID")) {
+				if ((aInfo.def == null && value == null) ||
+						(aInfo.def != null && aInfo.def.equals(value)) ||
+						(aInfo.def == null && value != null && value.equals("")))
+					isDefault = true;
+			} else if (aInfo.schemaType.equals("xsd:float")
+					|| aInfo.schemaType.equals("Dimension")) {
+				Double x = Double.parseDouble(aInfo.def);
+				Double y = Double.parseDouble(value);
+				if (Math.abs(x - y) < 1e-6)
+					isDefault = true;
+			}
+		}
+		if (!isDefault)
+			el.setAttribute(name, value);
+	}
+
+	/**
+	 * Gets a certain attribute value,
+	 * replaces it with a suitable default under certain conditions.
+	 * 
+	 * @param tag used for lookup in the defaults table
+	 * @param name used for lookup in the defaults table
+	 * @param el jdom element to get the attribute from
+	 * @throws ConverterException
+	 */
+	private static String getAttribute(String tag, String name, Element el) throws ConverterException 
+	{
+		String key = tag + "@" + name;
+		if (!attributeInfo.containsKey(key))
+				throw new ConverterException("Trying to get invalid attribute " + key);
+		AttributeInfo aInfo = attributeInfo.get(key);
+		String result = el.getAttributeValue(name, aInfo.def);
+		return result;
+	}
+	
+	/**
+	 * The GPML xsd implies a certain ordering for children of the pathway element.
+	 * (e.g. DataNode always comes before LineShape, etc.)
+	 * 
+	 * This Comparator can sort jdom Elements so that they are in the correct order
+	 * for the xsd.
+	 *  
+	 * @author Martijn.vanIersel
+	 */
+	private static class ByElementName implements Comparator<Element>
+	{
+		// hashmap for quick lookups during sorting
+		private HashMap<String, Integer> elementOrdering;
+				
+		// correctly ordered list of tag names, which are loaded into the hashmap in
+		// the constructor.
+		private final String[] elements = new String[] {
+			"Comment", "Graphics", "DataNode", "Line", "Label",
+			"Shape", "Group", "InfoBox", "Legend", "Biopax"
+		};
+		
+		/*
+		 * Constructor
+		 */
+		public ByElementName()
+		{
+			elementOrdering = new HashMap<String, Integer>();
+			for (int i = 0; i < elements.length; ++i)
+			{
+				elementOrdering.put (elements[i], new Integer(i));
+			}			
+		}
+		
+		/*
+		 * As a comparison measure, returns difference of index of element names of a and b 
+		 * in elements array. E.g:
+		 * Comment -> index 1 in elements array
+		 * Graphics -> index 2 in elements array.
+		 * If a.getName() is Comment and b.getName() is Graphics, returns 1-2 -> -1
+		 */
+		public int compare(Element a, Element b) {
+			return ((Integer)elementOrdering.get(a.getName())).intValue() - 
+				((Integer)elementOrdering.get(b.getName())).intValue();
+		}
+		
+	}
+	
+	public static Document createJdom(Pathway data) throws ConverterException
+	{
+		Document doc = new Document();
+
+		Namespace ns = GPML;
+
+		Element root = new Element("Pathway", ns);
+		doc.setRootElement(root);
+
+		List<Element> elementList = new ArrayList<Element>();
+    	
+		for (PathwayElement o : data.getDataObjects())
+		{
+			if (o.getObjectType() == ObjectType.MAPPINFO)
+			{
+				setAttribute("Pathway", "Name", root, o.getMapInfoName());
+				setAttribute("Pathway", "Data-Source", root, "GenMAPP 2.0");
+				setAttribute("Pathway", "Version", root, o.getVersion());
+				setAttribute("Pathway", "Author", root, o.getAuthor());
+				setAttribute("Pathway", "Maintainer", root, o.getMaintainer());
+				setAttribute("Pathway", "Email", root, o.getEmail());
+				setAttribute("Pathway", "Copyright", root, o.getCopyright());
+				setAttribute("Pathway", "Last-Modified", root, o.getLastModified());
+				setAttribute("Pathway", "Organism", root, o.getOrganism());
+
+				for (PathwayElement.Comment c : o.getComments())
+				{
+					Element f = new Element ("Comment", ns);
+					f.setText (c.comment);
+					setAttribute("Comment", "Source", f, c.source);
+					root.addContent(f);
+				}				
+				
+				Element graphics = new Element("Graphics", ns);
+				root.addContent(graphics);
+				
+				setAttribute("Pathway.Graphics", "BoardWidth", graphics, "" + o.getMBoardWidth());
+				setAttribute("Pathway.Graphics", "BoardHeight", graphics, "" + o.getMBoardHeight());
+				setAttribute("Pathway.Graphics", "WindowWidth", graphics, "" + o.getWindowWidth());
+				setAttribute("Pathway.Graphics", "WindowHeight", graphics, "" + o.getWindowHeight());				
+			}
+			else
+			{
+				Element e = createJdomElement(o, ns);
+				if (e != null)
+					elementList.add(e);
+			}
+		}
+		
+    	// now sort the generated elements in the order defined by the xsd
+		Collections.sort(elementList, new ByElementName());
+		for (Element e : elementList)
+		{			
+			root.addContent(e);
+		}
+		
+		return doc;
+	}
+	
+	public static void mapElement(Element e, Pathway p) throws ConverterException
+	{
+		String tag = e.getName();
+		int ot = ObjectType.getTagMapping(tag);
+		if (ot == -1)
+		{
+			// do nothing. This could be caused by
+			// tags <comment> or <graphics> that appear
+			// as subtags of <pathway>
+			return;
+		}
+		
+		PathwayElement o;
+		if (ot == ObjectType.MAPPINFO)
+		{
+			o = p.getMappInfo();
+		}
+		else if (ot == ObjectType.INFOBOX)
+		{
+			o = p.getInfoBox();
+		} 
+		else if (ot == ObjectType.BIOPAX) 
+		{
+			o = p.getBiopax();
+		}
+		else
+		{
+			o = new PathwayElement(ot);
+			p.add (o);
+		}
+		
+		switch (o.getObjectType())
+		{
+			case ObjectType.DATANODE:
+				mapShapeData(o, e, "DataNode");
+				mapColor(o, e);
+				mapComments(o, e);
+				mapDataNode(o, e);
+				mapGraphId(o, e);
+				mapGroupRef(o, e);
+				mapBiopaxRef(o, e);
+				break;
+			case ObjectType.LABEL:
+				mapShapeData(o, e, "Label");
+				mapColor(o, e);
+				mapLabelData(o, e);
+				mapComments(o, e);
+				mapGraphId(o, e);
+				mapGroupRef(o, e);
+				mapBiopaxRef(o, e);
+				break;
+			case ObjectType.LINE:
+				mapLineData(o, e);
+				mapColor(o, e);
+				mapComments(o, e);
+				mapGroupRef(o, e);
+				mapBiopaxRef(o, e);
+				break;
+			case ObjectType.MAPPINFO:
+				mapMappInfoData(o, e);
+				break;
+			case ObjectType.SHAPE:
+				mapShapeData(o, e, "Shape");
+				mapShapeColor (o, e);
+				mapColor(o, e);
+				mapComments(o, e);
+				mapShapeType(o, e);
+				mapGraphId(o, e);
+				mapGroupRef(o, e);
+				mapBiopaxRef(o, e);
+				break;
+			case ObjectType.LEGEND:
+				mapSimpleCenter(o, e);
+				break;
+			case ObjectType.INFOBOX:
+				mapSimpleCenter (o, e);
+				break;
+			case ObjectType.GROUP:
+				mapGroupRef(o, e);
+				mapGroup (o, e);
+				mapBiopaxRef(o, e);
+				break;
+			case ObjectType.BIOPAX:
+				mapBiopax(o, e);
+				break;
+			default:
+				throw new ConverterException("Invalid ObjectType'" + tag + "'");
+		}
+	}
+	
+	private static void mapLineData(PathwayElement o, Element e) throws ConverterException
+	{
+    	Element graphics = e.getChild("Graphics", e.getNamespace());
+    	
+    	Element p1 = (Element)graphics.getChildren().get(0);
+    	Element p2 = (Element)graphics.getChildren().get(1);
+    	
+    	o.setMStartX (Double.parseDouble(getAttribute("Line.Graphics.Point", "x", p1)));
+    	o.setMStartY (Double.parseDouble(getAttribute("Line.Graphics.Point", "y", p1)));
+    	
+    	String ref1 = getAttribute("Line.Graphics.Point", "GraphRef", p1);
+    	if (ref1 == null) ref1 = "";
+    	o.setStartGraphRef (ref1);
+
+    	o.setMEndX (Double.parseDouble(getAttribute("Line.Graphics.Point", "x", p2)));
+    	o.setMEndY (Double.parseDouble(getAttribute("Line.Graphics.Point", "y", p2))); 
+    	
+    	String ref2 = getAttribute("Line.Graphics.Point", "GraphRef", p2);
+    	if (ref2 == null) ref2 = "";
+    	o.setEndGraphRef (ref2);
+
+    	String style = getAttribute("Line", "Style", e);
+    	String type = getAttribute("Line.Graphics.Point", "Head", p1);
+    	
+    	o.setLineStyle ((style.equals("Solid")) ? LineStyle.SOLID : LineStyle.DASHED);
+    	o.setLineType (LineType.getByGpmlName(type));
+	}
+	
+	private static void updateLineData(PathwayElement o, Element e) throws ConverterException
+	{
+		if(e != null) {
+			setAttribute("Line", "Style", e, o.getLineStyle() == LineStyle.SOLID ? "Solid" : "Broken");
+			
+			Element jdomGraphics = e.getChild("Graphics", e.getNamespace());
+			Element p1 = new Element("Point", e.getNamespace());
+			jdomGraphics.addContent(p1);
+			setAttribute("Line.Graphics.Point", "x", p1, Double.toString(o.getMStartX()));
+			setAttribute("Line.Graphics.Point", "y", p1, Double.toString(o.getMStartY()));
+			setAttribute("Line.Graphics.Point", "Head", p1, o.getLineType().getGpmlName());
+			if (o.getStartGraphRef() != null && !o.getStartGraphRef().equals(""))
+			{
+				setAttribute("Line.Graphics.Point", "GraphRef", p1, o.getStartGraphRef());
+			}
+			Element p2 = new Element("Point", e.getNamespace());
+			jdomGraphics.addContent(p2);
+			setAttribute("Line.Graphics.Point", "x", p2, Double.toString(o.getMEndX()));
+			setAttribute("Line.Graphics.Point", "y", p2, Double.toString(o.getMEndY()));
+			if (o.getEndGraphRef() != null && !o.getEndGraphRef().equals(""))
+			{
+				setAttribute("Line.Graphics.Point", "GraphRef", p2, o.getEndGraphRef());
+			}
+		}
+	}
+	
+	private static void mapColor(PathwayElement o, Element e) throws ConverterException
+	{
+    	Element graphics = e.getChild("Graphics", e.getNamespace());
+    	String scol = getAttribute(e.getName() + ".Graphics", "Color", graphics);
+    	o.setColor (gmmlString2Color(scol));
+	}
+
+	private static void mapShapeColor(PathwayElement o, Element e) throws ConverterException
+	{
+    	Element graphics = e.getChild("Graphics", e.getNamespace());
+    	String scol = getAttribute("Shape.Graphics", "FillColor", graphics);
+    	if(scol.equals("Transparent")) {
+    		o.setTransparent (true);
+    	} else {
+    		o.setTransparent (false);
+    		o.setFillColor (gmmlString2Color(scol));
+    	}
+	}
+
+	private static void updateColor(PathwayElement o, Element e) throws ConverterException
+	{
+		if(e != null) 
+		{
+			Element jdomGraphics = e.getChild("Graphics", e.getNamespace());
+			if(jdomGraphics != null) 
+			{
+				setAttribute(e.getName() + ".Graphics", "Color", jdomGraphics, color2HexBin(o.getColor()));
+			}
+		}
+	}
+		
+	private static void updateShapeColor(PathwayElement o, Element e)
+	{
+		if(e != null) 
+		{
+			Element jdomGraphics = e.getChild("Graphics", e.getNamespace());
+			if(jdomGraphics != null) 
+			{
+				if (o.isTransparent())
+					jdomGraphics.setAttribute("FillColor", "Transparent");
+				else
+					jdomGraphics.setAttribute("FillColor", color2HexBin(o.getFillColor()));		
+			}			
+		}
+	}
+
+	private static void mapComments(PathwayElement o, Element e) throws ConverterException
+	{
+		for (Object f : e.getChildren("Comment", e.getNamespace()))
+		{
+			o.addComment(((Element)f).getText(), getAttribute("Comment", "Source", (Element)f));
+		}    	
+	}
+	
+	private static void updateComments(PathwayElement o, Element e) throws ConverterException
+	{
+		if(e != null) 
+		{
+			for (PathwayElement.Comment c : o.getComments())
+			{
+				Element f = new Element ("Comment", e.getNamespace());
+				f.setText (c.comment);
+				setAttribute("Comment", "Source", f, c.source);
+				e.addContent(f);
+			}
+		}
+	}
+	
+	private static void mapGraphId (PathwayElement o, Element e)
+	{
+		String id = e.getAttributeValue("GraphId");
+		if(id == null || id.equals("")) {
+			id = o.getParent().getUniqueId();
+		}
+		o.setGraphId (id);
+	}
+	
+	private static void updateGraphId (PathwayElement o, Element e)
+	{
+		String id = o.getGraphId();
+		// id has to be unique!
+		if (id != null && !id.equals(""))
+		{
+			e.setAttribute("GraphId", o.getGraphId());
+		} 
+	}
+		
+	private static void mapGroupRef (PathwayElement o, Element e) 
+	{
+		String id = e.getAttributeValue("GroupRef");
+		if(id != null && !id.equals("")) {
+			o.setGroupRef (id);
+		}
+		
+	}
+
+	private static void updateGroupRef (PathwayElement o, Element e) 
+	{
+		String id = o.getGroupRef();
+		if (id != null && !id.equals(""))
+		{
+			e.setAttribute("GroupRef", o.getGroupRef());
+		} 
+	}
+	
+	private static void mapGroup (PathwayElement o, Element e) throws ConverterException
+	{
+		//ID
+		String id = e.getAttributeValue("GroupId");
+		if(id == null || id.equals("")) 
+			{id = o.getParent().getUniqueId();}
+		o.setGroupId (id);
+		//Style
+		o.setGroupStyle(GroupStyle.fromGpmlName(getAttribute("Group", "Style", e)));
+		//Label
+		o.setTextLabel (getAttribute("Group", "TextLabel", e));
+	}
+	
+	private static void updateGroup (PathwayElement o, Element e) throws ConverterException
+	{
+		//ID
+		String id = o.getGroupId();
+		if (id != null && !id.equals(""))
+			{e.setAttribute("GroupId", o.getGroupId());}
+		//Style
+		setAttribute("Group", "Style", e, GroupStyle.toGpmlName(o.getGroupStyle()));
+		//Label
+		setAttribute ("Group", "TextLabel", e, o.getTextLabel());
+	}
+	
+	private static void mapDataNode(PathwayElement o, Element e) throws ConverterException
+	{
+		o.setTextLabel    (getAttribute("DataNode", "TextLabel", e));
+		o.setXref         (getAttribute("DataNode", "GenMAPP-Xref", e));
+		o.setDataNodeType (getAttribute("DataNode", "Type", e));
+		o.setBackpageHead (getAttribute("DataNode", "BackpageHead", e));
+		Element xref = e.getChild ("Xref", e.getNamespace());
+		o.setGeneID (getAttribute("DataNode.Xref", "ID", xref));
+		o.setDataSource (getAttribute("DataNode.Xref", "Database", xref));
+	}
+
+	private static void updateDataNode(PathwayElement o, Element e) throws ConverterException
+	{
+		if(e != null) {
+			setAttribute ("DataNode", "TextLabel", e, o.getTextLabel());
+			setAttribute ("DataNode", "GenMAPP-Xref", e, o.getXref());
+			setAttribute ("DataNode", "Type", e, o.getDataNodeType());
+			setAttribute ("DataNode", "BackpageHead", e, o.getBackpageHead());
+			Element xref = e.getChild("Xref", e.getNamespace());
+			setAttribute ("DataNode.Xref", "Database", xref, o.getDataSource());
+			setAttribute ("DataNode.Xref", "ID", xref, o.getGeneID());			
+		}
+	}
+
+	private static void mapSimpleCenter(PathwayElement o, Element e)
+	{
+		o.setMCenterX (Double.parseDouble(e.getAttributeValue("CenterX"))); 
+		o.setMCenterY (Double.parseDouble(e.getAttributeValue("CenterY")));	
+	}
+	
+	private static void updateSimpleCenter(PathwayElement o, Element e)
+	{
+		if(e != null) 
+		{
+			e.setAttribute("CenterX", Double.toString(o.getMCenterX()));
+			e.setAttribute("CenterY", Double.toString(o.getMCenterY()));			
+		}		
+	}
+
+	private static void mapShapeData(PathwayElement o, Element e, String base) throws ConverterException
+	{
+		Element graphics = e.getChild("Graphics", e.getNamespace());
+    	o.setMCenterX (Double.parseDouble(getAttribute(base + ".Graphics", "CenterX", graphics))); 
+    	o.setMCenterY (Double.parseDouble(getAttribute(base + ".Graphics", "CenterY", graphics)));	
+		o.setMWidth (Double.parseDouble(getAttribute(base + ".Graphics", "Width", graphics))); 
+		o.setMHeight (Double.parseDouble(getAttribute(base + ".Graphics", "Height", graphics)));
+	}
+	
+	private static void updateShapeData(PathwayElement o, Element e, String base) throws ConverterException
+	{
+		if(e != null) 
+		{
+			Element graphics = e.getChild("Graphics", e.getNamespace());
+			if(graphics !=null) 
+			{
+				setAttribute(base + ".Graphics", "CenterX", graphics, "" + o.getMCenterX());
+				setAttribute(base + ".Graphics", "CenterY", graphics, "" + o.getMCenterY());
+				setAttribute(base + ".Graphics", "Width", graphics, "" + o.getMWidth());
+				setAttribute(base + ".Graphics", "Height", graphics, "" + o.getMHeight());
+			}
+		}
+	}
+	
+	private static void mapShapeType(PathwayElement o, Element e) throws ConverterException
+	{
+		o.setShapeType (ShapeType.fromGpmlName(getAttribute("Shape", "Type", e)));
+    	Element graphics = e.getChild("Graphics", e.getNamespace());
+    	
+    	String rotation = graphics.getAttributeValue("Rotation");
+    	double result;
+    	if (rotation.equals("Top"))
+    	{
+    		result = 0.0;
+    	}
+    	else if (rotation.equals("Right"))
+		{
+    		result = 0.5 * Math.PI;
+		}
+    	else if (rotation.equals("Bottom"))
+    	{
+    		result = Math.PI;
+    	}
+    	else if (rotation.equals("Left"))
+    	{
+    		result = 1.5 * Math.PI;
+    	}
+    	else
+    	{
+    		result = Double.parseDouble(rotation);
+    	}
+    	o.setRotation (result); 
+	}
+	
+	private static void updateShapeType(PathwayElement o, Element e)
+	{
+		if(e != null) 
+		{
+			e.setAttribute("Type", ShapeType.toGpmlName(o.getShapeType()));
+			Element jdomGraphics = e.getChild("Graphics", e.getNamespace());
+			if(jdomGraphics !=null) 
+			{
+				jdomGraphics.setAttribute("Rotation", Double.toString(o.getRotation()));
+			}
+		}
+	}
+	
+	private static void mapLabelData(PathwayElement o, Element e) throws ConverterException
+	{
+		o.setTextLabel (getAttribute("Label", "TextLabel", e));
+    	Element graphics = e.getChild("Graphics", e.getNamespace());
+    	
+    	o.setMFontSize (Integer.parseInt(graphics.getAttributeValue("FontSize")));
+    	
+    	String fontWeight = getAttribute("Label.Graphics", "FontWeight", graphics);
+    	String fontStyle = getAttribute("Label.Graphics", "FontStyle", graphics);
+    	String fontDecoration = getAttribute("Label.Graphics", "FontDecoration", graphics);
+    	String fontStrikethru = getAttribute("Label.Graphics", "FontStrikethru", graphics);
+    	
+    	o.setBold (fontWeight != null && fontWeight.equals("Bold"));   	
+    	o.setItalic (fontStyle != null && fontStyle.equals("Italic"));    	
+    	o.setUnderline (fontDecoration != null && fontDecoration.equals("Underline"));    	
+    	o.setStrikethru (fontStrikethru != null && fontStrikethru.equals("Strikethru"));
+    	
+    	o.setFontName (getAttribute("Label.Graphics", "FontName", graphics));
+    	
+    	String xref = getAttribute("Label", "Xref", e);
+    	if (xref == null) xref = "";
+    	o.setXref(xref);
+	}
+	
+	private static void updateLabelData(PathwayElement o, Element e) throws ConverterException
+	{
+		if(e != null) 
+		{
+			setAttribute("Label", "TextLabel", e, o.getTextLabel());
+			setAttribute("Label", "Xref", e, o.getXref() == null ? "" : o.getXref());
+			Element graphics = e.getChild("Graphics", e.getNamespace());
+			if(graphics !=null) 
+			{
+				setAttribute("Label.Graphics", "FontName", graphics, o.getFontName() == null ? "" : o.getFontName());			
+				setAttribute("Label.Graphics", "FontWeight", graphics, o.isBold() ? "Bold" : "Normal");
+				setAttribute("Label.Graphics", "FontStyle", graphics, o.isItalic() ? "Italic" : "Normal");
+				setAttribute("Label.Graphics", "FontDecoration", graphics, o.isUnderline() ? "Underline" : "Normal");
+				setAttribute("Label.Graphics", "FontStrikethru", graphics, o.isStrikethru() ? "Strikethru" : "Normal");
+				setAttribute("Label.Graphics", "FontSize", graphics, Integer.toString((int)o.getMFontSize()));
+			}
+		}
+	}
+	
+	private static void mapMappInfoData(PathwayElement o, Element e) throws ConverterException
+	{
+		o.setMapInfoName (getAttribute("Pathway", "Name", e));
+		o.setOrganism (getAttribute("Pathway", "Organism", e));	
+		o.setMapInfoDataSource (getAttribute("Pathway", "Data-Source", e));
+		o.setVersion (getAttribute("Pathway", "Version", e));
+		o.setAuthor (getAttribute("Pathway", "Author", e));
+		o.setMaintainer (getAttribute("Pathway", "Maintainer", e));
+		o.setEmail (getAttribute("Pathway", "Email", e));
+		o.setLastModified (getAttribute("Pathway", "Last-Modified", e));
+		o.setCopyright (getAttribute("Pathway", "Copyright", e));
+		
+		Element g = e.getChild("Graphics", e.getNamespace());
+		o.setMBoardWidth (Double.parseDouble(getAttribute("Pathway.Graphics", "BoardWidth", g)));
+		o.setMBoardHeight (Double.parseDouble(getAttribute("Pathway.Graphics", "BoardHeight", g)));
+		o.setWindowWidth (Double.parseDouble(getAttribute("Pathway.Graphics", "WindowWidth", g)));
+		o.setWindowHeight (Double.parseDouble(getAttribute("Pathway.Graphics", "WindowHeight", g)));
+				
+		for (Object f : e.getChildren("Comment", e.getNamespace()))
+		{
+			o.addComment(((Element)f).getText(), getAttribute("Comment", "Source", (Element)f));
+		}		
+	}
+		
+	private static void mapBiopax(PathwayElement o, Element e) throws ConverterException
+	{
+		//this method clones all content, 
+		//getContent will leave them attached to the parent, which we don't want
+		//We can safely remove them, since the JDOM element isn't used anymore after this method
+		Element root = new Element("RDF", RDF);
+		root.addNamespaceDeclaration(RDFS);
+		root.addNamespaceDeclaration(RDF);
+		root.addNamespaceDeclaration(OWL);
+		root.addNamespaceDeclaration(BIOPAX);
+		root.setAttribute(new Attribute("base", GPML.getURI() + "#", Namespace.XML_NAMESPACE));
+		//Element owl = new Element("Ontology", OWL);
+		//owl.setAttribute(new Attribute("about", "", RDF));
+		//Element imp = new Element("imports", OWL);
+		//imp.setAttribute(new Attribute("resource", BIOPAX.getURI(), RDF));
+		//owl.addContent(imp);
+		//root.addContent(owl);
+		
+		root.addContent(e.cloneContent());
+		Document bp = new Document(root);
+				
+		o.setBiopax(bp);
+	}
+	
+	private static void updateBiopax(PathwayElement o, Element e) throws ConverterException
+	{
+		Document bp = o.getBiopax();
+		if(e != null && bp != null) {
+			List<Content> content = bp.getRootElement().cloneContent();
+			for(Content c : content) {
+				if(c instanceof Element) {
+					Element elm = (Element)c;
+					if(elm.getNamespace().equals(BIOPAX)) {
+						e.addContent(c);
+					} else if(elm.getName().equals("RDF") && elm.getNamespace().equals(RDF)) {
+						for(Object ce : elm.getChildren()) {
+							if(((Element)ce).getNamespace().equals(BIOPAX)) {
+								e.addContent((Element)ce);
+							}
+						}
+					} else {
+						System.out.println("Skipped non-biopax element" + c);
+					}
+				}
+			}
+		}
+	}
+	
+	private static void mapBiopaxRef(PathwayElement o, Element e) throws ConverterException
+	{
+		String ref = e.getAttributeValue("BiopaxRef");
+		if(ref != null) {
+			o.setBiopaxRef(ref);
+		}
+	}
+	
+	private static void updateBiopaxRef(PathwayElement o, Element e) throws ConverterException
+	{
+		String ref = o.getBiopaxRef();
+		if(ref != null) {
+			e.setAttribute("BiopaxRef", ref);
+		}
+	}
+	
+	static public Element createJdomElement(PathwayElement o, Namespace ns) throws ConverterException 
+	{		
+		Element e = null;
+		
+		switch (o.getObjectType())
+		{
+			case ObjectType.DATANODE:
+				e = new Element("DataNode", ns);
+				updateComments(o, e);
+				e.addContent(new Element("Graphics", ns));			
+				e.addContent(new Element("Xref", ns));			
+				updateDataNode(o, e);
+				updateColor(o, e);
+				updateShapeData(o, e, "DataNode");
+				updateGraphId(o, e);				
+				updateGroupRef(o, e);
+				updateBiopaxRef(o, e);
+				break;
+			case ObjectType.SHAPE:
+				e = new Element ("Shape", ns);
+				updateComments(o, e);
+				e.addContent(new Element("Graphics", ns));
+				updateShapeColor(o, e);
+				updateColor(o, e);
+				updateShapeData(o, e, "Shape");
+				updateShapeType(o, e);
+				updateGraphId(o, e);
+				updateGroupRef(o, e);
+				updateBiopaxRef(o, e);
+				break;
+			case ObjectType.LINE:
+				e = new Element("Line", ns);
+				updateComments(o, e);
+				e.addContent(new Element("Graphics", ns));				
+				updateLineData(o, e);
+				updateColor(o, e);
+				updateGroupRef(o, e);
+				updateBiopaxRef(o, e);
+				break;
+			case ObjectType.LABEL:
+				e = new Element("Label", ns);
+				updateComments(o, e);			
+				e.addContent(new Element("Graphics", ns));					
+				updateLabelData(o, e);
+				updateColor(o, e);
+				updateShapeData(o, e, "Label");
+				updateGraphId(o, e);
+				updateGroupRef(o, e);
+				updateBiopaxRef(o, e);
+				break;
+			case ObjectType.LEGEND:
+				e = new Element ("Legend", ns);
+				updateSimpleCenter (o, e);
+				break;
+			case ObjectType.INFOBOX:
+				e = new Element ("InfoBox", ns);
+				updateSimpleCenter (o, e);
+				break;
+			case ObjectType.GROUP:
+				e = new Element ("Group", ns);
+				updateGroup (o, e);
+				updateGroupRef(o, e);
+				updateBiopaxRef(o, e);
+				break;
+			case ObjectType.BIOPAX:
+				e = new Element ("Biopax", ns);
+				updateBiopax(o, e);
+				break;
+		}
+		if (e == null)
+		{
+			throw new ConverterException ("Error creating jdom element with objectType " + o.getObjectType());
+		}
+		return e;
+	}
+
+	/**
+	 * Converts a string containing either a named color (as specified in gpml) or a hexbinary number
+	 * to an {@link Color} object
+	 * @param strColor
+	 */
+    public static Color gmmlString2Color(String strColor)
+    {
+    	if(colorMappings.contains(strColor))
+    	{
+    		double[] color = (double[])rgbMappings.get(colorMappings.indexOf(strColor));
+    		return new Color((int)(255*color[0]),(int)(255*color[1]),(int)(255*color[2]));
+    	}
+    	else
+    	{
+    		try
+    		{
+    			strColor = padding(strColor, 6, '0');
+        		int red = Integer.valueOf(strColor.substring(0,2),16);
+        		int green = Integer.valueOf(strColor.substring(2,4),16);
+        		int blue = Integer.valueOf(strColor.substring(4,6),16);
+        		return new Color(red,green,blue);
+    		}
+    		catch (Exception e)
+    		{
+    			System.out.println("while converting color: " +
+    					"Color " + strColor + " is not valid, element color is set to black");
+				e.printStackTrace();
+    		}
+    	}
+    	return new Color(0,0,0);
+    }
+    
+	/**
+	 * Converts an {@link Color} object to a hexbinary string
+	 * @param color
+	 */
+	public static String color2HexBin(Color color)
+	{
+		String red = padding(Integer.toBinaryString(color.red), 8, '0');
+		String green = padding(Integer.toBinaryString(color.green), 8, '0');
+		String blue = padding(Integer.toBinaryString(color.blue), 8, '0');
+		String hexBinary = Integer.toHexString(Integer.valueOf(red + green + blue, 2));
+		return padding(hexBinary, 6, '0');
+	}
+	
+    /**
+     * Prepends character c x-times to the input string to make it length n
+     * @param s	String to pad
+     * @param n	Number of characters of the resulting string
+     * @param c	character to append
+     * @return	string of length n or larger (if given string s > n)
+     */
+    public static String padding(String s, int n, char c)
+    {
+    	while(s.length() < n)
+    	{
+    		s = c + s;
+    	}
+    	return s;
+    }
+    
+	public static final List rgbMappings = Arrays.asList(new double[][] {
+			{0, 1, 1},		// aqua 
+			{0, 0, 0},	 	// black
+			{0, 0, 1}, 		// blue
+			{1, 0, 1},		// fuchsia
+			{.5, .5, .5,},	// gray
+			{0, .5, 0}, 	// green
+			{0, 1, 0},		// lime
+			{.5, 0, 0},		// maroon
+			{0, 0, .5},		// navy
+			{.5, .5, 0},	// olive
+			{.5, 0, .5},	// purple
+			{1, 0, 0}, 		// red
+			{.75, .75, .75},// silver
+			{0, .5, .5}, 	// teal
+			{1, 1, 1},		// white
+			{1, 1, 0},		// yellow
+			{0, 0, 0}		// transparent (actually irrelevant)
+		});
+	
+	public static final List colorMappings = Arrays.asList(new String[]{
+			"Aqua", "Black", "Blue", "Fuchsia", "Gray", "Green", "Lime",
+			"Maroon", "Navy", "Olive", "Purple", "Red", "Silver", "Teal",
+			"White", "Yellow", "Transparent"
+		});
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GpmlFormat.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/SvgFormat.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/SvgFormat.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/SvgFormat.java	(revision 938)
@@ -0,0 +1,432 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.jdom.DocType;
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.Namespace;
+import org.jdom.output.Format;
+import org.jdom.output.XMLOutputter;
+
+/**
+   A PathwayExporter for exporting pathways to Scalable Vector Graphics (SVG) format
+*/
+public class SvgFormat implements PathwayExporter
+{
+	static final Namespace nsSVG = Namespace.getNamespace("http://www.w3.org/2000/svg");
+		
+	static Element defs;
+	static Set<String> markers;
+	
+	static Document createJdom (Pathway data) throws ConverterException
+	{
+		Document doc = new Document();		
+		
+		defs = new Element("defs", nsSVG);
+		markers = new HashSet<String>();
+		
+		Element root = new Element("svg");
+		root.setNamespace(nsSVG);
+		doc.setRootElement(root);
+		DocType dt = new DocType("svg", "-//W3C//DTD SVG 1.1//EN", "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd");
+    	doc.setDocType(dt);
+    	
+		root.addContent(defs);
+		List<PathwayElement> objects = data.getDataObjects();
+		Collections.sort(objects, new SvgComparator());
+		for (PathwayElement o : data.getDataObjects())
+		{
+				addElement(root, o);
+		}		
+		return doc;
+	}
+
+	private static class SvgComparator implements Comparator {		
+		List<Integer> order = Arrays.asList(
+			ObjectType.INFOBOX,
+			ObjectType.LEGEND,
+			ObjectType.DATANODE,
+			ObjectType.LABEL,
+			ObjectType.SHAPE,
+			ObjectType.LINE
+		);
+		List<ShapeType> shapeOrder = Arrays.asList(
+			ShapeType.BRACE //Everything not specified will be on top
+		);
+		public int compare(Object o1, Object o2) {
+			PathwayElement d1 = (PathwayElement)o1;
+			PathwayElement d2 = (PathwayElement)o2;
+			int ot1 = d1.getObjectType();
+			int ot2 = d2.getObjectType();
+			if(ot1 == ObjectType.SHAPE && ot2 == ObjectType.SHAPE) {
+				return shapeOrder.indexOf(d1.getShapeType()) - shapeOrder.indexOf(d2.getShapeType());
+			}
+			int i1 = order.indexOf(ot1);
+			int i2 = order.indexOf(ot2);
+			return i2- i1;
+		}
+	}
+	
+	static public void addElement (Element root, PathwayElement o) throws ConverterException 
+	{		
+		switch (o.getObjectType())
+		{
+			case ObjectType.SHAPE:
+				mapShape(root, o);
+				break;
+			case ObjectType.DATANODE:
+				mapDataNode(root, o);
+				break;
+			case ObjectType.LINE:
+				mapLine(root, o);
+				break;
+			case ObjectType.LABEL:
+				mapLabel(root, o);
+				break;
+			case ObjectType.MAPPINFO:
+				mapInfo(root, o);
+				break;
+		}
+	}
+	
+	static void mapInfo(Element root, PathwayElement o) {
+		root.setAttribute("width", "" + toPixel(o.getMBoardWidth()));
+		root.setAttribute("height", "" + toPixel(o.getMBoardHeight()));
+		String[][] text = new String[][] {
+				{"Name: ", o.getMapInfoName()},
+				{"Maintained by: ", o.getMaintainer()},
+				{"Email: ", o.getEmail()},
+				{"Availability: ", o.getCopyright()},
+				{"Last modified: ", o.getLastModified()},
+				{"Organism: ", o.getOrganism()},
+				{"Data Source: ", o.getDataSource()}};
+		
+		double fsize = toPixel(o.getMFontSize()) + 2;//TODO: find out why smaller in SVG
+		Element e = new Element("text", nsSVG);
+		e.setAttribute("x", "" + toPixel(o.getMLeft()));
+		e.setAttribute("y", "" + toPixel(o.getMTop()));
+		e.setAttribute("font-size", "" + fsize);
+		e.setAttribute("font-family", "times new roman");
+		for(int i = 0; i < text.length; i++) {
+			if(text[i][1] == null || text[i][1].equals("")) continue;
+			
+			Element l = new Element("tspan", nsSVG);
+			l.setAttribute("x", "" + toPixel(o.getMLeft()));
+			l.setAttribute("dy", fsize + "pt");
+			l.setAttribute("font-weight", "bold");
+			l.addContent(text[i][0]);
+			Element v = new Element("tspan", nsSVG);
+			v.addContent(text[i][1]);
+			e.addContent(l);
+			e.addContent(v);
+		}
+		root.addContent(e);
+	}
+	
+	static void mapLine(Element parent, PathwayElement o) {
+		Element e = new Element("line", nsSVG);
+		e.setAttribute("x1", "" + toPixel(o.getMStartX()));
+		e.setAttribute("y1", "" + toPixel(o.getMStartY()));
+		e.setAttribute("x2", "" + toPixel(o.getMEndX()));
+		e.setAttribute("y2", "" + toPixel(o.getMEndY()));
+		e.setAttribute("stroke", rgb2String(o.getColor()));
+		if(o.getLineStyle() == LineStyle.DASHED) {
+			e.setAttribute("stroke-dasharray", "5,2");
+		}
+		
+		LineType type = o.getLineType();
+		String id = getColordMarker(type, o.getColor(), markers, defs);
+		if(type != LineType.LINE) {
+			e.setAttribute("marker-end", "url(#" + id + ")");
+		}
+		parent.addContent(e);
+	}
+	
+	static void mapDataNode(Element parent, PathwayElement o) {
+		Element e = new Element("rect", nsSVG);
+		e.setAttribute("x", "" + toPixel(o.getMLeft()));
+		e.setAttribute("y", "" + toPixel(o.getMTop()));
+		e.setAttribute("width", "" + toPixel(o.getMWidth()));
+		e.setAttribute("height", "" + toPixel(o.getMHeight()));
+		mapColor(e, o);
+		parent.addContent(e);
+		e = createTextElement(o);
+		e.addContent(o.getTextLabel());
+		parent.addContent(e);
+	}
+	
+	static void mapLabel(Element parent, PathwayElement o) {
+		Element e = createTextElement(o);
+		e.addContent(o.getTextLabel());
+		parent.addContent(e);
+	}
+	
+	static void mapShape(Element parent, PathwayElement o) {
+		double cx = toPixel(o.getMCenterX());
+		double cy = toPixel(o.getMCenterY());
+		double w = toPixel(o.getMWidth());
+		double h = toPixel(o.getMHeight());
+		
+		double r = o.getRotation() * 180.0/Math.PI;
+		
+		Element tr = new Element("g", nsSVG);		
+		tr.setAttribute("transform", "translate(" + cx + ", " + cy + ")");
+		Element rot = new Element("g", nsSVG);
+		rot.setAttribute("transform", "rotate(" + r + ")");
+		Element e = null;	
+		
+		switch (o.getShapeType())
+		{
+			case OVAL:
+				e = new Element("ellipse", nsSVG);
+				e.setAttribute("cx", "0");
+				e.setAttribute("cy", "0");
+				e.setAttribute("rx", "" + toPixel(o.getMWidth()/2));
+				e.setAttribute("ry", "" + toPixel(o.getMHeight()/2));
+				break;
+			case ARC:
+				e = new Element("path", nsSVG);
+				e.setAttribute("d", "M " + -w/2 + " 0 " + " a " + w/2 + " " + h/2 + " 0 0 0 " + w + " 0");
+				break;
+			case BRACE:
+				e = new Element("path", nsSVG);
+				e.setAttribute(
+						"d", "M " + -w/2 + " " + h/2 + " q 0 " + -h/2 + " " + h/2 + " " + -h/2 + " " +
+						"L " + -h/2 + " 0 " +
+						"Q 0 0 0 " + -h/2 + " " +
+						"Q 0 0 " + h/2 + " 0 " + 
+						"L " + (w/2 - h/2) + " 0 " +
+						"q " + h/2 + " 0 " + h/2 + " " + h/2
+				);
+				break;
+			default:
+				e = new Element("rect", nsSVG);
+				e.setAttribute("x", "" + -w/2);
+				e.setAttribute("y", "" + -h/2);
+				e.setAttribute("width", "" + toPixel(o.getMWidth()));
+				e.setAttribute("height", "" + toPixel(o.getMHeight()));
+				break;
+		}
+		mapColor(e, o);
+		rot.addContent(e);
+		tr.addContent(rot);
+		parent.addContent(tr);
+	}
+	
+	static void mapColor(Element e, PathwayElement o) {
+		e.setAttribute("stroke", rgb2String(o.getColor()));
+		if(o.isTransparent() && o.getObjectType() != ObjectType.DATANODE) {
+			e.setAttribute("fill", "none");
+		} else {
+			e.setAttribute("fill", rgb2String(o.getFillColor()));
+			//Override for some shape types (TODO: make handling of colors consistent!)
+			if(o.getObjectType() == ObjectType.DATANODE) {
+				e.setAttribute("fill", "white");
+			} else if(o.getObjectType() == ObjectType.SHAPE){
+				//Fill/transparency in braces/arcs is not stored properly
+				if(o.getShapeType() == ShapeType.ARC || o.getShapeType() == ShapeType.BRACE)
+					e.setAttribute("fill", "none");
+			}
+		}
+	}
+	
+	static String rgb2String(Color rgb) {
+		return "rgb(" + rgb.red + "," + rgb.green + "," + rgb.blue + ")";
+	}
+	
+	static int toPixel(double coordinate) {
+		return (int)(coordinate * 1/15);
+	}
+	
+	static Element createTextElement(PathwayElement o) {
+		Element e = new Element("text", nsSVG);
+		e.setAttribute("x", "" + toPixel(o.getMCenterX()));
+		e.setAttribute("y", "" + (toPixel(o.getMCenterY()) + toPixel(o.getMFontSize())));
+		e.setAttribute("font-family", o.getFontName()); 
+		e.setAttribute("font-size",toPixel(o.getMFontSize()) + "pt");
+		e.setAttribute("text-anchor", "middle");
+		//e.setAttribute("alignment-baseline", "middle"); //Not supported by firefox
+		e.setAttribute("dy", "-" + toPixel((1.0/3) * o.getMFontSize()) + "pt"); //Instead of alignment-baseline
+		if(o.isBold()) e.setAttribute("font-weight", "bold");
+		if(o.isItalic()) e.setAttribute("font-style", "italic");
+		if(o.isStrikethru()) e.setAttribute("text-decoration", "line-through");
+		if(o.isUnderline()) e.setAttribute("text-decoration", "underline");
+		e.setAttribute("fill", rgb2String(o.getColor()));
+		return e;
+	}
+	
+	static String getColordMarker(LineType type, Color color, Set markers, Element defs) {
+		Element marker = null;
+		String id = type.getGpmlName() + color.toString().hashCode();
+		
+		if(markers.contains(id)) return id;
+		
+		String c = rgb2String(color);
+		switch(type) {
+		case ARROW:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 10 10");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "10");
+			marker.setAttribute("refY", "5");
+			marker.setAttribute("markerWidth", "10");
+			marker.setAttribute("markerHeight", "10");
+			Element e = new Element("path", nsSVG);
+			e.setAttribute("d", "M 0 0 L 10 5 L 0 10 z");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", c);
+			marker.addContent(e);
+			break;
+		case TBAR:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 1 15");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "1");
+			marker.setAttribute("refY", "8");
+			marker.setAttribute("markerWidth", "2");
+			marker.setAttribute("markerHeight", "20");
+			e = new Element("rect", nsSVG);
+			e.setAttribute("x", "1");
+			e.setAttribute("y", "1");
+			e.setAttribute("width", "1");
+			e.setAttribute("height", "15");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", c);
+			marker.addContent(e);
+			break;
+		case LIGAND_ROUND:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 10 10");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "10");
+			marker.setAttribute("refY", "5");
+			marker.setAttribute("markerWidth", "10");
+			marker.setAttribute("markerHeight", "10");
+			e = new Element("ellipse", nsSVG);
+			e.setAttribute("cx", "5");
+			e.setAttribute("cy", "5");
+			e.setAttribute("rx", "5");
+			e.setAttribute("ry", "5");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", c);
+			marker.addContent(e);
+			break;
+		case RECEPTOR_ROUND:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 10 10");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "5");
+			marker.setAttribute("refY", "5");
+			marker.setAttribute("markerWidth", "15");
+			marker.setAttribute("markerHeight", "15");
+			e = new Element("path", nsSVG);
+			e.setAttribute("d", "M 10 0 A 5 5 0 0 0 10 10");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", "none");
+			marker.addContent(e);
+			break;
+		case RECEPTOR_SQUARE:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 10 15");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "1");
+			marker.setAttribute("refY", "7.5");
+			marker.setAttribute("markerWidth", "15");
+			marker.setAttribute("markerHeight", "15");
+			e = new Element("path", nsSVG);
+			e.setAttribute("d", "M 10 0 L 0 0  L 0 15 L 10 15");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", "none");
+			marker.addContent(e);
+			break;
+		case LIGAND_SQUARE:
+			marker = new Element("marker", nsSVG);
+			marker.setAttribute("id", id);
+			marker.setAttribute("viewBox", "0 0 10 15");
+			marker.setAttribute("orient", "auto");
+			marker.setAttribute("refX", "10");
+			marker.setAttribute("refY", "7.5");
+			marker.setAttribute("markerWidth", "10");
+			marker.setAttribute("markerHeight", "10");
+			e = new Element("rect", nsSVG);
+			e.setAttribute("x", "1");
+			e.setAttribute("y", "1");
+			e.setAttribute("width", "10");
+			e.setAttribute("height", "15");
+			e.setAttribute("stroke", c);
+			e.setAttribute("fill", c);
+			marker.addContent(e);
+			break;
+		}
+		
+		if(marker != null) {
+			defs.addContent(marker);
+			markers.add(id);
+			return id;
+		} else {
+			return null;
+		}
+	}
+	
+	private String[] extensions = new String[] { "svg" };
+
+	public String getName() {
+		return "Scalable Vector Graphics (SVG)";
+	}
+	
+	public String[] getExtensions() {
+		return extensions;
+	}
+	
+	public void doExport(File file, Pathway pathway) throws ConverterException {
+		Document doc = SvgFormat.createJdom(pathway);
+		
+		XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
+		Format f = xmlcode.getFormat();
+		f.setEncoding("ISO-8859-1");
+		f.setTextMode(Format.TextMode.PRESERVE);
+		xmlcode.setFormat(f);
+		
+		//Open a filewriter
+		try
+		{
+			FileWriter writer = new FileWriter(file);
+			//Send XML code to the filewriter
+			xmlcode.output(doc, writer);
+		}
+		catch (IOException ie)
+		{
+			throw new ConverterException(ie);
+		}
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/SvgFormat.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyClass.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyClass.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyClass.java	(revision 938)
@@ -0,0 +1,43 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+
+package org.pathvisio.model;
+
+/**
+ * The properties in {@link PropertyType} define properties of different classes,
+ * all the possible classes are defined here.
+ */
+public enum PropertyClass 
+{
+	BOOLEAN,
+	DOUBLE,
+	INTEGER, 
+	DATASOURCE,
+	LINESTYLE,
+	COLOR,
+	STRING,
+	ORIENTATION,
+	SHAPETYPE,
+	LINETYPE,
+	GENETYPE,
+	FONT,
+	ANGLE,
+	ORGANISM,
+	DB_ID,
+	DB_SYMBOL,
+	BIOPAXREF,
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyClass.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Pathway.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Pathway.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Pathway.java	(revision 938)
@@ -0,0 +1,575 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+
+import javax.xml.XMLConstants;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.validation.Schema;
+import javax.xml.validation.SchemaFactory;
+import javax.xml.validation.ValidatorHandler;
+
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.JDOMException;
+import org.jdom.input.JDOMParseException;
+import org.jdom.input.SAXBuilder;
+import org.jdom.output.Format;
+import org.jdom.output.SAXOutputter;
+import org.jdom.output.XMLOutputter;
+import org.pathvisio.model.GraphLink.GraphRefContainer;
+import org.xml.sax.SAXException;
+
+
+/**
+* This class is the model for pathway data. It is responsible for
+* storing all information necessary for maintaining, loading and saving
+* pathway data.
+* 
+* Pathway contains multiple PathwayElements. Pathway is guaranteed
+* to always have exactly one object of the type MAPPINFO, INFOBOX.
+* It will have one or zero objects of the type BIOPAX
+*/
+public class Pathway implements PathwayListener
+{
+
+	/**
+	   "changed" tracks if the Pathway has been changed since the file
+	   was opened or last saved. New pathways start changed.
+	 */
+	private boolean changed = true;
+	public boolean hasChanged() { return changed; }
+	/**
+	   clearChangedFlag should be called after when the current
+	   pathway is known to be the same as the one on disk. This
+	   happens when you just opened it, or when you just saved it.
+	*/
+	private void clearChangedFlag() { changed = false; }
+	/**
+	   To be called after each edit operation
+	*/
+	private void markChanged()
+	{
+		changed = true;
+	}
+	
+	/**
+	 * factor to convert screen cordinates used in GenMAPP to pixel cordinates
+	 * NOTE: maybe it is better to adapt gpml to store cordinates as pixels and
+	 * divide the GenMAPP cordinates by this factor on conversion
+	 * 
+	 * @deprecated
+	 */
+	final public static int OLD_GMMLZOOM = 15;
+	
+	/**
+	 * name of resource containing the gpml schema definition
+	 */
+	final private static String xsdFile = "GPML.xsd";
+	
+	/**
+	 * List of contained dataObjects
+	 */
+	private List<PathwayElement> dataObjects = new ArrayList<PathwayElement>();
+	
+	/**
+	 * Getter for dataobjects contained. There is no setter, you
+	 * have to add dataobjects individually
+	 * @return List of dataObjects contained in this pathway
+	 */
+	public List<PathwayElement> getDataObjects() 
+	{
+		return dataObjects;
+	}
+	
+	private PathwayElement mappInfo = null;
+	private PathwayElement infoBox = null;
+	private PathwayElement biopax = null;
+	
+	/**
+	 * get the one and only MappInfo object.
+	 * There is no setter, a MappInfo object is automatically
+	 * created in the constructor.
+	 * 
+	 * @return a PathwayElement with ObjectType set to mappinfo.
+	 */
+	public PathwayElement getMappInfo()
+	{
+		return mappInfo;
+	}
+
+	/**
+	 * get the one and only InfoBox object.
+	 * There is no setter, a MappInfo object is automatically
+	 * created in the constructor.
+	 * 
+	 * @return a PathwayElement with ObjectType set to mappinfo.
+	 */
+	public PathwayElement getInfoBox()
+	{
+		return infoBox;
+	}
+	
+	public PathwayElement getBiopax() {
+		return biopax;
+	}
+	
+	public void createBiopax() {
+		biopax = new PathwayElement(ObjectType.BIOPAX);
+		this.add(biopax);
+	}
+		
+	/**
+	 * Add a PathwayElement to this Pathway.
+	 * takes care of setting parent and removing from possible previous
+	 * parent. 
+	 * 
+	 * fires PathwayEvent.ADDED event <i>after</i> addition of the object
+	 * 
+	 * @param o The object to add
+	 */
+	public void add (PathwayElement o)
+	{
+		if (o.getObjectType() == ObjectType.MAPPINFO && o != mappInfo)
+			throw new IllegalArgumentException("Can't add more mappinfo objects");
+		if (o.getObjectType() == ObjectType.INFOBOX && o != infoBox)
+			throw new IllegalArgumentException("Can't add more infobox objects");
+		if(o.getObjectType() == ObjectType.BIOPAX && biopax != null && o != biopax) {
+			throw new IllegalArgumentException("Can't add more biopax objects");
+		}
+		if (o.getParent() == this) return; // trying to re-add the same object
+		if (o.getParent() != null) { o.getParent().remove(o); }
+		dataObjects.add(o);
+		o.addListener(this);
+		o.setParent(this);
+		fireObjectModifiedEvent(new PathwayEvent(o, PathwayEvent.ADDED));
+	}
+	
+	/**
+	 * removes object
+	 * sets parent of object to null
+	 * fires PathwayEvent.DELETED event <i>before</i> removal of the object
+	 *  
+	 * @param o the object to remove
+	 */
+	public void remove (PathwayElement o)
+	{
+		if (o.getObjectType() == ObjectType.MAPPINFO)
+			throw new IllegalArgumentException("Can't remove mappinfo object!");
+		if (o.getObjectType() == ObjectType.INFOBOX)
+			throw new IllegalArgumentException("Can't remove infobox object!");
+		fireObjectModifiedEvent(new PathwayEvent(o, PathwayEvent.DELETED));
+		o.removeListener(this);
+		dataObjects.remove(o);		
+		o.setParent(null);
+	}
+
+	/**
+	 * Stores references of line endpoints to other objects
+	 */
+	private HashMap<String, List<GraphRefContainer>> graphRefs = new HashMap<String, List<GraphRefContainer>>();
+	private Set<String> ids = new HashSet<String>();
+	
+	public void addGraphRef (String id, GraphRefContainer target)
+	{
+		if (graphRefs.containsKey(id))
+		{
+			List<GraphRefContainer> l = graphRefs.get(id);
+			l.add(target);
+		}
+		else
+		{
+			List<GraphRefContainer> l = new ArrayList<GraphRefContainer>();
+			l.add(target);		
+			graphRefs.put(id, l);
+		}
+	}
+	
+	private HashMap<String, Set<PathwayElement>> groupRefs = new HashMap<String, Set<PathwayElement>>();
+	
+	public void addRef (String ref, PathwayElement child)
+	{
+		if (groupRefs.containsKey(ref))
+		{
+			Set<PathwayElement> s = groupRefs.get(ref);
+			s.add(child);
+		}
+		else
+		{
+			Set<PathwayElement> s = new HashSet<PathwayElement>();
+			s.add(child);		
+			groupRefs.put(ref, s);
+		}
+	}
+	
+	public void removeRef (String id, PathwayElement child)
+	{
+		if (!groupRefs.containsKey(id)) throw new IllegalArgumentException();
+		
+		groupRefs.get(id).remove(child);
+		if (groupRefs.get(id).size() == 0)
+			groupRefs.remove(id);
+	}
+	
+	
+	/**
+	 * Remove a reference to another Id. 
+	 * @param id
+	 * @param target
+	 */
+	public void removeGraphRef (String id, GraphRefContainer target)
+	{
+		if (!graphRefs.containsKey(id)) throw new IllegalArgumentException();
+		
+		graphRefs.get(id).remove(target);
+		if (graphRefs.get(id).size() == 0)
+			graphRefs.remove(id);
+	}
+	
+	private HashMap<String, PathwayElement> groups = new HashMap<String, PathwayElement>();
+	
+	/**
+	 * Registers an id that can subsequently be used for
+	 * referrral. It is tested for uniqueness.
+	 * @param id
+	 */
+	public void addId (String id)
+	{
+		if (id == null)
+		{
+			throw new IllegalArgumentException ("unique id can't be null");
+		}
+		if (ids.contains(id))
+		{
+			throw new IllegalArgumentException ("id '" + id + "' is not unique");
+		}
+	ids.add (id);
+	
+	}
+	
+	public void addGroupId(String id, PathwayElement group) {
+		addId(id);
+		groups.put(id, group);
+	}
+	
+	public PathwayElement getGroupById(String id) {
+		return groups.get(id);
+	}
+	
+	public void removeId (String id)
+	{
+		ids.remove(id);
+	}
+	
+	/*AP20070508*/	
+	/**
+	 * Generate random ids, based on strings of hex digits (0..9 or a..f)
+	 * Ids are unique across both graphIds and groupIds per pathway
+	 * @return an Id unique for this pathway
+	 */
+	public String getUniqueId ()
+	{
+		String result;
+		Random rn = new Random();
+		int mod = 0x600; // 3 hex letters
+		int min = 0xa00; // has to start with a letter
+		// in case this map is getting big, do more hex letters
+		if ((ids.size()) > 1000) 
+		{
+			mod = 0x60000;
+			min = 0xa0000;
+		}
+				
+		do
+		{
+			result = Integer.toHexString(Math.abs(rn.nextInt()) % mod + min);
+		}
+		while (ids.contains(result));
+		
+		return result;
+	}
+	
+	/**
+	 * Returns all lines that refer to an object with a particular graphId.
+	 */
+	public List<GraphRefContainer> getReferringObjects (String id)
+	{
+		return graphRefs.get(id);
+	}
+	
+	private File sourceFile = null;
+	
+	/**
+	 * Gets the xml file containing the Gpml/mapp pathway currently displayed
+	 * @return current xml file
+	 */
+	public File getSourceFile () { return sourceFile; }
+	private void setSourceFile (File file) { sourceFile = file; }
+
+	/**
+	 * Contructor for this class, creates a new gpml document
+	 */
+	public Pathway() 
+	{
+		mappInfo = new PathwayElement(ObjectType.MAPPINFO);
+		this.add (mappInfo);
+		infoBox = new PathwayElement(ObjectType.INFOBOX);
+		this.add (infoBox);
+	}
+	
+	static final double M_INITIAL_BOARD_WIDTH = 18000;
+	static final double M_INITIAL_BOARD_HEIGHT = 12000;
+	
+	/*
+	 * Call when making a new mapp.
+	 */	
+	public void initMappInfo()
+	{
+		mappInfo.setMBoardWidth(M_INITIAL_BOARD_WIDTH);
+		mappInfo.setMBoardHeight(M_INITIAL_BOARD_HEIGHT);
+		mappInfo.setWindowWidth(M_INITIAL_BOARD_WIDTH);
+		mappInfo.setWindowHeight(M_INITIAL_BOARD_HEIGHT);
+		String dateString = new SimpleDateFormat("yyyyMMdd").format(new Date());
+		mappInfo.setVersion(dateString);
+		mappInfo.setMapInfoName("New Pathway");
+	}
+
+	/**
+	 * validates a JDOM document against the xml-schema definition specified by 'xsdFile'
+	 * @param doc the document to validate
+	 */
+	public static void validateDocument(Document doc) throws ConverterException
+	{	
+		ClassLoader cl = Pathway.class.getClassLoader();
+		InputStream is = cl.getResourceAsStream(xsdFile);
+		if(is != null) {	
+			Schema schema;
+			try {
+				SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
+				StreamSource ss = new StreamSource (is);
+				schema = factory.newSchema(ss);
+				ValidatorHandler vh =  schema.newValidatorHandler();
+				SAXOutputter so = new SAXOutputter(vh);
+				so.output(doc);
+				// If no errors occur, the file is valid according to the gpml xml schema definition
+				//TODO: open dialog to report error
+				System.out.println("Document is valid according to the xml schema definition '" + 
+						xsdFile.toString() + "'");
+			} catch (SAXException se) {
+				System.out.println("Could not parse the xml-schema definition"); se.printStackTrace();
+				throw new ConverterException (se);
+			} catch (JDOMException je) {
+				System.out.println("Document is invalid according to the xml-schema definition!: " + 
+								   je.getMessage()); je.printStackTrace();
+				XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
+				
+				System.out.println("The invalid XML code:\n" + xmlcode.outputString(doc));
+				throw new ConverterException (je);
+			}
+		} else {
+			System.out.println("Document is not validated because the xml schema definition '" + 
+					xsdFile + "' could not be found in classpath");
+			throw new ConverterException ("Document is not validated because the xml schema definition '" + 
+					xsdFile + "' could not be found in classpath");
+		}
+	}
+		
+	/**
+	 * Writes the JDOM document to the file specified
+	 * @param file	the file to which the JDOM document should be saved
+	 * @param validate if true, validate the dom structure before writing to file. If there is a validation error, 
+	 * 		or the xsd is not in the classpath, an exception will be thrown. 
+	 */
+	public void writeToXml(File file, boolean validate) throws ConverterException 
+	{
+		Document doc = GpmlFormat.createJdom(this);
+		
+		//Validate the JDOM document
+		if (validate) validateDocument(doc);
+		//			Get the XML code
+		XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
+		Format f = xmlcode.getFormat();
+		f.setEncoding("ISO-8859-1");
+		f.setTextMode(Format.TextMode.PRESERVE);
+		xmlcode.setFormat(f);
+		
+		//Open a filewriter
+		try
+		{
+			FileWriter writer = new FileWriter(file);
+			//Send XML code to the filewriter
+			xmlcode.output(doc, writer);
+			setSourceFile (file);
+		}
+		catch (IOException ie)
+		{
+			throw new ConverterException(ie);
+		}
+	}
+	
+	public void readFromXml(File file, boolean validate) throws ConverterException
+	{
+		// Start XML processing
+		System.out.println("Start reading the XML file: " + file);
+		SAXBuilder builder  = new SAXBuilder(false); // no validation when reading the xml file
+		// try to read the file; if an error occurs, catch the exception and print feedback
+		try
+		{
+			// build JDOM tree
+			Document doc = builder.build(file);
+
+			if (validate) validateDocument(doc);
+			
+			// Copy the pathway information to a VPathway
+			Element root = doc.getRootElement();
+			
+			GpmlFormat.mapElement(root, this); // MappInfo
+			
+			// Iterate over direct children of the root element
+			Iterator it = root.getChildren().iterator();
+			while (it.hasNext()) {
+				GpmlFormat.mapElement((Element)it.next(), this);
+			}
+			
+			setSourceFile (file);
+		}
+		catch(JDOMParseException pe) 
+		{
+			 throw new ConverterException (pe);
+		}
+		catch(JDOMException e)
+		{
+			throw new ConverterException (e);
+		}
+		catch(IOException e)
+		{
+			throw new ConverterException (e);
+		}
+	}
+	
+	public void readFromMapp (File file) throws ConverterException
+	{
+        String inputString = file.getAbsolutePath();
+
+        MappFormat.readFromMapp (inputString, this);
+        
+        setSourceFile (file);
+	}
+	
+	public void writeToMapp (File file) throws ConverterException
+	{
+		String[] mappInfo = MappFormat.uncopyMappInfo (this);
+		List<String[]> mappObjects = MappFormat.uncopyMappObjects (this);
+		
+		MappFormat.exportMapp (file.getAbsolutePath(), mappInfo, mappObjects);
+		setSourceFile (file);
+	}
+
+	public void writeToSvg (File file) throws ConverterException
+	{
+		Document doc = SvgFormat.createJdom(this);
+		
+		//Validate the JDOM document
+//		if (validate) validateDocument(doc);
+		//			Get the XML code
+		
+		XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
+		Format f = xmlcode.getFormat();
+		f.setEncoding("ISO-8859-1");
+		f.setTextMode(Format.TextMode.PRESERVE);
+		xmlcode.setFormat(f);
+		
+		//Open a filewriter
+		try
+		{
+			FileWriter writer = new FileWriter(file);
+			//Send XML code to the filewriter
+			xmlcode.output(doc, writer);
+			setSourceFile (file);
+		}
+		catch (IOException ie)
+		{
+			throw new ConverterException(ie);
+		}
+	}
+
+	private List<PathwayListener> listeners = new ArrayList<PathwayListener>();
+	public void addListener(PathwayListener v) { listeners.add(v); }
+	public void removeListener(PathwayListener v) { listeners.remove(v); }
+	
+    /**
+	   Firing the ObjectModifiedEvent has the side effect of
+	   marking the Pathway as changed.
+	 */
+	public void fireObjectModifiedEvent(PathwayEvent e) 
+	{
+		markChanged();
+		for (PathwayListener g : listeners)
+		{
+			g.gmmlObjectModified(e);
+		}
+	}
+	
+	/**
+	 * Get the systemcodes of all genes in this pathway
+	 * @return	a list of systemcodes for every gene on the mapp
+	 */
+	public ArrayList<String> getSystemCodes()
+	{
+		ArrayList<String> systemCodes = new ArrayList<String>();
+		for(PathwayElement o : dataObjects)
+		{
+			if(o.getObjectType() == ObjectType.DATANODE)
+			{
+				systemCodes.add(o.getSystemCode());
+			}
+		}
+		return systemCodes;
+	}
+	
+	/**
+	 * register undo actions,
+	 * disabled for the moment.
+	 */
+	public void gmmlObjectModified(PathwayEvent e) 
+	{
+		switch (e.getType())
+		{
+			case PathwayEvent.MODIFIED_GENERAL:
+			case PathwayEvent.MODIFIED_SHAPE:
+				break;
+			case PathwayEvent.ADDED:
+				break;
+			case PathwayEvent.DELETED:
+				break;
+		}
+	}
+
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Pathway.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GroupStyle.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GroupStyle.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GroupStyle.java	(revision 938)
@@ -0,0 +1,75 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public enum GroupStyle {
+	STACK("Stack"),
+	COMPLEX("Complex"),
+	BOX("Box"),
+	NONE("None");
+//	NAMEDSELECTION("NamedSelection"),
+//	METANODE("Metanode");
+	
+	
+	private static final Map<String, GroupStyle> gpmlMappings = initGpmlMappings();	
+	private String gpmlName;
+	
+	static Map<String, GroupStyle> initGpmlMappings()
+	{
+		Map<String, GroupStyle> result = new HashMap<String, GroupStyle>();
+		
+		for (GroupStyle s : GroupStyle.values())
+		{
+			result.put(s.gpmlName, s);
+		}
+		return result;
+	}
+
+	public static GroupStyle fromGpmlName (String value)
+	{
+		return gpmlMappings.get(value);
+	}
+	
+	public static String toGpmlName (GroupStyle value)
+	{
+		return value.gpmlName;
+	}
+
+	
+	private GroupStyle (String gpmlName) {
+		this.gpmlName = gpmlName;
+	}
+	
+	String getGpmlName() { return gpmlName; }
+	public String toString() { return getGpmlName(); }
+	
+	static public String[] getNames()
+	{
+		List<String> result = new ArrayList<String>();		
+		for (GroupStyle s : GroupStyle.values())
+		{
+			result.add("" + s.gpmlName);
+		}
+		String [] resultArray = new String [result.size()];
+		return result.toArray(resultArray);
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GroupStyle.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataSources.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataSources.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataSources.java	(revision 938)
@@ -0,0 +1,98 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+
+/**
+   Handles all data sources recognized by PathVisio (e.g. Ensembl, Unigene, Entrez).
+*/   
+public class DataSources 
+{
+	/**
+	   GenMAPP System Codes
+	*/
+    public final static String[] systemCodes = 
+	{ 
+	"D", "F", "G", "I", "L", "M",
+	"Q", "R", "S", "T", "U",
+	"W", "Z", "X", "En", "Em", 
+	"H", "Om", "Pd", "Pf", 
+	"Z", "Hs", "H", "C",
+	"Ag", "Il", "Sn", "Ec",
+	"Ca", "Ce", "Cp", "Nw",
+	"Ck", "Ch",
+	"O", ""
+	};
+
+	/**
+	   Full names of data sources, corresponding to the System Codes in {@link systemCodes}
+	*/
+    public final static String[] dataSources = 
+	{
+	"SGD", "FlyBase", "GenBank", "InterPro" ,"Entrez Gene", "MGI",
+	"RefSeq", "RGD", "SwissProt", "GeneOntology", "UniGene",
+	"WormBase", "ZFIN", "Affy", "Ensembl", "EMBL", 
+	"HUGO", "OMIM", "PDB", "Pfam",
+	"ZFIN", "HsGene", "HUGO", "Cint",
+	"Agilent", "Illumina", "SNP", "Ecoli",
+	"CAS", "ChEBI", "PubChem", "NuGOwiki",
+	"KEGG Compound", "HMDB",
+	"Other", ""
+	};
+    
+	/**
+	 * {@link HashMap} containing mappings from system name (as used in Gpml) to system code
+	 */
+	public static final HashMap<String,String> sysName2Code = initSysName2Code();
+
+	/**
+	 * {@link HashMap} containing mappings from system code to system name (as used in Gpml)
+	 */
+	public static final HashMap<String,String> sysCode2Name = initSysCode2Name();
+
+	/**
+	 * Initializes the {@link HashMap} containing the mappings between system name (as used in gpml)
+	 * and system code
+	 */
+	private static HashMap<String, String> initSysName2Code()
+	{
+		HashMap<String, String> sn2c = new HashMap<String,String>();
+		for(int i = 0; i < dataSources.length; i++)
+			sn2c.put(dataSources[i], systemCodes[i]);
+		return sn2c;
+	}
+	
+	/**
+	 * Initializes the {@link HashMap} containing the mappings between system code and 
+	 * system name (as used in Gpml)
+	 */
+	private static HashMap<String, String> initSysCode2Name()
+	{
+		HashMap<String, String> sn2c = new HashMap<String,String>();
+		for(int i = 0; i < systemCodes.length; i++)
+			sn2c.put(systemCodes[i], dataSources[i]);
+		return sn2c;
+	}
+
+	/**
+	   System names converted to arraylist for easy index lookup
+	*/
+	public final static List<String> lDataSources = Arrays.asList(dataSources);
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataSources.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Color.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Color.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Color.java	(revision 938)
@@ -0,0 +1,28 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+public class Color 
+{
+	public int red, green, blue;
+	public Color(int r, int g, int b) 
+	{
+		red = r;
+		green = g;
+		blue = b;
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/Color.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayEvent.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayEvent.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayEvent.java	(revision 938)
@@ -0,0 +1,48 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+public class PathwayEvent 
+{
+	public static final int MODIFIED_GENERAL = 0;
+	public static final int MODIFIED_SHAPE = 1;
+	
+	/**
+	 * Sent to listeners of Pathway when an object was deleted
+	 */
+	public static final int DELETED = 2;
+	
+	/**
+	 * Sent to listeners of Pathway when a new object was added
+	 */
+	public static final int ADDED = 3;
+	
+	public static final int PROPERTY = 4; // e.g. name change
+	public static final int WINDOW = 5;
+	
+	private PathwayElement affectedData;
+	public PathwayElement getAffectedData () { return affectedData; }
+	
+	private int type;
+	public int getType() { return type; }
+	
+	public PathwayEvent (PathwayElement object, int t)
+	{
+		affectedData = object;
+		type = t;
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayEvent.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GraphLink.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GraphLink.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GraphLink.java	(revision 938)
@@ -0,0 +1,131 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * This class only contains static methods and should not be instantiated.
+ */
+public abstract class GraphLink 
+{
+	
+	/**
+	 * All classes that have a graphId must implement this interface.
+	 * Those are PathwayElement.MPoint (i.e. points)
+	 * and PathwayElement (i.e. DataNodes, Shapes, etc).
+	 * They are needed for being refered to.
+	 * 
+	 * This interface exists so we can easily iterate through all
+	 * objects containing a graphId.
+	 */
+	public interface GraphIdContainer 
+	{
+		String getGraphId();
+		void setGraphId(String id);		
+		/** generate a unique graph Id and use that. */
+		String setGeneratedGraphId();
+		Set<GraphRefContainer> getReferences();
+		/** 
+		 * return the parent Gmmldata Object, 
+		 * needed for maintaining a consistent list of graphId's 
+		 */
+		Pathway getGmmlData();
+	}
+	
+	/**
+	 * All classes that want to refer *to* a GraphIdContainer must 
+	 * implement this interface. At this time that only goes for 
+	 * PathwayElement.MPoint.
+	 */
+	public interface GraphRefContainer 
+	{
+		String getGraphRef();
+		void setGraphRef(String ref);
+		void moveBy(double dx, double dy);
+
+		/** 
+		 * return the parent Gmmldata Object, 
+		 * needed for maintaining a consistent list of graphId's 
+		 */
+		Pathway getGmmlData();
+	}
+	
+	/**
+	 * Give an object that implements the graphId interface
+	 * a graphId, thereby possibly linking it to new objects.
+	 * 
+	 * This is a helper for classes that need to implement the GraphIdContainer interface,
+	 * to avoid duplication. 
+	 * 
+	 * @param v the graphId
+	 * @param c the object to is going to get the new graphId
+	 * @param gd the pathway model, which is maintaining a complete list of all graphId's in this pathway
+	 */
+	protected static void setGraphId(String v, GraphIdContainer c, PathwayElement gd) 
+	{
+		Pathway data = gd.getParent();
+		String graphId = c.getGraphId();
+		if (graphId == null || !graphId.equals(v))
+		{
+			if (data != null)
+			{
+				if (graphId != null)
+				{
+					data.removeId(v);
+				}
+				if (v != null)
+				{
+					data.addId(v);
+				}
+			}
+		}
+	}
+	
+	/**
+	 * Return a list of GraphRefContainers (i.e. points) 
+	 * referring to a certain GraphId.
+	 * 
+	 * @param gid
+	 * @param gd
+	 * @return
+	 */
+	public static Set<GraphRefContainer> getReferences(GraphIdContainer gid, Pathway gd) 
+	{
+		Set<GraphRefContainer> result = 
+			new HashSet<GraphRefContainer>();
+
+		if (gd == null) return result;
+		
+		List<GraphRefContainer> reflist = gd.getReferringObjects(gid.getGraphId());
+		
+		if (reflist != null && !gid.getGraphId().equals("")) 
+		{
+			// get all referring points as a hashset, so
+			// that a line that refers to the same object twice
+			// is only treated once.
+			for (GraphRefContainer o : reflist)
+			{
+				result.add(o);
+			}
+		}
+		return result;
+	}
+}
+

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/GraphLink.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataNodeType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataNodeType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataNodeType.java	(revision 938)
@@ -0,0 +1,48 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public enum DataNodeType {
+	UNKOWN("Unknown"),
+	RNA("Rna"),
+	PROTEIN("Protein"),
+	COMPLEX("Complex"),
+	GENEPRODUCT("GeneProduct"),
+	METABOLITE("Metabolite");
+	
+	private DataNodeType (String gpmlName) {
+		this.gpmlName = gpmlName;
+	}
+	private String gpmlName;
+	
+	String getGpmlName() { return gpmlName; }
+	public String toString() { return getGpmlName(); }
+	
+	static public String[] getNames()
+	{
+		List<String> result = new ArrayList<String>();		
+		for (DataNodeType s : DataNodeType.values())
+		{
+			result.add("" + s.gpmlName);
+		}
+		String [] resultArray = new String [result.size()];
+		return result.toArray(resultArray);
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/DataNodeType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConvertType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConvertType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConvertType.java	(revision 938)
@@ -0,0 +1,109 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.math.BigDecimal;
+
+public class ConvertType
+{
+    public static int parseIntSafe (String s, int def)
+    {
+    	int result = def;
+    	try
+    	{
+    		result = Integer.parseInt(s);
+    	}
+    	catch (Exception e) {}
+    	return result;
+    }
+
+    public static double parseDoubleSafe (String s, double def)
+    {
+    	double result = def;
+    	try
+    	{
+    		result = Double.parseDouble(s);
+    	}
+    	catch (Exception e) {}
+    	return result;
+    }
+
+    public static String makeInteger (String s)
+    {
+    	double d = Double.parseDouble(s);
+        BigDecimal b = BigDecimal.valueOf((long)d);
+        return b.toString();
+    }
+
+    public static String toGmmlColor(String s)
+    {
+        int i = Integer.parseInt(s);
+        if (i == -1)
+        {
+        	return "Transparent";
+        }
+        
+        String hexstring = Integer.toHexString(i);
+
+        // pad with zeroes up to a lenght of 6.
+        while (hexstring.length() < 6)
+        {
+        	hexstring = "0" + hexstring;
+        }
+        
+        return hexstring;
+    }
+    
+    public static Color fromMappColor(String s)
+    {
+    	
+    	int i = Integer.parseInt(s);
+    	
+    	Color result = new Color(
+    			i & 0xFF,
+    			(i & 0xFF00) >> 8,
+    			(i & 0xFF0000) >> 16
+    	);
+    	
+    	return result;
+    }
+    
+    public static String toMappColor(String s)
+    {
+    
+    	if (s.equals("Transparent"))
+    	{
+    		return "-1";
+    	}
+    	else
+    	{
+			int i = Integer.parseInt(s, 16);
+			return Integer.toString(i);
+    	}
+    }
+    
+    public static String toMappColor(Color rgb, boolean fTransparent)
+    {
+    	if (fTransparent)
+    		return "-1";
+    	else
+    	{
+	    	int c = ((int)rgb.red) + ((int)rgb.green << 8) + ((int)rgb.blue << 16);
+	    	return "" + c;
+    	}
+    }
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConvertType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayListener.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayListener.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayListener.java	(revision 938)
@@ -0,0 +1,24 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.EventListener;
+
+public interface PathwayListener extends EventListener {	
+	public void gmmlObjectModified(PathwayEvent e);
+	
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayListener.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConverterException.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConverterException.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConverterException.java	(revision 938)
@@ -0,0 +1,35 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+public class ConverterException extends Exception {
+
+	private static final long serialVersionUID = 1L;
+
+	public ConverterException(String msg)
+	{
+		super(msg);
+	}
+
+	public ConverterException(Exception e)
+	{
+		super(e.getClass() + ": " + e.getMessage());
+		setStackTrace(e.getStackTrace());
+	}
+
+
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/ConverterException.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyType.java	(revision 938)
@@ -0,0 +1,137 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+
+/*
+ * PropertyType.java
+ *
+ * Created on 6 december 2006, 9:50
+ *
+ */
+
+package org.pathvisio.model;
+
+/**
+ *
+ * @author Martijn
+ */
+public enum PropertyType 
+{
+	// all
+	NOTES ("Notes", "Notes", PropertyClass.STRING),
+	COMMENT ("Comment", "Comment", PropertyClass.STRING),
+
+	// line, shape, brace, geneproduct, label
+	COLOR ("Color", "Color", PropertyClass.COLOR),
+			
+	// shape, brace, geneproduct, label
+	CENTERX ("CenterX", "Center X", PropertyClass.DOUBLE),
+	CENTERY ("CenterY", "Center Y", PropertyClass.DOUBLE),
+	WIDTH ("Width", "Width", PropertyClass.DOUBLE),
+	HEIGHT ("Height", "Height", PropertyClass.DOUBLE),
+			
+	// shape
+	TRANSPARENT ("Transparent", "Transparent", PropertyClass.BOOLEAN),
+	FILLCOLOR ("FillColor", "Fill Color", PropertyClass.COLOR),
+	SHAPETYPE ("ShapeType", "Shape Type", PropertyClass.SHAPETYPE),
+	ROTATION ("Rotation", "Rotation", PropertyClass.ANGLE),
+			
+	// line
+	STARTX ("StartX", "Start X", PropertyClass.DOUBLE), 
+	STARTY ("StartY", "Start Y", PropertyClass.DOUBLE), 
+	ENDX ("EndX", "End X", PropertyClass.DOUBLE), 
+	ENDY ("EndY", "End Y", PropertyClass.DOUBLE),
+			
+	LINETYPE ("LineType", "Line Type", PropertyClass.LINETYPE), 
+	LINESTYLE ("LineStyle", "Line Style", PropertyClass.LINESTYLE),
+			
+	// brace
+	ORIENTATION ("Orientation", "Orientation", PropertyClass.ORIENTATION),
+			
+	// gene product
+	GENEID ("GeneID", "Database Identifier", PropertyClass.DB_ID), //TODO: change tag 
+	SYSTEMCODE ("SystemCode", "Database Name", PropertyClass.DATASOURCE), 
+	XREF ("Xref", "Xref", PropertyClass.STRING), // unused 
+	BACKPAGEHEAD ("BackpageHead", "Backpage head", PropertyClass.STRING), 
+	TYPE ("Type", "Type", PropertyClass.GENETYPE),
+			
+	// label
+	TEXTLABEL ("TextLabel", "Text Label", PropertyClass.STRING), 
+	FONTNAME ("FontName", "Font Name", PropertyClass.FONT),
+	FONTWEIGHT ("FontWeight", "Bold", PropertyClass.BOOLEAN), 
+	FONTSTYLE ("FontStyle", "Italic", PropertyClass.BOOLEAN), 
+	FONTSIZE ("FontSize", "Font Size", PropertyClass.DOUBLE),
+
+	// mappinfo
+	MAPINFONAME ("MapInfoName", "Map Info Name", PropertyClass.STRING),
+	ORGANISM ("Organism", "Organism", PropertyClass.ORGANISM), 
+	DATA_SOURCE ("Data-Source", "Data-Source", PropertyClass.STRING),
+	VERSION ("Version", "Version", PropertyClass.STRING), 
+	AUTHOR ("Author", "Author", PropertyClass.STRING), 
+	MAINTAINED_BY ("Maintained-By", "Maintainer", PropertyClass.STRING),
+	EMAIL ("Email", "Email", PropertyClass.STRING), 
+	LAST_MODIFIED ("Last-Modified", "Last Modified", PropertyClass.STRING), 
+	AVAILABILITY ("Availability", "Availability", PropertyClass.STRING),
+	BOARDWIDTH ("BoardWidth", "Board Width", PropertyClass.DOUBLE), 
+	BOARDHEIGHT ("BoardHeight", "Board Height", PropertyClass.DOUBLE), 
+	WINDOWWIDTH ("WindowWidth", "Window Width", PropertyClass.DOUBLE, true), 
+	WINDOWHEIGHT ("WindowHeight", "Window Height", PropertyClass.DOUBLE, true),
+
+	// other
+	GRAPHID ("GraphId", "GraphId", PropertyClass.STRING), 
+	STARTGRAPHREF ("StartGraphRef", "StartGraphRef", PropertyClass.STRING), 
+	ENDGRAPHREF ("EndGraphRef", "EndGraphRef", PropertyClass.STRING),
+	GROUPID ("GroupId", "GroupId", PropertyClass.STRING),
+	GROUPREF ("GroupRef", "GroupRef", PropertyClass.STRING),
+	BIOPAXREF( "BiopaxRef", "BiopaxRef", PropertyClass.BIOPAXREF);
+
+	private String tag, desc;
+	private PropertyClass type;
+	private boolean hidden;
+	
+	PropertyType (String _tag, String _desc, PropertyClass _type, boolean _hidden)
+	{
+		tag = _tag;
+		type = _type;
+		desc = _desc;
+		hidden = _hidden;
+	}
+
+	PropertyType (String _tag, String _desc, PropertyClass _type)
+	{
+		this(_tag, _desc, _type, false);
+	}
+
+	public String tag()
+	{
+		return tag;
+	}
+	
+	public String desc()
+	{
+		return desc;
+	}
+	
+	public PropertyClass type()
+	{
+		return type;
+	}	
+
+	public boolean hidden()
+	{
+		return hidden;
+	}	
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PropertyType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayElement.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayElement.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayElement.java	(revision 938)
@@ -0,0 +1,1420 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.jdom.Document;
+import org.pathvisio.model.GraphLink.GraphIdContainer;
+import org.pathvisio.model.GraphLink.GraphRefContainer;
+
+/**
+ * PathwayElement is responsible for maintaining the data
+ * for all the individual objects that can appear on a pwy
+ * (Lines, GeneProducts, Shapes, etc.) 
+ * 
+ * GmmlDataObjects
+ * contain a union of all possible fields (e.g it has
+ * both start and endpoints for lines, and label text for labels)
+ * Each field can be accessed through a specific accessor, or
+ * through getProperty() and setProperty()
+ * 
+ * most fields cannot be set to null. Notable exceptions are
+ * graphId, startGraphRef and endGraphRef.
+ * 
+ * @author Martijn
+ *
+ */
+public class PathwayElement implements GraphIdContainer
+{	
+
+	public class Comment implements Cloneable
+	{
+		Comment (String _comment, String _source)
+		{
+			source = _source;
+			comment = _comment;
+		}
+		
+		public Object clone() throws CloneNotSupportedException
+		{
+			return super.clone();
+		}
+		
+		public String source;
+		public String comment;
+	}
+	
+	public class MPoint implements Cloneable, GraphIdContainer, GraphRefContainer
+	{
+		private double x;
+		private double y;
+		
+		private String graphRef;
+		private String graphId;
+				
+		MPoint (double _x, double _y) { x = _x; y = _y; }
+		MPoint (MPoint p) 
+		{
+			x = p.x;
+			y = p.y;
+			if(p.graphRef != null) graphRef = new String(p.graphRef);
+			if(p.graphId != null) graphId = new String(p.graphId);
+		}
+		
+		public void moveBy(double dx, double dy) 
+		{
+			x += dx;
+			y += dy;
+			fireObjectModifiedEvent(new PathwayEvent(PathwayElement.this, PathwayEvent.MODIFIED_GENERAL));
+		}
+		
+		public void moveTo(MPoint p) 
+		{
+			x = p.x;
+			y = p.y;
+			fireObjectModifiedEvent(new PathwayEvent(PathwayElement.this, PathwayEvent.MODIFIED_GENERAL));
+		}
+		
+		public void setX(double nx) 
+		{
+			if(nx != x) moveBy(nx - x, 0);
+		}
+		
+		public void setY(double ny) 
+		{
+			if(ny != y) moveBy(0, ny - y);
+		}
+		
+		public double getX() { return x; }
+		public double getY() { return y; }
+				
+		public String getGraphId() 
+		{ 
+			return graphId;
+		}
+		
+		public String setGeneratedGraphId() 
+		{
+			setGraphId(parent.getUniqueId());
+			return graphId;
+		}
+		
+		public void setGraphId (String v) { 
+			GraphLink.setGraphId(v, this, PathwayElement.this);
+			graphId = v;
+			fireObjectModifiedEvent(new PathwayEvent (PathwayElement.this, PathwayEvent.MODIFIED_GENERAL));
+		}
+					
+		public String getGraphRef() { return graphRef; }
+
+		/**
+		 * Set a reference to another object with a graphId.
+		 * If a parent is set, this will automatically deregister
+		 * the previously held reference and register the new reference
+		 * as necessary
+		 * @param v reference to set.
+		 */
+		public void setGraphRef (String v) 
+		{ 
+			if (graphRef != v)
+			{
+				if (parent != null)
+				{
+					if (graphRef != null)
+					{
+						parent.removeGraphRef(graphRef, this);
+					}
+					if (v != null)
+					{
+						parent.addGraphRef(v, this);
+					}
+				}
+				graphRef = v;
+				//fireObjectModifiedEvent(new PathwayEvent (PathwayElement.this, PathwayEvent.MODIFIED_GENERAL));
+			}
+		}
+
+		public Set<MPoint> getEqualPoints() 
+		{
+			Set<MPoint> links = new HashSet<MPoint>();
+			for(PathwayElement o : parent.getDataObjects()) 
+			{
+				if(o != PathwayElement.this && o.objectType == ObjectType.LINE) 
+				{
+					for(MPoint p : o.getMPoints()) 
+					{
+						if(x == p.x && y == p.y) links.add(p);
+					}
+				}
+			}
+			links.add(this); //equal to itself
+			return links;
+		}
+		
+		public Object clone() throws CloneNotSupportedException
+		{
+			MPoint p = (MPoint)super.clone();
+			if(graphId != null) p.graphId = new String(graphId);
+			if(graphRef != null) p.graphRef = new String(graphRef);
+			return p;
+		}
+
+		public Set<GraphRefContainer> getReferences() 
+		{
+			return GraphLink.getReferences(this, parent);
+		}
+		
+		public Pathway getGmmlData() 
+		{			
+			return parent;
+		}
+		
+		public PathwayElement getParent() {
+			return PathwayElement.this;
+		}
+
+	}
+	
+	private static final int M_INITIAL_SHAPE_SIZE = 30*15; // initial Radius for rect and oval
+	private static final int M_INITIAL_BRACE_HEIGHT = 15*15;
+	private static final int M_INITIAL_BRACE_WIDTH = 60*15; 
+	private static final int M_INITIAL_GENEPRODUCT_WIDTH = 80*15;
+	private static final int M_INITIAL_GENEPRODUCT_HEIGHT = 20*15;
+	
+	/**
+	 * The required parameter objectType ensures only
+	 * objects with a valid type can be created.
+	 * 
+	 * @param ot Type of object, one of the ObjectType.* fields
+	 */
+	public PathwayElement (int ot)
+	{
+		if (ot < ObjectType.MIN_VALID || ot > ObjectType.MAX_VALID)
+		{
+			throw new IllegalArgumentException("Trying to set objectType to " + ot);
+		}
+		objectType = ot;
+	}
+	
+	/**
+	 * Parent of this object: may be null (for example,
+	 * when object is in clipboard)
+	 */
+	private Pathway parent = null;
+	public Pathway getParent() { return parent; }
+	
+	/**
+	 * Set parent. Do not use this method directly!
+	 * parent is set automatically when using Pathway.add/remove
+	 * 
+	 * This method takes care of graphref reference accounting.
+	 * @param v the parent
+	 */
+	public void setParent(Pathway v)
+	{
+		if (v != parent)
+		{
+			if (parent != null)
+			{
+				for(MPoint p : mPoints) {
+					if (p.getGraphRef() != null)
+					{
+						parent.removeGraphRef(p.getGraphRef(), p);
+					}
+				}
+				if (graphId != null)
+				{
+					parent.removeId(graphId);
+				}
+			}			
+			parent = v;
+			if (v != null)
+			{
+				for(MPoint p : mPoints) {
+					if(p.getGraphRef() != null) {
+						v.addGraphRef(p.getGraphRef(), p);
+					}
+				}
+				if (graphId != null)
+				{
+					parent.addId(graphId);
+				}
+			}
+		}
+	}
+		
+	public List<PropertyType> getAttributes()
+	{
+		List<PropertyType> result = Arrays.asList(new PropertyType[] { 
+				PropertyType.NOTES, 
+				PropertyType.COMMENT
+		});
+		switch (getObjectType())
+		{
+			case ObjectType.MAPPINFO:
+				result = ( Arrays.asList (new PropertyType[] {
+						PropertyType.NOTES, 
+						PropertyType.COMMENT,
+						PropertyType.MAPINFONAME,
+						PropertyType.ORGANISM,
+						PropertyType.DATA_SOURCE,
+						PropertyType.VERSION,
+						PropertyType.AUTHOR,
+						PropertyType.MAINTAINED_BY,
+						PropertyType.EMAIL,
+						PropertyType.LAST_MODIFIED,
+						PropertyType.AVAILABILITY,
+						PropertyType.BOARDWIDTH,
+						PropertyType.BOARDHEIGHT,
+						PropertyType.WINDOWWIDTH,
+						PropertyType.WINDOWHEIGHT
+				}));
+				break;
+			case ObjectType.DATANODE:
+				result = ( Arrays.asList (new PropertyType[] {
+						PropertyType.NOTES,
+						PropertyType.COMMENT,
+						PropertyType.CENTERX,
+						PropertyType.CENTERY,
+						PropertyType.WIDTH,
+						PropertyType.HEIGHT,
+						PropertyType.COLOR,
+						PropertyType.GENEID,
+						PropertyType.SYSTEMCODE,
+						PropertyType.TEXTLABEL,
+						//PropertyType.XREF,
+						PropertyType.BACKPAGEHEAD,
+						PropertyType.TYPE,
+						PropertyType.GRAPHID,
+						PropertyType.GROUPREF,
+						PropertyType.BIOPAXREF
+				}));
+				break;
+			case ObjectType.SHAPE:
+				result = ( Arrays.asList(new PropertyType[] {
+						PropertyType.NOTES,
+						PropertyType.COMMENT,
+						PropertyType.CENTERX,
+						PropertyType.CENTERY,
+						PropertyType.WIDTH,
+						PropertyType.HEIGHT,
+						PropertyType.COLOR,
+						PropertyType.FILLCOLOR,
+						PropertyType.SHAPETYPE,
+						PropertyType.ROTATION,
+						PropertyType.TRANSPARENT,
+						PropertyType.GRAPHID,
+						PropertyType.GROUPREF,
+						PropertyType.BIOPAXREF
+				}));
+				break;
+			case ObjectType.LINE:
+				result = ( Arrays.asList(new PropertyType[] {
+						PropertyType.NOTES,
+						PropertyType.COMMENT,
+						PropertyType.COLOR,
+						PropertyType.STARTX,
+						PropertyType.STARTY,
+						PropertyType.ENDX,
+						PropertyType.ENDY,
+						PropertyType.LINETYPE,
+						PropertyType.LINESTYLE,
+						PropertyType.STARTGRAPHREF,
+						PropertyType.ENDGRAPHREF,
+						PropertyType.GRAPHID,
+						PropertyType.GROUPREF,
+						PropertyType.BIOPAXREF
+				}));
+				break;
+			case ObjectType.LABEL:
+				result = ( Arrays.asList(new PropertyType[] {
+						PropertyType.NOTES,
+						PropertyType.COMMENT,
+						PropertyType.XREF,
+						PropertyType.CENTERX,
+						PropertyType.CENTERY,
+						PropertyType.WIDTH,
+						PropertyType.HEIGHT,
+						PropertyType.COLOR,
+						PropertyType.TEXTLABEL,
+						PropertyType.FONTNAME,
+						PropertyType.FONTWEIGHT,
+						PropertyType.FONTSTYLE,
+						PropertyType.FONTSIZE,
+						PropertyType.GRAPHID,
+						PropertyType.GROUPREF,
+						PropertyType.BIOPAXREF
+				}));
+				break;
+			case ObjectType.GROUP:
+				result = ( Arrays.asList(new PropertyType[] {
+						PropertyType.GROUPID,
+						PropertyType.GROUPREF,
+						PropertyType.TEXTLABEL,
+						PropertyType.BIOPAXREF
+				}));
+				break;
+				
+		}
+		return result;
+	}
+	
+	/**
+	 * This works so that
+	 * o.setNotes(x) is the equivalent of
+	 * o.setProperty("Notes", x);
+	 * 
+	 * Value may be null in some cases, e.g. graphRef
+	 * 
+	 * @param key
+	 * @param value
+	 */
+	public void setProperty(PropertyType key, Object value)
+	{
+		switch (key)
+		{		
+			case COMMENT: setComment 		((String) value); break;
+			case COLOR: setColor 		((Color)    value); break;
+				
+			case CENTERX: setMCenterX 		((Double) value); break;
+			case CENTERY: setMCenterY 		((Double) value); break;
+			case WIDTH: setMWidth		((Double) value); break;
+			case HEIGHT: setMHeight		((Double) value); break;
+			
+			case FILLCOLOR: setFillColor	((Color)	  value); break;
+			case SHAPETYPE: setShapeType	(ShapeType.values()[(Integer)value]); break;
+			case ROTATION: setRotation		((Double) value); break;
+				
+			case STARTX: setMStartX 		((Double) value); break;
+			case STARTY: setMStartY 		((Double) value); break;
+			case ENDX: setMEndX 		((Double) value); break;
+			case ENDY: setMEndY 		((Double) value); break;
+			case LINETYPE: setLineType		(LineType.values()[(Integer)value]); break;
+			case LINESTYLE: setLineStyle	((Integer)value); break;
+				
+			case ORIENTATION: setOrientation	((Integer)value); break;
+	
+			case GENEID: setGeneID ((String) value); break;
+			case SYSTEMCODE: setDataSource		((String) value); break;
+			case XREF: setXref			((String)  value); break;
+			case BACKPAGEHEAD: setBackpageHead	((String)value); break;
+			case TYPE: setDataNodeType ((String)  value); break;
+			
+			case TEXTLABEL: setTextLabel 	((String) value); break;
+			case FONTNAME: setFontName		((String)  value); break;
+			case FONTWEIGHT: setBold 		((Boolean) value); break;
+			case FONTSTYLE: setItalic 		((Boolean) value); break;
+			case FONTSIZE: setMFontSize		((Double)  value); break;
+
+			case MAPINFONAME: setMapInfoName((String) value); break;
+			case ORGANISM: setOrganism ((String) value); break;
+			case DATA_SOURCE: setDataSource ((String) value); break;
+			case VERSION: setVersion ((String) value); break;
+			case AUTHOR: setAuthor ((String) value); break;
+			case MAINTAINED_BY: setMaintainer((String) value); break;
+			case EMAIL: setEmail ((String) value); break;
+			case LAST_MODIFIED: setLastModified ((String)value); break;
+			case AVAILABILITY: setCopyright ((String)value); break;
+			case BOARDWIDTH: setMBoardWidth ((Double)value); break;
+			case BOARDHEIGHT: setMBoardHeight ((Double)value); break;
+			case WINDOWWIDTH: setWindowWidth ((Double)value); break;
+			case WINDOWHEIGHT: setWindowHeight ((Double)value); break;
+			
+			case GRAPHID: setGraphId ((String)value); break;
+			case STARTGRAPHREF: setStartGraphRef ((String)value); break;
+			case ENDGRAPHREF: setEndGraphRef ((String)value); break;
+			case GROUPID: setGroupId ((String)value); break;
+			case GROUPREF: setGroupRef ((String)value); break;
+			case TRANSPARENT: setTransparent ((Boolean)value); break;
+			
+			case BIOPAXREF: setBiopaxRef((String)value); break;
+		}
+	}
+	
+	public Object getProperty(PropertyType x)
+	{		
+		Object result = null;
+		switch (x)
+		{
+			case COMMENT: result = getComment(); break;
+			case COLOR: result = getColor(); break;
+			
+			case CENTERX: result = getMCenterX(); break;
+			case CENTERY: result = getMCenterY(); break;
+			case WIDTH: result = getMWidth(); break;
+			case HEIGHT: result = getMHeight(); break;
+			
+			case FILLCOLOR: result = getFillColor(); break;
+			case SHAPETYPE: result = getShapeType(); break;
+			case ROTATION: result = getRotation(); break;
+			
+			case STARTX: result = getMStartX(); break;
+			case STARTY: result = getMStartY(); break;
+			case ENDX: result = getMEndX(); break;
+			case ENDY: result = getMEndY(); break;
+			case LINETYPE: result = getLineType(); break;
+			case LINESTYLE: result = getLineStyle(); break;
+			
+			case ORIENTATION: result = getOrientation(); break;
+						
+			case GENEID: result = getGeneID(); break;
+			case SYSTEMCODE: result = getDataSource(); break;
+			case XREF: result = getXref(); break;
+			case BACKPAGEHEAD: result = getBackpageHead(); break;
+			case TYPE: result = getDataNodeType(); break;
+			
+			case TEXTLABEL: result = getTextLabel(); break;	
+			case FONTNAME: result = getFontName(); break;
+			case FONTWEIGHT: result = isBold(); break;
+			case FONTSTYLE: result = isItalic(); break;
+			case FONTSIZE: result = getMFontSize(); break;
+
+			case MAPINFONAME: result = getMapInfoName(); break;
+			case ORGANISM: result = getOrganism (); break;
+			case DATA_SOURCE: result = getDataSource (); break;
+			case VERSION: result = getVersion (); break;
+			case AUTHOR: result = getAuthor (); break;
+			case MAINTAINED_BY: result = getMaintainer(); break;
+			case EMAIL: result = getEmail (); break;
+			case LAST_MODIFIED: result = getLastModified (); break;
+			case AVAILABILITY: result = getCopyright (); break;
+			case BOARDWIDTH: result = getMBoardWidth (); break;
+			case BOARDHEIGHT: result = getMBoardHeight (); break;
+			case WINDOWWIDTH: result = getWindowWidth (); break;
+			case WINDOWHEIGHT: result = getWindowHeight (); break;
+
+			case GRAPHID: result = getGraphId (); break;
+			case STARTGRAPHREF: result = getStartGraphRef (); break;
+			case ENDGRAPHREF: result = getEndGraphRef (); break;
+			case GROUPID: result = getGroupId (); break;
+			case GROUPREF: result = getGroupRef (); break;
+			case TRANSPARENT: result = isTransparent (); break;
+			
+			case BIOPAXREF: result = getBiopaxRef(); break;
+		}
+
+		return result;
+	}
+	
+	/**
+	 * Note: doesn't change parent, only fields
+	 * 
+	 * Used by UndoAction.
+	 * @param src
+	 */
+	public void copyValuesFrom(PathwayElement src)
+	{
+		author = src.author;
+		copyright = src.copyright;
+		backpageHead = src.backpageHead;
+		mBoardHeight = src.mBoardHeight;
+		mBoardWidth = src.mBoardWidth;
+		mCenterx = src.mCenterx;
+		mCentery = src.mCentery;
+		color = src.color;
+		fillColor = src.fillColor;
+		dataSource = src.dataSource;
+		email = src.email;
+		fBold = src.fBold;
+		fItalic = src.fItalic;
+		fontName = src.fontName;
+		mFontSize = src.mFontSize;
+		fStrikethru = src.fStrikethru;
+		fTransparent = src.fTransparent;
+		fUnderline = src.fUnderline;
+		setGeneID = src.setGeneID;
+		dataNodeType = src.dataNodeType;
+		mHeight = src.mHeight;
+		textLabel = src.textLabel;
+		lastModified = src.lastModified;
+		lineStyle = src.lineStyle;
+		lineType = src.lineType;
+		maintainer = src.maintainer;
+		mapInfoDataSource = src.mapInfoDataSource;
+		mapInfoName = src.mapInfoName;
+		organism = src.organism;
+		rotation = src.rotation;
+		shapeType = src.shapeType;
+		mPoints = new ArrayList<MPoint>();
+		for (MPoint p : src.mPoints)
+		{
+				mPoints.add(new MPoint(p));
+		}
+		comments = new ArrayList<Comment>();
+		for (Comment c : src.comments)
+		{
+			try
+			{
+				comments.add((Comment)c.clone());
+			}
+			catch (CloneNotSupportedException e) { /* not going to happen */ }
+		}
+		version = src.version;
+		mWidth = src.mWidth;
+		windowHeight = src.windowHeight;
+		windowWidth = src.windowWidth;
+		xref = src.xref;
+		graphId = src.graphId;	
+		groupId = src.groupId;	
+		groupRef = src.groupRef;	
+		fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+	}
+	
+	/**
+	 * Copy Object. The object will not
+	 * be part of the same Pathway object, it's parent
+	 * will be set to null.
+	 * 
+	 * No events will be sent to the parent of the original.
+	 */
+	public PathwayElement copy()
+	{
+		PathwayElement result = new PathwayElement(objectType);
+		result.copyValuesFrom(this);
+		result.parent = null;
+		return result;
+	}
+
+	protected int objectType = ObjectType.DATANODE;
+	public int getObjectType() { return objectType; }
+	
+	/**
+	 * in the future, change of objecttype won't be possible at all.
+	 * Objecttype should be set through constructor
+	 * 
+	 * @deprecated
+	 * @param v
+	 */
+	public void setObjectType(int v) 
+	{ 
+		if (objectType != v)
+		{
+			objectType = v;		
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	// only for lines:	
+	private MPoint[] defaultPoints = {new MPoint(0,0), new MPoint(0,0)};
+	private List<MPoint> mPoints = Arrays.asList(defaultPoints);
+	
+	public MPoint getMStart() { return mPoints.get(0); }
+	public void setMStart(MPoint p) {
+		getMStart().moveTo(p);
+	}
+	
+	public MPoint getMEnd() { return mPoints.get(mPoints.size() - 1); }
+	public void setMEnd(MPoint p) {
+		getMEnd().moveTo(p);
+	}
+	
+	public List<MPoint> getMPoints() { return mPoints; }
+	
+	public double getMStartX() 
+	{ 
+		return getMStart().x; 
+	}
+	
+	public void setMStartX(double v) 
+	{ 
+		getMStart().setX(v);
+	}
+	
+	public double getMStartY() { return getMStart().y; }
+	public void setMStartY(double v) 
+	{ 
+		getMStart().setY(v);
+	}
+	
+	public double getMEndX() { return mPoints.get(mPoints.size()-1).x; }
+	public void setMEndX(double v) 
+	{
+		getMEnd().setX(v);
+	}
+	
+	public double getMEndY() { return getMEnd().y; }
+	public void setMEndY(double v) 
+	{
+		getMEnd().setY(v);
+	}
+	
+	protected int lineStyle = LineStyle.SOLID;
+	public int getLineStyle() { return lineStyle; }
+	public void setLineStyle(int value) 
+	{ 
+		if (lineStyle != value)
+		{
+			lineStyle = value; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	
+	/** @deprecated Line Type should be stored as head, for start and end */
+	//TODO: no alternative yet
+	protected LineType lineType = LineType.LINE;
+	/** @deprecated Line Type should be stored as head, for start and end */
+	public LineType getLineType() { return lineType; }
+	/** @deprecated Line Type should be stored as head, for start and end */
+	public void setLineType(LineType value) 
+	{
+		if (lineType != value)
+		{
+			lineType = value; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL)); 
+		}
+	}
+			
+	protected Color color = new Color(0, 0, 0);	
+	public Color getColor() { return color; }
+	public void setColor(Color v) 
+	{
+		if (v == null) throw new IllegalArgumentException();
+		if (color != v)
+		{
+			color = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL)); 
+		}
+	}
+
+	/** 
+	 * fillcolor can't be null!
+	 */
+	protected Color fillColor = new Color (0, 0, 0);	
+	public Color getFillColor() { return fillColor; }
+	public void setFillColor(Color v) 
+	{
+		if (v == null) throw new IllegalArgumentException();
+		if (fillColor != v)
+		{
+			fillColor = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL)); 
+		}
+	}
+
+	protected boolean fTransparent = true;
+	public boolean isTransparent() { return fTransparent; }
+	public void setTransparent(boolean v) 
+	{
+		if (fTransparent != v)
+		{
+			fTransparent = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	// general
+	List<Comment> comments = new ArrayList<Comment>();
+	
+	public List<Comment> getComments()
+	{
+		return comments;
+	}
+	
+	public void setComments(List<Comment> value)
+	{
+		if (comments != value)
+		{
+			comments = value; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));		
+		}
+	}
+	
+	public void addComment(String comment, String source)
+	{
+		comments.add(new Comment(comment, source));
+		fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));		
+	}
+	
+	/**
+	 * Finds the first comment with a specific source
+	 */
+	public String findComment (String source)
+	{
+		for (Comment c : comments)
+		{
+			if (source.equals(c.source))
+			{
+				return c.comment;
+			}
+		}
+		return null;
+	}
+	
+	/** @deprecated */
+	protected String comment = "";
+	/** @deprecated */
+	public String getComment() { return comment; }
+	/** @deprecated */
+	public void setComment (String v) 
+	{
+		if (v == null) throw new IllegalArgumentException();
+		if (comment != v)
+		{
+			comment = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+		
+	protected String xref = null;
+	public String getXref() { return xref; }
+	public void setXref(String v) 
+	{ 
+		if (xref != v)
+		{
+			xref = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected String setGeneID = "";
+	public String getGeneID() { return setGeneID; }
+	public void setGeneID(String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (setGeneID != v)
+		{
+			setGeneID = v;		
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	} 
+	
+	protected String backpageHead = null;
+	public String getBackpageHead() { return backpageHead; }
+	public void setBackpageHead(String v) 
+	{ 
+		if (backpageHead != v)
+		{
+			backpageHead = v;		
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected String dataNodeType = "Unknown";
+	public String getDataNodeType() { return dataNodeType; }
+	public void setDataNodeType(String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (dataNodeType != v)
+		{
+			dataNodeType = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL)); 
+		}
+	}
+	
+	/** 
+	 * The pathway datasource
+	 */
+	protected String dataSource = "";
+	public String getDataSource() { return dataSource; }
+	public void setDataSource(String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (dataSource != v)
+		{
+			dataSource = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	/**
+	 * SystemCode is a one- or two-letter abbreviation of datasource,
+	 * used in the MappFormat but also in databases.
+	 */
+	public String getSystemCode()
+	{
+		String systemCode = "";
+		if(DataSources.sysName2Code.containsKey(dataSource)) 
+			systemCode = DataSources.sysName2Code.get(dataSource);
+		return systemCode;
+	}
+	 
+	protected double mCenterx = 0;
+	public double getMCenterX() { return mCenterx; }
+	public void setMCenterX(double v) 
+	{
+		if (mCenterx != v)
+		{
+			mCenterx = v; 
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL)); 
+		}
+	}
+	
+	protected double mCentery = 0;
+	public double getMCenterY() { return mCentery; }
+	public void setMCenterY(double v) 
+	{ 
+		if (mCentery != v)
+		{
+			mCentery = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected double mWidth = 0;
+	public double getMWidth() { return mWidth; }
+	public void setMWidth(double v) 
+	{ 
+		if (mWidth != v)
+		{
+			mWidth = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected double mHeight = 0;
+	public double getMHeight() { return mHeight; }
+	public void setMHeight(double v) 
+	{ 
+		if (mHeight != v)
+		{
+			mHeight = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+		
+	// starty for shapes
+	public double getMTop() { return mCentery - mHeight / 2; }
+	public void setMTop(double v) 
+	{ 
+		mCentery = v + mHeight / 2;
+		fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+	}
+	
+	// startx for shapes
+	public double getMLeft() { return mCenterx - mWidth / 2; }
+	public void setMLeft(double v) 
+	{ 
+		mCenterx = v + mWidth / 2;
+		fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+	}
+	
+	protected ShapeType shapeType = ShapeType.RECTANGLE;
+	public ShapeType getShapeType() { return shapeType; }
+	public void setShapeType(ShapeType v) 
+	{ 
+		if (shapeType != v)
+		{
+			shapeType = v;		
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	public void setOrientation(int orientation) {
+		switch (orientation)
+		{
+			case OrientationType.TOP: setRotation(0); break;
+			case OrientationType.LEFT: setRotation(Math.PI*(3.0/2)); break;
+			case OrientationType.BOTTOM: setRotation(Math.PI); break;
+			case OrientationType.RIGHT: setRotation(Math.PI/2); break;
+		}
+	}
+		
+	public int getOrientation() {
+		double r = rotation / Math.PI;
+		if(r < 1.0/4 || r >= 7.0/4) return OrientationType.TOP;
+		if(r > 5.0/4 && r <= 7.0/4) return OrientationType.LEFT;
+		if(r > 3.0/4 && r <= 5.0/4) return OrientationType.BOTTOM;
+		if(r > 1.0/4 && r <= 3.0/4) return OrientationType.RIGHT;
+		return 0;
+	}
+
+	protected double rotation = 0; // in radians
+	public double getRotation() { return rotation; }
+	public void setRotation(double v) 
+	{ 
+		if (rotation != v)
+		{
+			rotation = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+		
+	}
+	
+	// for labels
+	protected boolean fBold = false;
+	public boolean isBold() { return fBold; }
+	public void setBold(boolean v) 
+	{ 
+		if (fBold != v)
+		{
+			fBold = v;		
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected boolean fStrikethru = false;
+	public boolean isStrikethru() { return fStrikethru; }
+	public void setStrikethru(boolean v) 
+	{ 
+		if (fStrikethru != v)
+		{
+			fStrikethru = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected boolean fUnderline = false;
+	public boolean isUnderline() { return fUnderline; }
+	public void setUnderline(boolean v) 
+	{ 
+		if (fUnderline != v)
+		{
+			fUnderline = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected boolean fItalic = false;
+	public boolean isItalic() { return fItalic; }
+	public void setItalic(boolean v) 
+	{ 
+		if (fItalic != v)
+		{
+			fItalic = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected String fontName= "Arial";
+	public String getFontName() { return fontName; }
+	public void setFontName(String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (fontName != v)
+		{
+			fontName = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected String textLabel = "";
+	public String getTextLabel() { return textLabel; }
+	public void setTextLabel (String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (textLabel != v)
+		{
+			textLabel = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected double mFontSize = 10 * 15;	
+	public double getMFontSize() { return mFontSize; }
+	public void setMFontSize(double v) 
+	{ 
+		if (mFontSize != v)
+		{
+			mFontSize = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}	
+	
+	protected String mapInfoName = "untitled";
+	public String getMapInfoName() { return mapInfoName; }
+	public void setMapInfoName (String v) 
+	{ 
+		if (v == null) throw new IllegalArgumentException();
+		if (mapInfoName != v)
+		{
+			mapInfoName = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	protected String organism = null;
+	public String getOrganism() { return organism; }
+	public void setOrganism (String v) 
+	{ 
+		if (organism != v)
+		{
+			organism = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String mapInfoDataSource = null;
+	public String getMapInfoDataSource() { return mapInfoDataSource; }
+	public void setMapInfoDataSource (String v) 
+	{ 
+		if (mapInfoDataSource != v)
+		{
+			mapInfoDataSource = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String version = null;
+	public String getVersion() { return version; }
+	public void setVersion (String v) 
+	{ 
+		if (version != v)
+		{
+			version = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String author = null;
+	public String getAuthor() { return author; }
+	public void setAuthor (String v) 
+	{ 
+		if (author != v)
+		{
+			author = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String maintainer = null; 
+	public String getMaintainer() { return maintainer; }
+	public void setMaintainer (String v) 
+	{ 
+		if (maintainer != v)
+		{
+			maintainer = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String email = null;
+	public String getEmail() { return email; }
+	public void setEmail (String v) 
+	{ 
+		if (email != v)
+		{
+			email = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String copyright = null;
+	public String getCopyright() { return copyright; }
+	public void setCopyright (String v) 
+	{ 
+		if (copyright != v)
+		{
+			copyright = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+
+	protected String lastModified = null;
+	public String getLastModified() { return lastModified; }
+	public void setLastModified (String v) 
+	{ 
+		if (lastModified != v)
+		{
+			lastModified = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	// TODO: rename to DrawingWidth/height
+	protected double mBoardWidth;
+	public double getMBoardWidth() { return mBoardWidth; }
+	public void setMBoardWidth(double v) 
+	{ 
+		if (mBoardWidth != v)
+		{
+			mBoardWidth = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.WINDOW));
+		}
+	}
+
+	protected double mBoardHeight;
+	public double getMBoardHeight() { return mBoardHeight; }
+	public void setMBoardHeight(double v) 
+	{ 
+		if (mBoardHeight != v)
+		{
+			mBoardHeight = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.WINDOW));
+		}
+	}
+
+	protected double windowWidth;
+
+	/**
+	 * GenMAPP Legacy attribute
+	 * maintained only for reverse compatibility reasons, 
+	 * no longer used by PathVisio	
+	 */
+	public double getWindowWidth() { return windowWidth; }
+
+	/**
+	 * GenMAPP Legacy attribute
+	 * maintained only for reverse compatibility reasons, 
+	 * no longer used by PathVisio	
+	 */
+	public void setWindowWidth(double v) 
+	{ 
+		if (windowWidth != v)
+		{
+			windowWidth = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.WINDOW));
+		}
+	}
+
+	protected double windowHeight;
+
+	/**
+	 * GenMAPP Legacy attribute
+	 * maintained only for reverse compatibility reasons, 
+	 * no longer used by PathVisio	
+	 */
+	public double getWindowHeight() { return windowHeight; }
+	
+	/**
+	 * GenMAPP Legacy attribute
+	 * maintained only for reverse compatibility reasons, 
+	 * no longer used by PathVisio	
+	 */
+	public void setWindowHeight(double v) 
+	{ 
+		if (windowHeight != v)
+		{
+			windowHeight = v;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.WINDOW));
+		}
+	}
+	
+	/*AP20070508*/
+	protected String groupId;
+	protected String graphId;
+	protected String groupRef;
+	protected GroupStyle groupStyle;
+	
+	public String doGetGraphId() {
+		return graphId; 
+	}
+
+	public String getGroupRef() {
+		return groupRef;
+	}
+	
+	public void setGroupRef(String s) {
+		if (groupRef == null || !groupRef.equals(s))
+		{
+			if (parent != null)
+			{
+				if (groupRef != null)
+				{
+					parent.removeRef(groupRef, this);
+				}
+				//Check: move add before remove??
+				if (s != null)
+				{
+					parent.addRef(s, this);
+				}
+			}
+			groupRef = s;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	public String getGroupId() {
+		if (groupId == null)
+		{
+			setGroupId (parent.getUniqueId());
+		}
+		return groupId;
+	}
+		
+	public void setGroupStyle(GroupStyle gs) {
+		groupStyle = gs;
+	}
+
+	public GroupStyle getGroupStyle() {
+		//TODO: handle NULL and default
+		return groupStyle;		
+	}
+	
+	/**
+	 * Set groupId. This id must be any string unique within the Pathway object 
+	 * 
+	 * @see Pathway#getUniqueId()
+	 */
+	public void setGroupId (String w) 
+	{ 
+		if (groupId == null || !groupId.equals(w))
+		{
+			if (parent != null)
+			{
+				if (groupId != null)
+				{
+					parent.removeId(groupId);
+				}
+				//Check: move add before remove??
+				if (w != null)
+				{
+					parent.addGroupId(w, this);
+				}
+			}
+			groupId = w;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+
+	}
+		
+	public String getGraphId() {
+		return graphId;
+	}
+	
+	/**
+	 * Set graphId. This id must be any string unique within the Pathway object 
+	 * 
+	 * @see Pathway#getUniqueId()
+	 */
+	public void setGraphId (String v) 
+	{ 
+		GraphLink.setGraphId(v, this, this);
+		graphId = v;
+		fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+	}
+	
+	public String setGeneratedGraphId() {
+		setGraphId(parent.getUniqueId());
+		return graphId;
+	}
+			
+	public String getStartGraphRef() {
+		return mPoints.get(0).getGraphRef();
+	}
+	
+	public void setStartGraphRef(String ref) {
+		MPoint start = mPoints.get(0);
+		start.setGraphRef(ref);
+	}
+	
+	public String getEndGraphRef() {
+		return mPoints.get(mPoints.size() - 1).getGraphRef();
+	}
+	
+	public void setEndGraphRef(String ref) {
+		MPoint end = mPoints.get(mPoints.size() - 1);
+		end.setGraphRef(ref);
+	}
+	
+	protected Document biopax;
+	
+	public Document getBiopax() {
+		return biopax;
+	}
+	
+	public void setBiopax(Document bp) {
+		biopax = bp;
+	}
+	
+	protected String biopaxRef;
+	
+	public String getBiopaxRef() {
+		return biopaxRef;
+	}
+	
+	public void setBiopaxRef(String ref) {
+		if(ref != null && !ref.equals(biopaxRef)) {
+			biopaxRef = ref;
+			fireObjectModifiedEvent(new PathwayEvent (this, PathwayEvent.MODIFIED_GENERAL));
+		}
+	}
+	
+	public PathwayElement[] splitLine() {
+		double centerX = (getMStartX() + getMEndX()) / 2;
+		double centerY = (getMStartY() + getMEndY()) / 2;
+		PathwayElement l1 = new PathwayElement(ObjectType.LINE);
+		l1.copyValuesFrom(this);
+		l1.setMStartX(getMStartX());
+		l1.setMStartY(getMStartY());
+		l1.setMEndX(centerX);
+		l1.setMEndY(centerY);
+		PathwayElement l2 = new PathwayElement(ObjectType.LINE);
+		l2.copyValuesFrom(this);
+		l2.setMStartX(centerX);
+		l2.setMStartY(centerY);
+		l2.setMEndX(getMEndX());
+		l2.setMEndY(getMEndY());
+		return new PathwayElement[] { l1, l2 };
+	}
+	
+	int noFire = 0;
+	public void dontFireEvents(int times) {
+		noFire = times;
+	}
+	
+	private List<PathwayListener> listeners = new ArrayList<PathwayListener>();
+	public void addListener(PathwayListener v) { listeners.add(v); }
+	public void removeListener(PathwayListener v) { listeners.remove(v); }
+	public void fireObjectModifiedEvent(PathwayEvent e) 
+	{
+		if(noFire > 0) {
+			noFire -= 1;
+			return;
+		}
+		for (PathwayListener g : listeners)
+		{
+			g.gmmlObjectModified(e);
+		}
+	}
+	
+	/**
+	 * This sets the object to a suitable default size.
+	 * 
+	 * This method is intended to be called right after the object is
+	 * placed on the drawing with a click. 
+	 */
+	public void setInitialSize()
+	{
+
+		switch (objectType)
+		{
+			case ObjectType.SHAPE:
+				if (shapeType == ShapeType.BRACE)
+				{
+					setMWidth(M_INITIAL_BRACE_WIDTH);
+					setMHeight(M_INITIAL_BRACE_HEIGHT);
+				}
+				else
+				{
+					setMWidth(M_INITIAL_SHAPE_SIZE);
+					setMHeight(M_INITIAL_SHAPE_SIZE);
+				}
+				break;
+			case ObjectType.DATANODE:
+				setMWidth(M_INITIAL_GENEPRODUCT_WIDTH);
+				setMHeight(M_INITIAL_GENEPRODUCT_HEIGHT);
+				break;
+			case ObjectType.LINE:
+				setMEndX(getMStartX() + M_INITIAL_SHAPE_SIZE);
+				setMEndY(getMStartY() + M_INITIAL_SHAPE_SIZE);
+				break;
+		}
+	}
+	
+	public Set<GraphRefContainer> getReferences() {
+		return GraphLink.getReferences(this, parent);
+	}
+
+	public Pathway getGmmlData() {
+		return parent;
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/PathwayElement.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineType.java	(revision 938)
@@ -0,0 +1,61 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public enum LineType 
+{
+	LINE ("Line", "Line"),
+	ARROW ("Arrow", "Arrow"),
+	TBAR ("TBar", "TBar"),
+	RECEPTOR ("Receptor", "Receptor"),
+	LIGAND_SQUARE ("LigandSq", "LigandSquare"),
+	RECEPTOR_SQUARE ("ReceptorSq", "ReceptorSquare"),
+	LIGAND_ROUND ("LigandRd", "LigandRound"),
+	RECEPTOR_ROUND ("ReceptorRd", "ReceptorRound");
+	
+	private LineType (String _mappName, String _gpmlName)
+	{
+		mappName = _mappName; 
+		gpmlName = _gpmlName;
+	}
+	
+	private String mappName;
+	private String gpmlName;
+	
+	String getMappName() { return mappName; }
+	String getGpmlName() { return gpmlName; }
+	
+	static private Map<String, LineType> gpmlMapping = initGpmlMapping();
+	
+	static private Map<String, LineType> initGpmlMapping()
+	{
+		Map<String, LineType> result = new HashMap<String, LineType>();
+		for (LineType l : LineType.values())
+		{
+			result.put (l.getGpmlName(), l);
+		}
+		return result;
+	}
+	
+	static LineType getByGpmlName(String value)
+	{
+		return gpmlMapping.get (value);
+	}
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/LineType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/OrientationType.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/OrientationType.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/OrientationType.java	(revision 938)
@@ -0,0 +1,49 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.model;
+
+import java.util.Arrays;
+import java.util.List;
+
+/**
+   Contains possible orientations for a Shape, such as
+   "Top" (0 degrees) or "Right" (90 degrees)
+*/
+public class OrientationType {
+
+	// warning: don't change these constants. Correct mapping to .MAPP format depends on it.
+	public static final int TOP		= 0;
+	public static final int RIGHT	= 1;
+	public static final int BOTTOM	= 2;
+	public static final int LEFT	= 3;
+
+	// Some mappings to Gpml
+	private static final List orientationMappings = Arrays.asList(new String[] {
+			"top", "right", "bottom", "left"
+	});
+
+	public static int getMapping(String value)
+	{
+		return orientationMappings.indexOf(value);
+	}
+	
+	public static String getMapping(int value)
+	{
+		return (String)orientationMappings.get(value);
+	}
+
+}

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/model/OrientationType.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 938)
@@ -0,0 +1,77 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.io.*;
+import org.jdom.*;
+import org.jdom.output.*;
+
+/**
+   Naive implementation of Outputter.
+ */
+class DgpmlOutputter extends DiffOutputter
+{
+	Document doc = null;
+	
+	DgpmlOutputter(File f)
+	{
+		//TODO: open file
+	}
+	
+	DgpmlOutputter()
+	{
+		doc = new Document();
+		doc.setRootElement (new Element("Delta"));
+	}
+
+	public void flush() throws IOException
+	{
+		XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
+		Format f = xmlcode.getFormat();
+		f.setEncoding("ISO-8859-1");
+		f.setTextMode(Format.TextMode.PRESERVE);
+		xmlcode.setFormat(f);
+		
+		//Open a filewriter
+		PrintWriter writer = new PrintWriter(System.out);
+		xmlcode.output(doc, writer);
+	}
+
+	public void insert(PwyElt newElt)
+	{
+		Element e = (new Element("Insert"));
+		e.setText (newElt.summary());
+		doc.getRootElement().addContent(e);
+	}
+
+	public void delete(PwyElt oldElt)
+	{
+		Element e = (new Element("Delete"));
+		e.setText (oldElt.summary());
+		doc.getRootElement().addContent(e);
+	}
+
+	public void modify(PwyElt newElt, String path, String oldVal, String newVal)
+	{
+		Element e = (new Element("Modify"));
+		e.setText (newElt.summary());
+		e.setAttribute("path", path);
+		e.setAttribute("old", oldVal);
+		e.setAttribute("new", newVal);
+		doc.getRootElement().addContent(e);
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java	(revision 938)
@@ -0,0 +1,33 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+/**
+   Unit tests for package GpmlDiff
+*/
+class Test
+{
+	void testPwy()
+	{
+		// read test file
+		
+	}
+
+	void testElt()
+	{
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 938)
@@ -0,0 +1,56 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.io.IOException;
+
+/**
+   abstract base class for Diff Ouputters. Designed to handle a couple
+   of events emitted by the comparison algorithm, and give output
+   based on that.  This way we can support various output formats
+   simply by subclassing DiffOutputter
+ */
+abstract class DiffOutputter
+{
+	/**
+	   Event to signify insertion of a new PathwayElement that was not
+	   present in the old document
+	*/
+	abstract public void insert(PwyElt newElt);
+
+	/**
+	   Event to signify deletion of an element that was present in the
+	   old document
+	*/
+	abstract public void delete(PwyElt oldElt);
+
+	/**
+	   Modification of an element that is present in both documents.
+	   @param path is an XPath-like expression that points to the
+	   subelement or attribute that was modified.
+	   @param oldVal is the old value of that tag / attribute
+	   @param newVal is the new value of that tag / attribute
+	 */
+	abstract public void modify(PwyElt newElt, String path, String oldVal, String newVal);
+
+	/**
+	   Write all pending output to file or flush output buffers,
+	   depending on the actual implementation of this
+	*/
+	abstract public void flush() throws IOException;
+
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 938)
@@ -0,0 +1,106 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import org.jdom.*;
+import java.util.*;
+
+/**
+   A single element in a pathway, which can be a line, shape, datanode, etc.
+*/
+class PwyElt
+{
+	Element elt;
+	Map<String, String> contents = new HashMap<String, String>();
+	
+	public Map<String, String> getContents() { return contents; }
+	
+	PwyElt(Element _elt)
+	{
+		assert (_elt != null);
+		elt = _elt;
+		
+		copyContents(elt, "");
+	}
+
+	/**
+	   Recursive function that copies all attributes and children of an element
+	   to a list of strings.
+	*/
+	private void copyContents(Element elt, String base)
+	{
+		String newb = base + "/" + elt.getName();
+				
+		// copy text value, if there is one
+		String txt = elt.getTextTrim();
+		if (txt.length() > 0)
+		{
+			contents.put (newb + ".text()", txt);
+		}
+		// copy attributes
+		for (Attribute a : (List<Attribute>)elt.getAttributes())
+		{
+			contents.put (newb + "." + a.getName(), a.getValue());
+		}
+		// recursively copy children
+		for (Element child : (List<Element>)elt.getChildren())
+		{
+			copyContents (child, newb);
+		}
+	}
+		
+	String summary()
+	{
+		String result = "[" + elt.getName();
+		String tmp;
+		if ((tmp = elt.getAttributeValue("TextLabel")) != null) result += ",lbl=" + tmp;
+		if ((tmp = elt.getAttributeValue("ObjectType")) != null) result += ",ot=" + tmp;
+		for (Element g : (List<Element>)elt.getChildren("Graphics", elt.getNamespace()))
+		{
+			if ((tmp = g.getAttributeValue("Width")) != null) result += ",w=" + tmp;
+			if ((tmp = g.getAttributeValue("Height")) != null) result += ",h=" + tmp;
+			
+			int i = 0;
+			for (Element p : (List<Element>)g.getChildren("Point", elt.getNamespace()))
+			{
+				i++;
+				result += ",x" + i + "=" + p.getAttributeValue("x");
+				result += ",y" + i + "=" + p.getAttributeValue("y");
+			}
+		}
+		if ((tmp = elt.getAttributeValue("CenterX")) != null) result += ",cx=" + tmp;
+		if ((tmp = elt.getAttributeValue("CenterY")) != null) result += ",cy=" + tmp;
+		result += "]";
+		return result;
+	}
+
+	void writeModifications (PwyElt other, DiffOutputter outputter)
+	{
+		//TODO: insertions / deletions
+				
+		for (String key : contents.keySet())
+		{
+			if (other.contents.containsKey(key))
+			{
+				if (!contents.get(key).equals(other.contents.get(key)))
+				{
+					outputter.modify (this, key, contents.get(key), other.contents.get(key));
+				}
+			}
+		}			
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 938)
@@ -0,0 +1,126 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.io.*;
+import org.jdom.*;
+import org.jdom.input.SAXBuilder;
+import java.util.*;
+
+/**
+   Contains an entire Pathway Document
+*/   
+class PwyDoc
+{
+	private Document doc;
+	private	List<PwyElt> elts = new ArrayList<PwyElt>();
+
+	/**
+	   Return a list of all PwyElts contained in this documents
+	*/
+	public List<PwyElt> getElts() { return elts; }
+		
+	/**
+	   Construct a new PwyDoc from a certain file
+	   Returns null if there is a JDOM or IO exception
+	   TODO: We may want to pass on the exception?
+	*/
+	static public PwyDoc read(File f)
+	{
+		PwyDoc result = null;
+		try
+		{
+			SAXBuilder saxb = new SAXBuilder();		
+			result = new PwyDoc();
+			result.doc = saxb.build (f);
+		}
+		catch (JDOMException e) { e.printStackTrace(); return null; }
+		catch (IOException e) { return null; }
+				
+		Element root = result.doc.getRootElement();
+		// turn all first-level elements into a PwyElt 
+		for (Element e : (List<Element>)root.getChildren())
+		{
+			result.elts.add (new PwyElt (e));
+		}
+		return result;
+	}
+		
+	/**
+	   Finds correspondence set with the lowest cost using Dijkstra's algorithm
+	*/
+	SearchNode findCorrespondence(PwyDoc other, SimilarityFunction simFun, CostFunction costFun)
+	{
+		SearchNode currentNode = null;
+				
+		for (PwyElt e1 : elts)
+		{						
+			int maxScore = 0;
+			PwyElt maxElt = null;
+			for (PwyElt e2: other.getElts())
+			{
+				int score = simFun.getSimScore (e1, e2);
+				if (score > maxScore)
+				{
+					maxElt = e2;
+					maxScore = score;
+				}
+			}
+
+			// add pairing to search tree.
+			SearchNode newNode = new SearchNode (currentNode, e1, maxElt, 0);
+			currentNode = newNode;
+
+		}
+		return currentNode;
+	}
+		
+	/**
+	   Output the Diff after the best correspondence has been calculated.
+	*/
+	void writeResult (SearchNode result, PwyDoc other, DiffOutputter out)
+	{
+		Set<PwyElt> both1 = new HashSet<PwyElt>();
+		Set<PwyElt> both2 = new HashSet<PwyElt>();
+				
+		SearchNode current = result;
+		while (current != null)
+		{
+			// check for modification
+			current.getElt1().writeModifications(current.getElt2(), out);
+			both1.add (current.getElt1());
+			both2.add (current.getElt2());
+			current = current.getParent();
+		}
+
+		for (PwyElt e : elts)
+		{
+			if (!both1.contains(e))
+			{
+				out.insert (e);
+			}
+		}
+
+		for (PwyElt e : other.elts)
+		{
+			if (!both2.contains(e))
+			{
+				out.delete (e);
+			}
+		}
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/semantic.cache
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/semantic.cache	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/semantic.cache	(revision 938)
@@ -0,0 +1,51 @@
+;; Object gpmldiff/
+;; SEMANTICDB Tags save file
+(semanticdb-project-database-file "gpmldiff/"
+  :tables (list 
+   (semanticdb-table "SimilarityFunction.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("SimilarityFunction" type (:typemodifiers ("abstract") :members (("getSimScore" function (:typemodifiers ("abstract" "public") :arguments (("e1" variable (:type "PwyElt") (reparse-symbol formal_parameters) [877 886]) ("e2" variable (:type "PwyElt") (reparse-symbol formal_parameters) [888 897])) :type "int") (reparse-symbol class_member_declaration) [844 899])) :type "class") nil [807 901]))
+    :file "SimilarityFunction.java"
+    :pointmax 901
+    :unmatched-syntax 'nil
+    )
+   (semanticdb-table "SearchNode.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("SearchNode" type (:members (("cost" variable (:type "float") (reparse-symbol class_member_declaration) [819 830]) ("parent" variable (:type "SearchNode") (reparse-symbol class_member_declaration) [832 850]) ("getParent" function (:typemodifiers ("public") :type "SearchNode") (reparse-symbol class_member_declaration) [986 1039]) ("elt1" variable (:type "PwyElt") (reparse-symbol class_member_declaration) [1043 1055]) ("getElt1" function (:typemodifiers ("public") :type "PwyElt") (reparse-symbol class_member_declaration) [1087 1131]) ("elt2" variable (:type "PwyElt") (reparse-symbol class_member_declaration) [1135 1147]) ("getElt2" function (:typemodifiers ("public") :type "PwyElt") (reparse-symbol class_member_declaration) [1179 1223]) ("SearchNode" function (:constructor-flag t :typemodifiers ("public") :arguments (("_parent" variable (:type "SearchNode") (reparse-symbol formal_parameters) [1313 1331]) ("_e1" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1333 1343]) ("_e2" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1345 1355]) ("_cost" variable (:type "float") (reparse-symbol formal_parameters) [1357 1368]))) (reparse-symbol class_member_declaration) [1295 1489])) :type "class") nil [799 1491]))
+    :file "SearchNode.java"
+    :pointmax 1491
+    :unmatched-syntax 'nil
+    )
+   (semanticdb-table "GpmlDiff.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("java.io.*" include nil nil [733 750]) ("GpmlDiff" type (:members (("fileOld" variable (:typemodifiers ("static") :type "File") (reparse-symbol class_member_declaration) [809 836]) ("fileNew" variable (:typemodifiers ("static") :type "File") (reparse-symbol class_member_declaration) [838 865]) ("parseCliOptions" function (:typemodifiers ("static") :arguments (("argv[]" variable (:type "String") (reparse-symbol formal_parameters) [940 953])) :type "boolean") (reparse-symbol class_member_declaration) [909 1392]) ("printUsage" function (:typemodifiers ("static") :type "void") (reparse-symbol class_member_declaration) [1449 1648]) ("main" function (:typemodifiers ("public" "static") :arguments (("argv[]" variable (:type "String") (reparse-symbol formal_parameters) [1705 1718])) :type "void") (reparse-symbol class_member_declaration) [1681 2100])) :type "class") nil [791 2102]))
+    :file "GpmlDiff.java"
+    :pointmax 2102
+    :unmatched-syntax 'nil
+    )
+   (semanticdb-table "DiffOutputter.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("java.io.IOException" include nil nil [733 760]) ("DiffOutputter" type (:typemodifiers ("abstract") :members (("insert" function (:typemodifiers ("abstract" "public") :arguments (("newElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1181 1194])) :type "void") (reparse-symbol class_member_declaration) [1153 1196]) ("delete" function (:typemodifiers ("abstract" "public") :arguments (("oldElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1321 1334])) :type "void") (reparse-symbol class_member_declaration) [1293 1336]) ("modify" function (:typemodifiers ("abstract" "public") :arguments (("newElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1671 1684]) ("path" variable (:type "String") (reparse-symbol formal_parameters) [1686 1697]) ("oldVal" variable (:type "String") (reparse-symbol formal_parameters) [1699 1712]) ("newVal" variable (:type "String") (reparse-symbol formal_parameters) [1714 1727])) :type "void") (reparse-symbol class_member_declaration) [1643 1729]) ("flush" function (:throws ("IOException") :typemodifiers ("abstract" "public") :type "void") (reparse-symbol class_member_declaration) [1854 1902])) :type "class") nil [1012 1905]))
+    :file "DiffOutputter.java"
+    :pointmax 1905
+    :unmatched-syntax 'nil
+    )
+   (semanticdb-table "PwyDoc.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("java.io.*" include nil nil [733 750]) ("org.jdom.*" include nil nil [751 769]) ("org.jdom.input.SAXBuilder" include nil nil [770 803]) ("java.util.*" include nil nil [804 823]) ("PwyDoc" type (:members (("doc" variable (:typemodifiers ("private") :type "Document") (reparse-symbol class_member_declaration) [890 911]) ("getElts" function (:constructor-flag t) (reparse-symbol class_member_declaration) [1058 1084]) ("read" function (:typemodifiers ("static" "public") :arguments (("f" variable (:type "File") (reparse-symbol formal_parameters) [1271 1277])) :type "PwyDoc") (reparse-symbol class_member_declaration) [1245 1743]) ("findCorrespondence" function (:arguments (("other" variable (:type "PwyDoc") (reparse-symbol formal_parameters) [1864 1876]) ("simFun" variable (:type "SimilarityFunction") (reparse-symbol formal_parameters) [1878 1903]) ("costFun" variable (:type "CostFunction") (reparse-symbol formal_parameters) [1905 1925])) :type "SearchNode") (reparse-symbol class_member_declaration) [1834 2378]) ("writeResult" function (:arguments (("result" variable (:type "SearchNode") (reparse-symbol formal_parameters) [2481 2498]) ("other" variable (:type "PwyDoc") (reparse-symbol formal_parameters) [2500 2512]) ("out" variable (:type "DiffOutputter") (reparse-symbol formal_parameters) [2514 2531])) :type "void") (reparse-symbol class_member_declaration) [2463 3080])) :type "class") nil [874 3082]))
+    :file "PwyDoc.java"
+    :pointmax 3082
+    :unmatched-syntax 'nil
+    )
+   (semanticdb-table "DgpmlOutputter.java"
+    :major-mode 'jde-mode
+    :tags '(("org.pathvisio.gpmldiff" package nil nil [700 731]) ("java.io.*" include nil nil [733 750]) ("org.jdom.*" include nil nil [751 769]) ("org.jdom.output.*" include nil nil [770 795]) ("DgpmlOutputter" type (:superclasses "DiffOutputter" :members (("doc" variable (:type "Document") (reparse-symbol class_member_declaration) [889 909]) ("DgpmlOutputter" function (:constructor-flag t :arguments (("f" variable (:type "File") (reparse-symbol formal_parameters) [928 934]))) (reparse-symbol class_member_declaration) [913 961]) ("DgpmlOutputter" function (:constructor-flag t) (reparse-symbol class_member_declaration) [965 1056]) ("flush" function (:throws ("IOException") :typemodifiers ("public") :type "void") (reparse-symbol class_member_declaration) [1059 1412]) ("insert" function (:typemodifiers ("public") :arguments (("newElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1434 1447])) :type "void") (reparse-symbol class_member_declaration) [1415 1563]) ("delete" function (:typemodifiers ("public") :arguments (("oldElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1585 1598])) :type "void") (reparse-symbol class_member_declaration) [1566 1714]) ("modify" function (:typemodifiers ("public") :arguments (("newElt" variable (:type "PwyElt") (reparse-symbol formal_parameters) [1736 1749]) ("path" variable (:type "String") (reparse-symbol formal_parameters) [1751 1762]) ("oldVal" variable (:type "String") (reparse-symbol formal_parameters) [1764 1777]) ("newVal" variable (:type "String") (reparse-symbol formal_parameters) [1779 1792])) :type "void") (reparse-symbol class_member_declaration) [1717 2006])) :type "class") nil [843 2008]))
+    :file "DgpmlOutputter.java"
+    :pointmax 2008
+    :unmatched-syntax 'nil
+    )
+   )
+  :file "semantic.cache"
+  :semantic-tag-version "2.0pre3"
+  :semanticdb-version "2.0pre3"
+  )
Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/.emacs
===================================================================
Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 938)
@@ -0,0 +1,88 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.io.*;
+
+/**
+   Class containing main method
+*/
+class GpmlDiff
+{
+	static File fileOld = null;
+	static File fileNew = null;
+	
+	/**
+	   Parse Command-line Options
+	*/
+	static boolean parseCliOptions(String argv[])
+	{
+		String error = null;
+		if (argv.length != 2) error = "Two parameters expected";
+		if (error == null)
+		{
+			fileOld = new File(argv[0]);
+			if (!fileOld.exists()) error = argv[0] + ": File not found";
+		}
+		if (error == null)
+		{
+			fileNew = new File(argv[1]);
+			if (!fileNew.exists()) error = argv[1] + ": File not found";
+		}
+		if (error != null)
+		{
+			System.out.println(error);
+			printUsage();
+		}
+		return error == null;
+	}
+	
+	/**
+	   Prints helpful info on the command line
+	*/
+	static void printUsage()
+	{
+		System.out.print (
+			"Gpmldiff\n" +
+			"\n" +
+			"Usage:\n" +
+			"  Gpmldiff old.gpml new.gpml\n" +
+			"\n" +
+			"Finds the difference between the two files\n"
+			);
+	}
+	
+	/**
+	   Entry point.
+	*/
+    public static void main(String argv[])
+	{
+		if (parseCliOptions(argv))
+		{
+			PwyDoc doc1 = PwyDoc.read (fileOld);
+			PwyDoc doc2 = PwyDoc.read (fileNew);
+			SearchNode result = doc1.findCorrespondence (doc2, new BasicSim(), new BasicCost());
+			DiffOutputter out = new DgpmlOutputter();
+			doc1.writeResult (result, doc2, out);
+			try
+			{
+				out.flush();
+			}
+			catch (IOException e) { e.printStackTrace(); }
+		}
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicCost.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicCost.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicCost.java	(revision 938)
@@ -0,0 +1,25 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+
+package org.pathvisio.gpmldiff;
+
+/**
+   Naive implementation of the Cost function
+ */
+class BasicCost extends CostFunction
+{
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicCost.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java	(revision 938)
@@ -0,0 +1,52 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+
+package org.pathvisio.gpmldiff;
+
+import java.util.*;
+
+/**
+   Basic Similarity function
+*/
+class BasicSim extends SimilarityFunction
+{
+	/**
+	   returns a score between 0 and 100, 100 if both elements are completely similar
+	*/
+	public int getSimScore (PwyElt e1, PwyElt e2)
+	{
+		Map<String, String> c1 = e1.getContents();
+		Map<String, String> c2 = e2.getContents();
+
+		int n1 = c1.size();
+		int n2 = c2.size();
+
+		if (n1 + n2 == 0) return 0; // div by 0 prevention
+		
+		int score = 0;
+		
+		for (String key : c1.keySet())
+		{
+			if (c2.containsKey (key) && c2.get(key).equals (c1.get(key)))
+			{
+				score += 2;
+			}
+		}
+		
+		return (100 * score) / (n1 + n2);
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 938)
@@ -0,0 +1,63 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+/**
+   A search node, important part of the Dijkstra algorithm
+*/
+class SearchNode
+{
+	float cost;
+	SearchNode parent;
+
+	/**
+	   return the Parent of this SearchNode, which corresponds to the
+	   state of the Search engine when this node was opened
+	*/
+	public SearchNode getParent ()
+	{
+		return parent;
+	}
+	
+	PwyElt elt1; // corresponding elt in doc1
+
+	public PwyElt getElt1()
+	{
+		return elt1;
+	}
+	
+	PwyElt elt2; // corresponding elt in doc2
+
+	public PwyElt getElt2()
+	{
+		return elt2;
+	}
+	
+	/**
+	   Create a new SearchNode.
+	   note: parent may be null.
+	*/
+	public SearchNode(SearchNode _parent, PwyElt _e1, PwyElt _e2, float _cost)
+	{
+		cost = _cost;
+		parent = _parent;
+		elt1 = _e1;
+		elt2 = _e2;
+		assert (elt1 != null);
+		assert (elt2 != null);
+	}
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SimilarityFunction.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SimilarityFunction.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SimilarityFunction.java	(revision 938)
@@ -0,0 +1,25 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+/**
+   abstract base class for implementations of similarity functions
+*/
+abstract class SimilarityFunction
+{
+	abstract public int getSimScore (PwyElt e1, PwyElt e2);
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/SimilarityFunction.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 938)
@@ -0,0 +1,58 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+import java.io.*;
+
+/**
+   Naive implementation of Outputter.
+ */
+class BasicOutputter extends DiffOutputter
+{
+
+	PrintStream output = null;
+	
+	BasicOutputter(File f)
+	{
+		//TODO: open file
+	}
+	
+	BasicOutputter()
+	{
+		output = System.out;
+	}
+
+	public void flush()
+	{
+	}
+
+	public void insert(PwyElt newElt)
+	{
+		output.println ("insert: " + newElt.summary());
+	}
+
+	public void delete(PwyElt oldElt)
+	{
+		output.println ("delete: " + oldElt.summary());
+	}
+
+	public void modify(PwyElt newElt, String path, String oldVal, String newVal)
+	{
+		output.println ("modify: " + newElt.summary() + "[" + path + ": '" + oldVal + "' -> '" + newVal + "']");
+	}
+
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/CostFunction.java
===================================================================
--- branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/CostFunction.java	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/CostFunction.java	(revision 938)
@@ -0,0 +1,25 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gpmldiff;
+
+/**
+   abstract base class for all Cost Functions
+*/
+abstract class CostFunction
+{
+	
+}
\ No newline at end of file

Property changes on: branches/g2d-branch/tools/gpmldiff/src/org/pathvisio/gpmldiff/CostFunction.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/tools/gpmldiff/TAGS
===================================================================
--- branches/g2d-branch/tools/gpmldiff/TAGS	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/TAGS	(revision 938)
@@ -0,0 +1,71 @@
+
+src/org/pathvisio/gpmldiff/BasicOutputter.java,383
+class BasicOutputter 8,98
+	PrintStream output BasicOutputter.output11,144
+	BasicOutputter(BasicOutputter.BasicOutputter13,174
+	BasicOutputter(BasicOutputter.BasicOutputter18,226
+	public void flush(BasicOutputter.flush23,274
+	public void insert(BasicOutputter.insert27,302
+	public void delete(BasicOutputter.delete32,394
+	public void modify(BasicOutputter.modify37,486
+
+src/org/pathvisio/gpmldiff/SearchNode.java,408
+class SearchNodeBasicOutputter.SearchNode6,99
+	float cost;SearchNode.cost8,118
+	SearchNode parent;SearchNode.parent9,131
+	public SearchNode getParent SearchNode.getParent15,285
+	PwyElt elt1;SearchNode.elt120,342
+	public PwyElt getElt1(SearchNode.getElt122,386
+	PwyElt elt2;SearchNode.elt227,434
+	public PwyElt getElt2(SearchNode.getElt229,478
+	public SearchNode(SearchNode.SearchNode38,594
+
+src/org/pathvisio/gpmldiff/PwyDoc.java,343
+class PwyDocSearchNode.PwyDoc11,174
+		private Document doc;PwyDoc.doc13,189
+		private	List<PwyElt> elts PwyDoc.elts14,213
+		public List<PwyElt> getElts(PwyDoc.getElts19,342
+		static public PwyDoc read(PwyDoc.read26,555
+		SearchNode findCorrespondence(PwyDoc.findCorrespondence50,1186
+		void writeResult PwyDoc.writeResult79,1881
+
+src/org/pathvisio/gpmldiff/BasicSim.java,90
+class BasicSim PwyDoc.BasicSim8,90
+	public int getSimScore BasicSim.getSimScore13,226
+
+src/org/pathvisio/gpmldiff/SimilarityFunction.java,68
+abstract class SimilarityFunctionBasicSim.SimilarityFunction6,107
+
+src/org/pathvisio/gpmldiff/DiffOutputter.java,67
+abstract class DiffOutputterSimilarityFunction.DiffOutputter6,83
+
+src/org/pathvisio/gpmldiff/Test.java,103
+class TestDiffOutputter.Test6,75
+	void testPwy(Test.testPwy8,88
+	void testElt(Test.testElt14,134
+
+src/org/pathvisio/gpmldiff/GpmlDiff.java,293
+class GpmlDiffTest.GpmlDiff8,94
+	static File fileOld GpmlDiff.fileOld10,111
+	static File fileNew GpmlDiff.fileNew11,140
+	static boolean parseCliOptions(GpmlDiff.parseCliOptions16,211
+	static void printUsage(GpmlDiff.printUsage41,751
+    public static void main(GpmlDiff.main56,980
+
+src/org/pathvisio/gpmldiff/PwyElt.java,427
+class PwyEltGpmlDiff.PwyElt9,157
+	Element elt;PwyElt.elt11,172
+	Map<PwyElt.Map12,186
+	Map<String, String> contents PwyElt.contents12,186
+	public Map<PwyElt.Map14,251
+	public Map<String, String> getContents(PwyElt.getContents14,251
+	PwyElt(PwyElt.PwyElt16,316
+	private void copyContents(PwyElt.copyContents24,413
+	String summary(PwyElt.summary43,852
+	void writeModifications PwyElt.writeModifications68,1764
+
+src/org/pathvisio/gpmldiff/BasicCost.java,39
+class BasicCost PwyElt.BasicCost6,86
+
+src/org/pathvisio/gpmldiff/CostFunction.java,56
+abstract class CostFunctionBasicCost.CostFunction6,86
Index: branches/g2d-branch/tools/gpmldiff/build.xml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/build.xml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/build.xml	(revision 938)
@@ -0,0 +1,73 @@
+<?xml version="1.0"?>
+<project name="GpmlDiff" default="compile" basedir=".">
+	
+	<property name="src.dir" value="src"/>        
+	<property name="build.dir" value="build"/>
+
+    <property name="apidoc.dir" value="apidoc"/>
+	
+	<path id="project.class.path">
+		<pathelement location="${build.dir}"/>
+		<fileset dir="../../lib">
+		        <include name="**/*.jar"/>
+		</fileset>
+	</path>
+
+	<target name="prepare">
+		<mkdir dir="${build.dir}"/>
+		<mkdir dir="${apidoc.dir}"/>	
+	</target>
+	
+	<target name="clean" description="Remove all generated files.">
+		<delete dir="${build.dir}"/>
+		<delete dir="${apidoc.dir}"/>
+	</target>
+	
+	<target name="compile" depends="prepare" description="Compile all sources">
+		<javac srcdir="${src.dir}" debug="true"	destdir="${build.dir}">
+			<classpath refid="project.class.path"/>
+		</javac>
+		<javac srcdir="../../src/"
+			   includes="core/**,v2/**"
+			   destdir="${build.dir}">
+		  <classpath refid="project.class.path"/>
+		</javac>
+	</target>
+	
+	<target name="jar" depends="compile" description="Generates executable jar file">
+		<jar jarfile="gpmldiff.jar" manifest="src/MANIFEST.MF">
+			<fileset dir="${build.dir}" includes="**/*.class"/>			
+		</jar>
+    </target>
+	
+	<target name="docs" depends="prepare" description="generate api-docs">
+		<tstamp /> <!-- set ${TODAY} -->
+		<javadoc destdir="${apidoc.dir}" 
+			doctitle="PathVisio"
+			footer="Generated ${TODAY}">
+			<classpath refid="project.class.path"/>
+			<package name="org.pathvisio.gpmldiff"/>
+			<sourcepath>			
+				<pathelement location="${src.dir}"/>
+			</sourcepath>
+		</javadoc>		
+	</target>
+		
+	<target name="test" depends="compile">
+		<javac srcdir="src"
+					includes="**"
+					destdir="${build.dir}">
+					<classpath refid="project.class.path"/>
+		</javac>
+		<junit printsummary="on" haltonfailure="true" fork="true">
+			<formatter type="brief" usefile="false"/>
+			<classpath refid="project.class.path"/>
+			<batchtest>
+				<fileset dir="src">
+					<include name="**/Test.java"/>
+				</fileset>
+			</batchtest>
+		</junit>
+	</target>
+	
+</project>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_1.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_1.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_1.gpml	(revision 938)
@@ -0,0 +1,138 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="bd3">
+    <Graphics Color="Transparent" CenterX="4875.0" CenterY="2040.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="aeb">
+    <Graphics Color="Transparent" CenterX="5850.0" CenterY="765.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="d7c">
+    <Graphics Color="Transparent" CenterX="5175.0" CenterY="2340.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fc4">
+    <Graphics Color="Transparent" CenterX="4245.0" CenterY="2130.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b80">
+    <Graphics Color="Transparent" CenterX="3360.0" CenterY="2055.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b97">
+    <Graphics Color="Transparent" CenterX="3150.0" CenterY="2280.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fa8">
+    <Graphics Color="Transparent" CenterX="2385.0" CenterY="855.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="2835.0" y="900.0" GraphRef="fa8" />
+      <Point x="3315.0" y="2205.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="5730.0" y="825.0" GraphRef="aeb" />
+      <Point x="5175.0" y="2010.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="1185.0" y="1560.0" />
+      <Point x="1230.0" y="1920.0" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="870.0" y="1935.0" />
+      <Point x="1230.0" y="1935.0" />
+    </Graphics>
+  </Line>
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4207.5" CenterY="3562.5" Width="3106.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="a60">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="ff00ff" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="ff8000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="be5">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5328.751335338579" CenterY="2958.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.165708192091355" />
+  </Shape>
+  <Shape Type="Arc" GraphId="fd8">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="ff0000" Color="000000" CenterX="4175.403419840487" CenterY="3473.6724328490686" Width="481.0" Height="675.3509839752778" Rotation="6.1616158229150875" />
+  </Shape>
+  <Shape Type="Brace" GraphId="e59">
+    <Graphics FillColor="Transparent" Color="804000" CenterX="4185.0" CenterY="4207.5" Width="1771.4360605902777" Height="374.4976261721608" Rotation="3.148617109843849" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ec1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5835.0" CenterY="3330.0" Width="240.0" Height="1260.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="dc1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2497.5" CenterY="3412.5" Width="285.0" Height="1215.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="c2c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4155.0" CenterY="4260.0" Width="1920.0" Height="1350.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="5842.5" CenterY="3982.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="c30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="2497.5" CenterY="4042.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="bdf">
+    <Graphics FillColor="804000" Color="804000" CenterX="4192.5" CenterY="5265.0" Width="226.0" Height="421.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ef7">
+    <Graphics FillColor="000000" Color="000000" CenterX="1282.5" CenterY="1995.0" Width="234.59580432500374" Height="139.71711122908414" Rotation="0.8610365369597351" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a11">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="1518.5173838602184" CenterY="1925.0501964389562" Width="481.0" Height="196.69122698362315" Rotation="6.125923480159002" />
+  </Shape>
+  <Shape Type="Oval" GraphId="fd3">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="1173.5173838602184" CenterY="2225.0501964389564" Width="481.0" Height="196.69122698362315" Rotation="1.7177669033618879" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ae3">
+    <Graphics FillColor="8080ff" Color="000000" CenterX="1410.0" CenterY="1792.5" Width="269.0" Height="436.0" Rotation="0.3944181831140263" />
+  </Shape>
+  <Shape Type="Oval" GraphId="e15">
+    <Graphics FillColor="8080ff" Color="000000" CenterX="1063.2400705735026" CenterY="2073.68608632908" Width="277.40078307670916" Height="436.0" Rotation="1.13846170466318" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="f3c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="3403.707071254841" CenterY="5172.894115010039" Width="243.04864865309347" Height="1036.0" Rotation="0.5736807482436229" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="fc7">
+    <Graphics FillColor="000000" Color="000000" CenterX="3191.3623785923714" CenterY="5496.532732492771" Width="243.04864865309347" Height="270.7709758801516" Rotation="0.5736807482436229" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2805.0" CenterY="4995.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2460.0" CenterY="4432.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2685.0" CenterY="5055.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2340.0" CenterY="4492.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2805.0" CenterY="5145.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2460.0" CenterY="4582.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_2.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_2.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_2.gpml	(revision 938)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4170.0" CenterY="3622.5" Width="3421.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="000000" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="000000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5538.751335338579" CenterY="2898.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4185.0" CenterY="3555.0" Width="481.0" Height="1081.0" Rotation="6.1616158229150875" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_3.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_3.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_3.gpml	(revision 938)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4170.0" CenterY="3622.5" Width="3421.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="000000" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="000000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5538.751335338579" CenterY="2898.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4185.0" CenterY="3555.0" Width="481.0" Height="1081.0" Rotation="6.1616158229150875" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_4.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_4.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_4.gpml	(revision 938)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="bd3">
+    <Graphics Color="Transparent" CenterX="3735.0" CenterY="1350.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="aeb">
+    <Graphics Color="Transparent" CenterX="5850.0" CenterY="765.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="d7c">
+    <Graphics Color="Transparent" CenterX="5685.0" CenterY="4695.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fc4">
+    <Graphics Color="Transparent" CenterX="4245.0" CenterY="2130.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b80">
+    <Graphics Color="Transparent" CenterX="3360.0" CenterY="2055.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b97">
+    <Graphics Color="Transparent" CenterX="3150.0" CenterY="2280.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fa8">
+    <Graphics Color="Transparent" CenterX="2430.0" CenterY="750.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="2880.0" y="795.0" GraphRef="fa8" />
+      <Point x="3285.0" y="2160.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="5730.0" y="825.0" GraphRef="aeb" />
+      <Point x="5145.0" y="1965.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4177.5" CenterY="3517.5" Width="3106.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="a60">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="ff00ff" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="ff8000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="be5">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5538.751335338579" CenterY="2898.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Arc" GraphId="fd8">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4185.0" CenterY="3555.0" Width="481.0" Height="1081.0" Rotation="6.1616158229150875" />
+  </Shape>
+  <Shape Type="Brace" GraphId="e59">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4079.9999999999995" CenterY="4162.5" Width="1771.4360605902777" Height="374.4976261721608" Rotation="3.148617109843849" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ec1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="6075.0" CenterY="2820.0" Width="240.0" Height="1260.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="dc1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2497.5" CenterY="3412.5" Width="285.0" Height="1215.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="c2c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4155.0" CenterY="4260.0" Width="1920.0" Height="1350.0" Rotation="0.0" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_5.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_5.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_5.gpml	(revision 938)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="bd3">
+    <Graphics Color="Transparent" CenterX="4875.0" CenterY="2040.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="aeb">
+    <Graphics Color="Transparent" CenterX="5850.0" CenterY="765.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="d7c">
+    <Graphics Color="Transparent" CenterX="5175.0" CenterY="2340.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fc4">
+    <Graphics Color="Transparent" CenterX="4245.0" CenterY="2130.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b80">
+    <Graphics Color="Transparent" CenterX="3360.0" CenterY="2055.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b97">
+    <Graphics Color="Transparent" CenterX="3150.0" CenterY="2280.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fa8">
+    <Graphics Color="Transparent" CenterX="2430.0" CenterY="750.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="2880.0" y="795.0" GraphRef="fa8" />
+      <Point x="3300.0" y="2205.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="5730.0" y="825.0" GraphRef="aeb" />
+      <Point x="5160.0" y="2010.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4192.5" CenterY="3562.5" Width="3106.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="a60">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="ff00ff" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="ff8000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="be5">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5328.751335338579" CenterY="2958.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.165708192091355" />
+  </Shape>
+  <Shape Type="Arc" GraphId="fd8">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4185.0" CenterY="3555.0" Width="481.0" Height="1081.0" Rotation="6.1616158229150875" />
+  </Shape>
+  <Shape Type="Brace" GraphId="e59">
+    <Graphics FillColor="Transparent" Color="804000" CenterX="4185.0" CenterY="4207.5" Width="1771.4360605902777" Height="374.4976261721608" Rotation="3.148617109843849" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ec1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5835.0" CenterY="3330.0" Width="240.0" Height="1260.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="dc1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2497.5" CenterY="3412.5" Width="285.0" Height="1215.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="c2c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4155.0" CenterY="4260.0" Width="1920.0" Height="1350.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="5842.5" CenterY="3982.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="c30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="2497.5" CenterY="4042.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="bdf">
+    <Graphics FillColor="804000" Color="804000" CenterX="4192.5" CenterY="5265.0" Width="226.0" Height="421.0" Rotation="0.0" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_6.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_6.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070522_6.gpml	(revision 938)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="bd3">
+    <Graphics Color="Transparent" CenterX="4875.0" CenterY="2040.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="aeb">
+    <Graphics Color="Transparent" CenterX="5850.0" CenterY="765.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="d7c">
+    <Graphics Color="Transparent" CenterX="5175.0" CenterY="2340.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fc4">
+    <Graphics Color="Transparent" CenterX="4245.0" CenterY="2130.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b80">
+    <Graphics Color="Transparent" CenterX="3360.0" CenterY="2055.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b97">
+    <Graphics Color="Transparent" CenterX="3150.0" CenterY="2280.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fa8">
+    <Graphics Color="Transparent" CenterX="2430.0" CenterY="750.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="2880.0" y="795.0" GraphRef="fa8" />
+      <Point x="3300.0" y="2205.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="5730.0" y="825.0" GraphRef="aeb" />
+      <Point x="5160.0" y="2010.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4192.5" CenterY="3562.5" Width="3106.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="a60">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="ff00ff" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="ff8000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="be5">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5328.751335338579" CenterY="2958.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.165708192091355" />
+  </Shape>
+  <Shape Type="Arc" GraphId="fd8">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4185.0" CenterY="3555.0" Width="481.0" Height="1081.0" Rotation="6.1616158229150875" />
+  </Shape>
+  <Shape Type="Brace" GraphId="e59">
+    <Graphics FillColor="Transparent" Color="804000" CenterX="4185.0" CenterY="4207.5" Width="1771.4360605902777" Height="374.4976261721608" Rotation="3.148617109843849" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ec1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5835.0" CenterY="3330.0" Width="240.0" Height="1260.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="dc1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2497.5" CenterY="3412.5" Width="285.0" Height="1215.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="c2c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4155.0" CenterY="4260.0" Width="1920.0" Height="1350.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="5842.5" CenterY="3982.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="c30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="2497.5" CenterY="4042.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="bdf">
+    <Graphics FillColor="804000" Color="804000" CenterX="4192.5" CenterY="5265.0" Width="226.0" Height="421.0" Rotation="0.0" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.1.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.1.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.1.gpml	(revision 938)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="ADH1C" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4890.0" CenterY="4200.0" Width="1200.0" Height="300.0" />
+    <Xref Database="RefSeq" ID="NP_000660" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="C2H5O" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2784.5" CenterY="4563.0" Width="701.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="C2H3O" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7389.5" CenterY="4608.0" Width="701.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="NADP" GraphId="f41">
+    <Graphics FontSize="150" Color="Transparent" CenterX="4159.0" CenterY="5193.0" Width="562.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="NADPH2" GraphId="a2e">
+    <Graphics FontSize="150" Color="Transparent" CenterX="5505.5" CenterY="5163.0" Width="839.0" Height="234.0" />
+  </Label>
+  <Shape Type="Arc">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4862.986846252681" CenterY="4995.158237122755" Width="1182.3624825006655" Height="775.8804390617229" Rotation="3.1579535447610447" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.1.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="ADH1C" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4890.0" CenterY="4200.0" Width="1200.0" Height="300.0" />
+    <Xref Database="RefSeq" ID="NP_000660" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound 1" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2496.0" CenterY="4563.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound 2" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7101.0" CenterY="4608.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.1.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.1.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.1.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Enzyme" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4905.0" CenterY="3915.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2591.5" CenterY="4563.0" Width="1087.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7196.5" CenterY="4608.0" Width="1087.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Enzyme" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4905.0" CenterY="3915.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound 1" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2496.0" CenterY="4563.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound 2" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7101.0" CenterY="4608.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.2.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.2.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.2.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="ADH1C" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4890.0" CenterY="4200.0" Width="1200.0" Height="300.0" />
+    <Xref Database="RefSeq" ID="NP_000660" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Ethanol" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2755.5" CenterY="4563.0" Width="759.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Ethanal" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7360.0" CenterY="4608.0" Width="760.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.3.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.3.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.3.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Simple Pathway" Data-Source="GenMAPP 2.0" Version="20070529" Author="Martijn van Iersel">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Enzyme" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4905.0" CenterY="4230.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound 1" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2496.0" CenterY="4563.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound 2" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7101.0" CenterY="4608.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.3.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.3.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.2.3.gpml	(revision 938)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="New Pathway" Data-Source="GenMAPP 2.0" Version="20070529" Email="martijn.vaniersel@bigcat.unimaas.nl">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="ADH1C" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4890.0" CenterY="4200.0" Width="1200.0" Height="300.0" />
+    <Xref Database="RefSeq" ID="NP_000660" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Ethanol" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2755.5" CenterY="4563.0" Width="759.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Ethanal" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7360.0" CenterY="4608.0" Width="760.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.4.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.4.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.4.gpml	(revision 938)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Simple Pathway" Data-Source="GenMAPP 2.0" Version="20070529" Author="Martijn van Iersel">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Enzyme" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4905.0" CenterY="4230.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="6255.0" y="4770.0" Head="Arrow" />
+      <Point x="3510.0" y="4770.0" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound 2" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7101.0" CenterY="4608.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound 1" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2496.0" CenterY="4563.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/Simple1.5.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/Simple1.5.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/Simple1.5.gpml	(revision 938)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Simple Pathway" Data-Source="GenMAPP 2.0" Version="20070529" Author="Martijn van Iersel">
+  <Graphics BoardWidth="18000.0" BoardHeight="12000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Enzyme" Type="Unknown" GraphId="a55">
+    <Graphics Color="Transparent" CenterX="4905.0" CenterY="4230.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="3495.0" y="4590.0" Head="Arrow" />
+      <Point x="6270.0" y="4590.0" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="6255.0" y="4770.0" Head="Arrow" />
+      <Point x="3510.0" y="4770.0" />
+    </Graphics>
+  </Line>
+  <Label TextLabel="Compound 1" GraphId="f40">
+    <Graphics FontSize="150" Color="Transparent" CenterX="2496.0" CenterY="4683.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <Label TextLabel="Compound 2" GraphId="bbd">
+    <Graphics FontSize="150" Color="Transparent" CenterX="7116.0" CenterY="4713.0" Width="1278.0" Height="234.0" />
+  </Label>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
+
Index: branches/g2d-branch/tools/gpmldiff/testcases/sandbox070524.gpml
===================================================================
--- branches/g2d-branch/tools/gpmldiff/testcases/sandbox070524.gpml	(revision 0)
+++ branches/g2d-branch/tools/gpmldiff/testcases/sandbox070524.gpml	(revision 938)
@@ -0,0 +1,138 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<Pathway xmlns="http://genmapp.org/GPML/2007" Name="Sandbox" Data-Source="GenMAPP 2.0" Version="20070420" Author="Thomas Kelder">
+  <Graphics BoardWidth="7000.0" BoardHeight="7000.0" WindowWidth="18000.0" WindowHeight="12000.0" />
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="bd3">
+    <Graphics Color="Transparent" CenterX="4875.0" CenterY="2040.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="aeb">
+    <Graphics Color="Transparent" CenterX="5850.0" CenterY="765.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="d7c">
+    <Graphics Color="Transparent" CenterX="5175.0" CenterY="2340.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fc4">
+    <Graphics Color="Transparent" CenterX="4245.0" CenterY="2130.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b80">
+    <Graphics Color="Transparent" CenterX="3360.0" CenterY="2055.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="b97">
+    <Graphics Color="Transparent" CenterX="3150.0" CenterY="2280.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <DataNode TextLabel="Gene" Type="Unknown" GraphId="fa8">
+    <Graphics Color="Transparent" CenterX="2385.0" CenterY="855.0" Width="1200.0" Height="300.0" />
+    <Xref Database="" ID="" />
+  </DataNode>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="2835.0" y="900.0" GraphRef="fa8" />
+      <Point x="3300.0" y="2115.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="5730.0" y="825.0" GraphRef="aeb" />
+      <Point x="5160.0" y="1920.0" GraphRef="adb" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="1185.0" y="1560.0" />
+      <Point x="1230.0" y="1920.0" />
+    </Graphics>
+  </Line>
+  <Line>
+    <Graphics Color="Transparent">
+      <Point x="870.0" y="1935.0" />
+      <Point x="1230.0" y="1935.0" />
+    </Graphics>
+  </Line>
+  <Shape Type="Oval" GraphId="adb">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4192.5" CenterY="3472.5" Width="3106.0" Height="3316.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="a60">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4200.0" CenterY="4162.5" Width="2011.0" Height="856.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ca4">
+    <Graphics FillColor="ff00ff" Color="000000" CenterX="4725.0" CenterY="2940.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b9d">
+    <Graphics FillColor="ff8000" Color="000000" CenterX="3615.0" CenterY="2925.0" Width="1141.0" Height="571.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="be5">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5328.751335338579" CenterY="2958.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.165708192091355" />
+  </Shape>
+  <Shape Type="Arc" GraphId="fd8">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2673.7513353385793" CenterY="2838.1092076540785" Width="754.6213026878445" Height="586.0" Rotation="3.254333758344334" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a6a">
+    <Graphics FillColor="ff0000" Color="00ff00" CenterX="4160.403419840487" CenterY="3473.6724328490686" Width="481.0" Height="675.3509839752778" Rotation="6.1616158229150875" />
+  </Shape>
+  <Shape Type="Brace" GraphId="e59">
+    <Graphics FillColor="Transparent" Color="804000" CenterX="4185.0" CenterY="4207.5" Width="1771.4360605902777" Height="374.4976261721608" Rotation="3.148617109843849" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ec1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="5835.0" CenterY="3330.0" Width="240.0" Height="1260.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="dc1">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="2497.5" CenterY="3412.5" Width="285.0" Height="1215.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Arc" GraphId="c2c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="4155.0" CenterY="4260.0" Width="1920.0" Height="1350.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="b30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="5842.5" CenterY="3982.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="c30">
+    <Graphics FillColor="Transparent" Color="ffff00" CenterX="2497.5" CenterY="4042.5" Width="134.0" Height="256.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="bdf">
+    <Graphics FillColor="804000" Color="804000" CenterX="4192.5" CenterY="5265.0" Width="226.0" Height="421.0" Rotation="0.0" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ef7">
+    <Graphics FillColor="000000" Color="000000" CenterX="1282.5" CenterY="1995.0" Width="234.59580432500374" Height="139.71711122908414" Rotation="0.8610365369597351" />
+  </Shape>
+  <Shape Type="Oval" GraphId="a11">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="1518.5173838602184" CenterY="1925.0501964389562" Width="481.0" Height="196.69122698362315" Rotation="6.125923480159002" />
+  </Shape>
+  <Shape Type="Oval" GraphId="fd3">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="1173.5173838602184" CenterY="2225.0501964389564" Width="481.0" Height="196.69122698362315" Rotation="1.7177669033618879" />
+  </Shape>
+  <Shape Type="Oval" GraphId="ae3">
+    <Graphics FillColor="8080ff" Color="000000" CenterX="1410.0" CenterY="1792.5" Width="269.0" Height="436.0" Rotation="0.3944181831140263" />
+  </Shape>
+  <Shape Type="Oval" GraphId="e15">
+    <Graphics FillColor="8080ff" Color="000000" CenterX="1063.2400705735026" CenterY="2073.68608632908" Width="277.40078307670916" Height="436.0" Rotation="1.13846170466318" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="f3c">
+    <Graphics FillColor="Transparent" Color="000000" CenterX="3403.707071254841" CenterY="5172.894115010039" Width="243.04864865309347" Height="1036.0" Rotation="0.5736807482436229" />
+  </Shape>
+  <Shape Type="Rectangle" GraphId="fc7">
+    <Graphics FillColor="000000" Color="000000" CenterX="3191.3623785923714" CenterY="5496.532732492771" Width="243.04864865309347" Height="270.7709758801516" Rotation="0.5736807482436229" />
+  </Shape>
+  <Shape Type="Arc" GraphId="cd8">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2805.0" CenterY="4995.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc" GraphId="e4a">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2460.0" CenterY="4432.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <Shape Type="Arc" GraphId="b0b">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2685.0" CenterY="5055.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc" GraphId="ebb">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2340.0" CenterY="4492.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <Shape Type="Arc" GraphId="bb0">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2805.0" CenterY="5145.0" Width="659.0" Height="509.0" Rotation="1.2235576481925425" />
+  </Shape>
+  <Shape Type="Arc" GraphId="e0e">
+    <Graphics FillColor="Transparent" Color="808080" CenterX="2460.0" CenterY="4582.5" Width="719.0" Height="554.0" Rotation="4.296015442082403" />
+  </Shape>
+  <InfoBox CenterX="0.0" CenterY="0.0" />
+</Pathway>
