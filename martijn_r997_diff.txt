Index: trunk/src/core/org/pathvisio/view/Label.java
===================================================================
--- trunk/src/core/org/pathvisio/view/Label.java	(revision 996)
+++ trunk/src/core/org/pathvisio/view/Label.java	(revision 997)
@@ -16,6 +16,8 @@
 //
 package org.pathvisio.view;
 
+import java.awt.BasicStroke;
+import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.Font;
 import java.awt.Graphics2D;
@@ -195,7 +197,16 @@
 		
 		Rectangle2D tb = g.getFontMetrics().getStringBounds(ats.getIterator(), 0, label.length(), g);
 		g.drawString(ats.getIterator(), area.x + (int)(area.width / 2) - (int)(tb.getWidth() / 2), 
-					area.y + (int)(area.height / 2) + (int)(tb.getHeight() / 2));		
+					area.y + (int)(area.height / 2) + (int)(tb.getHeight() / 2));
+
+		if(isHighlighted())
+		{
+			Color hc = getHighlightColor();
+			g.setColor(new Color (hc.getRed(), hc.getGreen(), hc.getBlue(), 128));
+			g.setStroke (new BasicStroke());
+			g.fillRect(getVLeft(), getVTop(), getVWidth(), getVHeight());
+		}
+
 	}
 		
 //	public void gmmlObjectModified(PathwayEvent e) {
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 997)
@@ -82,18 +82,40 @@
 		doc.getRootElement().addContent(e);
 	}
 
-	public void modify(PwyElt oldElt, PwyElt newElt, String path, String oldVal, String newVal)
+	PwyElt curOldElt = null;
+	PwyElt curNewElt = null;
+	Element curModifyElement = null;
+	
+	public void modifyStart (PwyElt oldElt, PwyElt newElt)
 	{
-		Element e = (new Element("Modify"));
+		curOldElt = oldElt;
+		curNewElt = newElt;
+		
+		curModifyElement = (new Element("Modify"));
 		try
 		{
-			Element f = GpmlFormat.createJdomElement(oldElt.getElement(), GpmlFormat.GPML);
-			e.addContent (f);
+			Element f = GpmlFormat.createJdomElement(curOldElt.getElement(), GpmlFormat.GPML);
+			curModifyElement.addContent (f);
 		}
 		catch (ConverterException ex) { Logger.log.error ("Converter exception", ex); }
-		e.setAttribute("path", path);
+	}
+
+	public void modifyEnd ()
+	{
+		doc.getRootElement().addContent(curModifyElement);
+		curOldElt = null;
+		curNewElt = null;
+	}
+
+	public void modifyAttr (String attr, String oldVal, String newVal)
+	{
+		assert (curOldElt != null);
+		assert (curNewElt != null);
+		
+		Element e = new Element ("Change");
+		e.setAttribute("attr", attr);
 		e.setAttribute("old", oldVal);
 		e.setAttribute("new", newVal);
-		doc.getRootElement().addContent(e);
+		curModifyElement.addContent (e);
 	}
 }
\ No newline at end of file
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 997)
@@ -39,15 +39,31 @@
 	abstract public void delete(PwyElt oldElt);
 
 	/**
-	   Modification of an element that is present in both documents.
-	   @param path is an XPath-like expression that points to the
-	   subelement or attribute that was modified.
-	   @param oldVal is the old value of that tag / attribute
-	   @param newVal is the new value of that tag / attribute
+	   A single modified attribute of an element that is present in
+	   both documents.  This is always called after a modifyStart and
+	   before a modifyEnd event.
+	   @param attr is the name of the attribute that was modified
+	   @param oldVal is the old value of that attribute
+	   @param newVal is the new value of that attribute
 	 */
-	abstract public void modify(PwyElt oldElt, PwyElt newElt, String path, String oldVal, String newVal);
+	abstract public void modifyAttr(String attr, String oldVal, String newVal);
 
 	/**
+	   Start of a list of modifications to an element that is present
+	   in both documents. Will be followed by one or more modifyItem()
+	   events, and finally by a modifyEnd() event.
+
+	   modifyStart is guaranteed to be called only if one or more
+	   attributes have changed.
+	 */
+	abstract public void modifyStart(PwyElt oldElt, PwyElt newElt);
+
+	/**
+	   Called to indicate the end of a list of modified attributes.
+	 */
+	abstract public void modifyEnd();
+	
+	/**
 	   Write all pending output to file or flush output buffers,
 	   depending on the actual implementation of this
 	*/
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 997)
@@ -79,15 +79,27 @@
 	 */
 	void writeModifications (PwyElt newElt, DiffOutputter outputter)
 	{
+		boolean opened = false; // indicates if modifyStart has been
+								// sent already for current PwyElt.
 		for (String key : contents.keySet())
 		{
 			if (newElt.contents.containsKey(key))
 			{
 				if (!contents.get(key).equals(newElt.contents.get(key)))
 				{
-					outputter.modify (this, newElt, key, contents.get(key), newElt.contents.get(key));
+					if (!opened)
+					{
+						outputter.modifyStart (this, newElt);
+						opened = true;
+					}
+					outputter.modifyAttr (key, contents.get(key), newElt.contents.get(key));
 				}
 			}
-		}			
+		}
+		if (opened)
+		{
+			outputter.modifyEnd();
+			opened = false;
+		}				
 	}
 }
\ No newline at end of file
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 997)
@@ -94,11 +94,15 @@
 			PwyElt maxNewElt = null;
 			for (PwyElt newElt : newDoc.getElts())
 			{
-				int score = simFun.getSimScore (oldElt, newElt);
-				if (score > maxScore)
+				// if it's the first node, or if the newElt is not yet in the searchpath
+				if (currentNode == null || !currentNode.ancestryHasElt (newElt))
 				{
-					maxNewElt = newElt;
-					maxScore = score;
+					int score = simFun.getSimScore (oldElt, newElt);
+					if (score > maxScore)
+					{
+						maxNewElt = newElt;
+						maxScore = score;
+					}
 				}
 			}
 
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 997)
@@ -65,6 +65,7 @@
 			"\n" +
 			"Finds the difference between the two files\n"
 			);
+		System.exit(1);
 	}
 	
 	/**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 997)
@@ -16,6 +16,9 @@
 //
 package org.pathvisio.gpmldiff;
 
+import java.util.Set;
+import java.util.HashSet;
+
 /**
    A search node, important part of the Dijkstra algorithm
 */
@@ -23,7 +26,10 @@
 {
 	float cost;
 	SearchNode parent;
-
+	
+	// pwy elts in use by parent search path, both old and new
+	Set<PwyElt> parentSet = new HashSet<PwyElt>(); 
+	
 	/**
 	   return the Parent of this SearchNode, which corresponds to the
 	   state of the Search engine when this node was opened
@@ -46,6 +52,15 @@
 	{
 		return newElt;
 	}
+
+	/**
+	   Determine if a certain pwy elt is already in the ancestry of this Search Node.
+	   (old or new doesn't matter, as these sets never overlap)
+	 */
+	public boolean ancestryHasElt(PwyElt elt)
+	{
+		return parentSet.contains (elt);
+	}
 	
 	/**
 	   Create a new SearchNode.
@@ -59,5 +74,11 @@
 		newElt = _newElt;
 		assert (oldElt != null);
 		assert (newElt != null);
+		if (parent != null)
+		{
+			parentSet = parent.parentSet;
+		}
+		parentSet.add (oldElt);
+		parentSet.add (newElt);
 	}
 }
\ No newline at end of file
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 997)
@@ -20,9 +20,18 @@
 import java.awt.Dimension;
 import java.awt.Rectangle;
 import java.awt.Font;
+import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
+import java.awt.geom.RoundRectangle2D;
 import java.awt.font.TextLayout;
+import java.awt.font.FontRenderContext;
+import java.awt.font.LineBreakMeasurer;
+import java.text.AttributedCharacterIterator;
+import java.text.AttributedString;
 import java.io.*;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Collections;
 import org.apache.batik.dom.GenericDOMImplementation;
 import org.apache.batik.svggen.SVGGraphics2D;
 import org.pathvisio.model.ConverterException;
@@ -36,6 +45,14 @@
 
 class SvgOutputter extends DiffOutputter
 {
+	// graphics parameters
+	private static final int BALOON_Y_SPACER = 20;
+	private static final int CENTER_MARGIN = 120;
+	private static final int BALOON_MARGIN = 5;
+	private static final int HEADER_HIGHT = 32;
+	private static final int BALOON_FONT_SIZE = 7;
+	private static final int HEADER_FONT_SIZE = 16;
+	
 	private OutputStream out;
 	private PwyDoc oldPwy;
 	private PwyDoc newPwy;
@@ -45,7 +62,6 @@
 	VPathway vpwy[] = {new VPathway(null), new VPathway(null)};
 	SVGGraphics2D svgGenerator;
 	
-	private static final int HEADER_HIGHT = 32;
 	int deltax = 0;
 	
 	SvgOutputter(PwyDoc _oldPwy, PwyDoc _newPwy, File f) throws IOException
@@ -83,10 +99,10 @@
 
 		deltax = width[0];
 		svgGenerator = new SVGGraphics2D(document);
-		svgGenerator.setSVGCanvasSize (new Dimension (width[0] + width[1], maxh + HEADER_HIGHT));
+		svgGenerator.setSVGCanvasSize (new Dimension (width[0] + width[1] + CENTER_MARGIN, maxh + HEADER_HIGHT));
 
 		// titles
-		svgGenerator.setFont(new Font(null, Font.PLAIN, 16));
+		svgGenerator.setFont(new Font(null, Font.PLAIN, HEADER_FONT_SIZE));
 		TextLayout tl = new TextLayout(
 			"OLD: " + oldPwy.getSourceFile().getName(),
 			svgGenerator.getFont(), svgGenerator.getFontRenderContext());
@@ -96,17 +112,69 @@
 			"NEW: " + newPwy.getSourceFile().getName(),
 			svgGenerator.getFont(), svgGenerator.getFontRenderContext());
 		tb = tl.getBounds();
-		tl.draw (svgGenerator, (float)(width[PWY_OLD] + (width[PWY_OLD] - tb.getWidth()) / 2), (float)tb.getHeight());
+		tl.draw (
+			svgGenerator,
+			(float)(width[PWY_OLD] + CENTER_MARGIN + (width[PWY_OLD] - tb.getWidth()) / 2),
+			(float)tb.getHeight()
+			);
 
 	}
 
 	public void flush() throws IOException
-	{		
+	{
+		Collections.sort (modifications);
+		
+		// mod hints
+		svgGenerator.setFont(new Font(null, Font.PLAIN, HEADER_FONT_SIZE));
+		int ypos = HEADER_HIGHT;
+		for (ModData m : modifications)
+		{
+			int xpos = deltax;
+			FontRenderContext frc = svgGenerator.getFontRenderContext();
+
+			AttributedCharacterIterator styledText =
+				new AttributedString (m.hint).getIterator();
+			// let styledText be an AttributedCharacterIterator containing at least
+			// one character
+			
+			LineBreakMeasurer measurer = new LineBreakMeasurer(styledText, frc);
+
+			int top = ypos;
+			while (measurer.getPosition() < m.hint.length()) {
+				
+				TextLayout layout = measurer.nextLayout(CENTER_MARGIN - 2 * BALOON_MARGIN);
+				
+				ypos += (layout.getAscent());				
+				layout.draw(svgGenerator, xpos + BALOON_MARGIN, ypos);
+				ypos += layout.getDescent() + layout.getLeading();
+			}
+			int bot = ypos;			
+			m.midy = top + (bot - top) / 2;
+			ypos += BALOON_Y_SPACER;
+
+			svgGenerator.draw (
+				new RoundRectangle2D.Double (
+					xpos, top,
+					CENTER_MARGIN, bot - top,
+					BALOON_MARGIN, BALOON_MARGIN));			
+		}
+		
+		// mod lines
+		svgGenerator.setColor (Color.YELLOW);
+		
+		for (ModData m : modifications)
+		{
+			svgGenerator.drawLine (
+				m.x1, m.y1,	deltax,	m.midy);
+			svgGenerator.drawLine (
+				deltax + CENTER_MARGIN,	m.midy,	m.x2, m.y2);
+		}
+		
 		// pwy's themselves		
  		svgGenerator.translate (0, HEADER_HIGHT);
 		vpwy[PWY_OLD].draw (svgGenerator, null, false);
 		svgGenerator.setClip (null); // reset clipping
- 		svgGenerator.translate (deltax, 0);
+ 		svgGenerator.translate (deltax + CENTER_MARGIN, 0);
  		vpwy[PWY_NEW].draw (svgGenerator, null, false);
 		
 		boolean useCSS = true;
@@ -129,26 +197,81 @@
 		velt.highlight (Color.RED);
 	}
 
-	public void modify(PwyElt oldElt, PwyElt newElt, String path, String oldVal, String newVal)
+
+	/**
+	   private data about a modification,
+	   for displaying hints in the middle.
+	 */
+	private class ModData implements Comparable<ModData>
 	{
-		VPathwayElement velt = findElt (oldElt, vpwy[PWY_OLD]);
+		int midy;
+		String hint;
+		int x1;
+		int y1;
+		int x2;
+		int y2;
+
+		ModData (int x1, int y1, int x2, int y2, String hint)
+		{
+			this.x1 = x1;
+			this.y1 = y1;
+			this.x2 = x2;
+			this.y2 = y2;
+			this.hint = hint;
+		}
+
+		/**
+		   note: compareTo <=> equals for ModData
+		*/
+		public int compareTo (ModData other)
+		{
+			return y1 + y2 - other.y1 - other.y2;
+		}
+	}
+
+	PwyElt curOldElt = null;
+	PwyElt curNewElt = null;
+	String curHint;
+	
+	public void modifyStart (PwyElt oldElt, PwyElt newElt)
+	{
+		curOldElt = oldElt;
+		curNewElt = newElt;
+		curHint = "";
+	}
+
+	public void modifyEnd ()
+	{
+		VPathwayElement velt = findElt (curOldElt, vpwy[PWY_OLD]);
 		assert (velt != null);
 		velt.highlight (Color.YELLOW);
 		Rectangle r1 = velt.getVBounds();
 		
-		velt = findElt (newElt, vpwy[PWY_NEW]);
+		velt = findElt (curNewElt, vpwy[PWY_NEW]);
 		assert (velt != null);
 		velt.highlight (Color.YELLOW);
 		Rectangle r2 = velt.getVBounds();
 
-		svgGenerator.setColor (Color.YELLOW);
-		svgGenerator.drawLine (
-			(int)(r1.getX() + r1.getWidth() / 2),
-			(int)(r1.getY() + r1.getHeight() / 2 + HEADER_HIGHT),
-			(int)(r2.getX() + r2.getWidth() / 2) + deltax,
-			(int)(r2.getY() + r2.getHeight() / 2) + HEADER_HIGHT);
+		modifications.add (
+			new ModData (
+				(int)(r1.getX() + r1.getWidth() / 2),
+				(int)(r1.getY() + r1.getHeight() / 2) + HEADER_HIGHT,
+				(int)(r2.getX() + r2.getWidth() / 2) + deltax + CENTER_MARGIN,
+				(int)(r2.getY() + r2.getHeight() / 2) + HEADER_HIGHT,
+				curHint)
+			);
+		
+		curOldElt = null;
+		curNewElt = null;
 	}
 
+	private List <ModData> modifications = new ArrayList<ModData>();
+	
+	public void modifyAttr(String attr, String oldVal, String newVal)
+	{
+		curHint += attr + " changed. ";
+	}
+
 	/**
 	   helper to find a VPathwayElt that corresponds to a certain PwyElt
 	*/
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 996)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 997)
@@ -50,9 +50,28 @@
 		output.println ("delete: " + oldElt.summary());
 	}
 
-	public void modify(PwyElt oldElt, PwyElt newElt, String path, String oldVal, String newVal)
+	PwyElt curOldElt = null;
+	PwyElt curNewElt = null;
+	
+	public void modifyStart (PwyElt oldElt, PwyElt newElt)
 	{
-		output.println ("modify: " + newElt.summary() + "[" + path + ": '" + oldVal + "' -> '" + newVal + "']");
+		curOldElt = oldElt;
+		curNewElt = newElt;
 	}
 
+	public void modifyEnd ()
+	{
+		curOldElt = null;
+		curNewElt = null;
+	}
+	
+	public void modifyAttr(String attr, String oldVal, String newVal)
+	{
+		assert (curOldElt != null);
+		assert (curNewElt != null);
+		output.println ("modify: " + curNewElt.summary() + "[" + attr + ": '" + oldVal + "' -> '" + newVal + "']");
+	}
+
+	
+
 }
\ No newline at end of file
