Index: trunk/src/test/org/pathvisio/view/Test.java
===================================================================
--- trunk/src/test/org/pathvisio/view/Test.java	(revision 934)
+++ trunk/src/test/org/pathvisio/view/Test.java	(revision 935)
@@ -18,19 +18,19 @@
 
 import junit.framework.TestCase;
 
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
+//import org.eclipse.swt.SWT;
+//import org.eclipse.swt.layout.FillLayout;
+//import org.eclipse.swt.widgets.Display;
+//import org.eclipse.swt.widgets.Shell;
 
-import org.pathvisio.model.Pathway;
-import org.pathvisio.model.PathwayElement;
-import org.pathvisio.model.ObjectType;
+//import org.pathvisio.model.Pathway;
+//import org.pathvisio.model.PathwayElement;
+//import org.pathvisio.model.ObjectType;
 
 public class Test extends TestCase {
 	
 	VPathway drawing;
-    private Shell shell;
+//    private Shell shell;
 	
 	public void setUp()
 	{
Index: trunk/src/v1/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 934)
+++ trunk/src/v1/org/pathvisio/gui/MainWindow.java	(revision 935)
@@ -16,318 +16,56 @@
 //
 package org.pathvisio.gui;
 
-import java.net.URL;
-import java.util.Vector;
-
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.ActionContributionItem;
-import org.eclipse.jface.action.ControlContribution;
 import org.eclipse.jface.action.CoolBarManager;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.action.IContributionItem;
-import org.eclipse.jface.action.IMenuCreator;
 import org.eclipse.jface.action.MenuManager;
 import org.eclipse.jface.action.Separator;
-import org.eclipse.jface.action.StatusLineManager;
-import org.eclipse.jface.action.ToolBarContributionItem;
-import org.eclipse.jface.action.ToolBarManager;
-import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.jface.dialogs.ProgressMonitorDialog;
-import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.jface.window.ApplicationWindow;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.custom.ScrolledComposite;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Globals;
-import org.pathvisio.data.DBConnector;
-import org.pathvisio.data.Gdb;
 import org.pathvisio.data.Gex;
-import org.pathvisio.data.Gex.ExpressionDataEvent;
-import org.pathvisio.data.Gex.ExpressionDataListener;
-import org.pathvisio.gui.Engine.ApplicationEvent;
-import org.pathvisio.gui.Engine.ApplicationEventListener;
+import org.pathvisio.gui.BackpagePanel;
+import org.pathvisio.gui.CommonActions;
+import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.GuiMain;
+import org.pathvisio.gui.PropertyPanel;
+import org.pathvisio.gui.TabbedSidePanel;
 import org.pathvisio.preferences.Preferences;
 import org.pathvisio.search.PathwaySearchComposite;
-import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.VPathway;
 import org.pathvisio.visualization.LegendPanel;
-import org.pathvisio.visualization.VisualizationManager;
 
 /**
  * This class is the main class in the GPML project. 
  * It acts as a container for pathwaydrawings and facilitates
  * loading, creating and saving drawings to and from GPML.
  */
-public class MainWindow extends ApplicationWindow implements 
-						ApplicationEventListener, ExpressionDataListener
+public class MainWindow extends MainWindowBase
 {
-	private static final long serialVersionUID = 1L;
-    static int ZOOM_TO_FIT = -1;
-	
-	private CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
-	private CommonActions.NewAction newAction = new CommonActions.NewAction (this);
-	private CommonActions.OpenAction openAction = new CommonActions.OpenAction (this);	
-	private CommonActions.ImportAction importAction = new CommonActions.ImportAction (this);	
-	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
-	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
-	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
-	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
-	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
-	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
-	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
-	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
-	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
-	private CommonActions.SwitchEditModeAction switchEditModeAction = new CommonActions.SwitchEditModeAction(this);
-	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
-	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
-	private AlignActions.AlignCenterXAction alignCenterXAction = new AlignActions.AlignCenterXAction(this);
-	private AlignActions.AlignCenterYAction alignCenterYAction = new AlignActions.AlignCenterYAction(this);
-	private AlignActions.AlignLeftAction alignLeftAction = new AlignActions.AlignLeftAction(this);
-	private AlignActions.AlignRightAction alignRightAction = new AlignActions.AlignRightAction(this);
-	private AlignActions.AlignTopAction alignTopAction = new AlignActions.AlignTopAction(this);
-	private AlignActions.AlignBottomAction alignBottomAction = new AlignActions.AlignBottomAction(this);
-	private AlignActions.SetCommonWidthAction setCommonWidthAction = new AlignActions.SetCommonWidthAction(this);
-	private AlignActions.SetCommonHeightAction setCommonHeightAction = new AlignActions.SetCommonHeightAction(this);
-
-	/**
-	 * {@link Action} to select a Gene Database
-	 */
-	private class SelectGdbAction extends Action
+	public MainWindow()
 	{
-		MainWindow window;
-		public SelectGdbAction(MainWindow w)
-		{
-			window = w;
-			setText("Select &Gene Database");
-			setToolTipText("Select Gene Database");
-		}
-		
-		public void run () {			
-			try {
-				DBConnector dbcon = Gdb.getDBConnector();
-				String dbName = dbcon.openChooseDbDialog(getShell());
-				
-				if(dbName == null) return;
-				
-				Gdb.connect(dbName);
-				setStatus("Using Gene Database: '" + Engine.getPreferences().getString(Preferences.PREF_CURR_GDB) + "'");
-				cacheExpressionData();
-			} catch(Exception e) {
-				String msg = "Failed to open Gene Database; " + e.getMessage();
-				MessageDialog.openError (window.getShell(), "Error", 
-						"Error: " + msg + "\n\n" + 
-						"See the error log for details.");
-				Engine.log.error(msg, e);
-			}
-		}
+		this(null);
 	}
-
+	
 	/**
-	 * {@link Action} to show or hide the right sidepanel
+	 *Constructor for the MainWindow class
+	 *Initializes new MainWindow and sets properties for frame
 	 */
-	public class ShowRightPanelAction extends Action
+	public MainWindow(Shell shell)
 	{
-		MainWindow window;
-		public ShowRightPanelAction (MainWindow w)
-		{
-			super("Show &information panel", IAction.AS_CHECK_BOX);
-			window = w;
-			setChecked(true);
-		}
+		super(shell);
 		
-		public void run() {
-			if(isChecked()) rightPanel.show();
-			else rightPanel.hide();
-		}
-	}
-
-	/**
-	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
-	 */
-	private void cacheExpressionData()
-	{
-		if(Engine.isDrawingOpen())
-		{
-			VPathway drawing = Engine.getVPathway();
-			//Check for neccesary connections
-			if(Gex.isConnected() && Gdb.isConnected())
-			{
-				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
-				try {
-					dialog.run(true, true, Gex.createCacheRunnable(drawing.getMappIds(), drawing.getSystemCodes()));
-					drawing.redraw();
-				} catch(Exception e) {
-					String msg = "while caching expression data: " + e.getMessage();					
-					MessageDialog.openError (getShell(), "Error", 
-							"Error: " + msg + "\n\n" + 
-							"See the error log for details.");
-					Engine.log.error(msg, e);
-				}
-			}
-		}
-	}
-
-	/**
-	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
-	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
-	 */
-	public void deselectNewItemActions()
-	{
-		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-	
-	public void deselectAlignItemActions()
-	{
-		IContributionItem[] items = alignActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-	// Elements of the coolbar
-	ToolBarContributionItem commonActionsCI;
-	ToolBarContributionItem editActionsCI;
-	ToolBarContributionItem alignActionsCI;
-	ToolBarContributionItem viewActionsCI;
-	protected CoolBarManager createCoolBarManager(int style)
-	{
-		createCommonActionsCI();
-		createEditActionsCI();
-		createAlignActionsCI();
-		createViewActionsCI();
+		addMenuBar();
+		addStatusLine();
+		addCoolBar(SWT.FLAT | SWT.LEFT);
 		
-		CoolBarManager coolBarManager = new CoolBarManager(style);
-		coolBarManager.setLockLayout(true);
-		
-		coolBarManager.add(commonActionsCI);
-		coolBarManager.add(viewActionsCI);
-		return coolBarManager;
+		Engine.addApplicationEventListener(this);
+		Gex.addListener(this);
 	}
 	
 	/**
-	 * Creates element of the coolbar containing common actions as new, save etc.
-	 */
-	protected void createCommonActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(newAction);
-		toolBarManager.add(openAction);
-		toolBarManager.add(saveAction);
-		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
-	}
-	
-	/**
-	 * Creates element of the coolbar only shown in edit mode (new element actions)
-	 */
-	protected void createEditActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);		
-		toolBarManager.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLABEL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINEMENU));
-		toolBarManager.add(new NewElementAction(VPathway.NEWRECTANGLE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWOVAL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWARC));
-		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
-
-		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
-	}
-	
-	/**
-	 * Creates element of the coolbar containing controls related to viewing a VPathway
-	 */
-	protected void createViewActionsCI()
-	{
-		final MainWindow window = this;
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		//Add zoomCombo
-		toolBarManager.add(new ControlContribution("ZoomCombo") {
-			protected Control createControl(Composite parent) {
-				final Combo zoomCombo = new Combo(parent, SWT.DROP_DOWN);
-				zoomCombo.setItems(new String[] { "200%", "100%", "75%", "50%", "Zoom to fit" });
-				zoomCombo.setText("100%");
-				zoomCombo.addSelectionListener(new SelectionAdapter() {
-					public void widgetSelected(SelectionEvent e) {
-						int pctZoom = 100;
-						String zoomText = zoomCombo.getText().replace("%", "");
-						try {
-							pctZoom = Integer.parseInt(zoomText);
-						} catch (Exception ex) { 
-							if(zoomText.equals("Zoom to fit"))
-									{ pctZoom = ZOOM_TO_FIT; } else { return; }
-						}
-						new CommonActions.ZoomAction(window, pctZoom).run();
-					}
-					public void widgetDefaultSelected(SelectionEvent e) { widgetSelected(e); }
-				});
-				return zoomCombo;
-			}
-		});
-		//Add swich to editmode
-		toolBarManager.add(switchEditModeAction);
-		
-		viewActionsCI =  new ToolBarContributionItem(toolBarManager, "SwitchActions");
-	}
-	
-	/**
-	 * Shows or hides the editActionsCI
-	 * @param show	true/false for either show or hide
-	 */
-	public void showEditActionsCI(boolean show)
-	{
-		if(show) {
-			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
-		}
-		else {
-			getCoolBarManager().remove(editActionsCI);
-		}
-//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
-		getCoolBarManager().update(true);
-	}
-	
-    /**
-	   Shows or hides the alignActionsCI.
-	   @param show	true/false for either show or hide
-	*/
-	public void showAlignActionsCI(boolean show)
-	{
-		if(show) {
-			getCoolBarManager().insertAfter(editActionsCI.getId(), alignActionsCI);
-		}
-		else {
-			getCoolBarManager().remove(alignActionsCI);
-		}
-//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
-		getCoolBarManager().update(true);
-	}
-		
-	protected StatusLineManager createStatusLineManager() {
-		return super.createStatusLineManager();
-	}
-
-	/**
 	 *Builds and ads a menu to the frame
 	 */
 	protected MenuManager createMenuManager()
@@ -374,52 +112,24 @@
 		return menuManager;
 	}
 	
-	public MainWindow()
+	protected CoolBarManager createCoolBarManager(int style)
 	{
-		this(null);
-	}
-
-	private MenuManager menuManager = null;
-	/**
-	 * can be accessed by plugins etc. 
-	 * to add menu items and even complete menus.
-	 * 
-	 * (plugin API)
-	 */
-	public MenuManager getMenuManager()
-	{
-		return menuManager;
-	}
-	/**
-	 *Constructor for the MainWindow class
-	 *Initializes new MainWindow and sets properties for frame
-	 */
-	public MainWindow(Shell shell)
-	{
-		super(shell);
+		createCommonActionsCI();
+		createEditActionsCI();
+		createAlignActionsCI();
+		createViewActionsCI();
 		
-		addMenuBar();
-		addStatusLine();
-		addCoolBar(SWT.FLAT | SWT.LEFT);
+		CoolBarManager coolBarManager = new CoolBarManager(style);
+		coolBarManager.setLockLayout(true);
 		
-		Engine.addApplicationEventListener(this);
-		Gex.addListener(this);
+		coolBarManager.add(commonActionsCI);
+		coolBarManager.add(viewActionsCI);
+		return coolBarManager;
 	}
 	
-	public boolean close() {
-		Engine.fireApplicationEvent(
-				new ApplicationEvent(this, ApplicationEvent.CLOSE_APPLICATION));
-		return super.close();
-	}
-	
-	public ScrolledComposite sc;
-	public BackpagePanel bpBrowser; //Browser for showing backpage information
-	public PropertyPanel propertyTable;	//Table showing properties of Graphics objects
-	SashForm sashForm; //SashForm containing the drawing area and sidebar
-	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
-	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
-	LegendPanel legend; //Legend to display colorset information
-
+	/**
+	 * Create and initialize widgets on the main window.
+	 */
 	protected Control createContents(Composite parent)
 	{		
 		Shell shell = parent.getShell();
@@ -446,13 +156,11 @@
 				rightPanel.getTabFolder(), SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
 		pwSearchComposite = new PathwaySearchComposite(rightPanel.getTabFolder(), SWT.NONE, this);
 		legend = new LegendPanel(rightPanel.getTabFolder(), SWT.V_SCROLL | SWT.H_SCROLL);
-		Composite visPanel = VisualizationManager.createSidePanel(rightPanel.getTabFolder());
 		
 		rightPanel.addTab(bpBrowser, "Backpage");
 		rightPanel.addTab(propertyTable, "Properties");
 		rightPanel.addTab(pwSearchComposite, "Pathway Search");
 		rightPanel.addTab(legend, "Legend");
-		rightPanel.addTab(visPanel, "Visualization");
 		
 		int sidePanelSize = Engine.getPreferences().getInt(Preferences.PREF_SIDEPANEL_SIZE);
 		sashForm.setWeights(new int[] {100 - sidePanelSize, sidePanelSize});
@@ -465,91 +173,7 @@
 
 		Engine.updateTitle();
 		
-		return parent;
-		
+		return parent;		
 	};
-
-	public TabbedSidePanel getSidePanel() { return rightPanel; }
 	
-	public LegendPanel getLegend() { return legend; }
-	
-	public void showLegend(boolean show) {	
-		if(show && Gex.isConnected()) {
-			if(rightPanel.isVisible("Legend")) return; //Legend already visible, only refresh
-			rightPanel.unhideTab("Legend", 0);
-			rightPanel.selectTab("Legend");
-		}
-		
-		else rightPanel.hideTab("Legend");
-	}
-			
-	/**
-	 * Creates a new empty drawing canvas
-	 * @return the empty {@link VPathway}
-	 */
-	public VPathway createNewDrawing()
-	{		
-		return new VPathway(sc, SWT.NO_BACKGROUND);
-	}
-	
-	public void applicationEvent(ApplicationEvent e) {
-		VPathway drawing = null;
-		switch(e.type) {
-		case ApplicationEvent.NEW_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			break;
-		case ApplicationEvent.OPEN_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			if(Gex.isConnected()) cacheExpressionData();
-			break;	
-		}
-	}
-
-	public void expressionDataEvent(ExpressionDataEvent e) {
-		switch(e.type) {
-		case ExpressionDataEvent.CONNECTION_CLOSED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					showLegend(false);
-				}
-			});
-			break;
-		case ExpressionDataEvent.CONNECTION_OPENED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					cacheExpressionData();
-					showLegend(true);
-				}
-			});
-			break;
-		}
-	}
-
-    //	KH 20070514 begin
-	protected void createAlignActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(alignCenterXAction);
-		toolBarManager.add(alignCenterYAction);
-		toolBarManager.add(alignLeftAction);
-		toolBarManager.add(alignRightAction);
-		toolBarManager.add(alignTopAction);
-		toolBarManager.add(alignBottomAction);
-		toolBarManager.add(setCommonWidthAction);
-		toolBarManager.add(setCommonHeightAction);
-	
-		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
-	}
-	
-//	KH end
-	/**
-	   Invoked when user tries to close window
-	*/
-	protected boolean canHandleShellCloseEvent()
-	{
-		return Engine.canDiscardPathway();
-	}
-	
 } // end of class
Index: trunk/src/v2/org/pathvisio/gui/MainWindow.java
===================================================================
--- trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 934)
+++ trunk/src/v2/org/pathvisio/gui/MainWindow.java	(revision 935)
@@ -17,16 +17,9 @@
 package org.pathvisio.gui;
 
 import java.io.File;
-import java.net.URL;
-import java.util.Vector;
 
 import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.ActionContributionItem;
-import org.eclipse.jface.action.ControlContribution;
 import org.eclipse.jface.action.CoolBarManager;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.action.IContributionItem;
-import org.eclipse.jface.action.IMenuCreator;
 import org.eclipse.jface.action.MenuManager;
 import org.eclipse.jface.action.Separator;
 import org.eclipse.jface.action.StatusLineManager;
@@ -35,21 +28,15 @@
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.jface.window.ApplicationWindow;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.custom.ScrolledComposite;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.FileDialog;
-import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Globals;
 import org.pathvisio.R.RController;
 import org.pathvisio.R.RDataIn;
 import org.pathvisio.R.RCommands.RException;
@@ -60,12 +47,13 @@
 import org.pathvisio.data.GexImportWizard;
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
-import org.pathvisio.gui.Engine.ApplicationEvent;
-import org.pathvisio.gui.Engine.ApplicationEventListener;
+import org.pathvisio.gui.BackpagePanel;
+import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.GuiMain;
+import org.pathvisio.gui.PropertyPanel;
+import org.pathvisio.gui.TabbedSidePanel;
 import org.pathvisio.preferences.Preferences;
 import org.pathvisio.search.PathwaySearchComposite;
-import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.VPathway;
 import org.pathvisio.visualization.LegendPanel;
 import org.pathvisio.visualization.VisualizationDialog;
 import org.pathvisio.visualization.VisualizationManager;
@@ -75,90 +63,9 @@
  * It acts as a container for pathwaydrawings and facilitates
  * loading, creating and saving drawings to and from GPML.
  */
-public class MainWindow extends ApplicationWindow implements 
-						ApplicationEventListener, ExpressionDataListener
+public class MainWindow extends MainWindowBase
 {
-	private static final long serialVersionUID = 1L;
-	static int ZOOM_TO_FIT = -1;
-		
-	private CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
-	private CommonActions.NewAction newAction = new CommonActions.NewAction (this);
-	private CommonActions.OpenAction openAction = new CommonActions.OpenAction (this);	
-	private CommonActions.ImportAction importAction = new CommonActions.ImportAction (this);	
-	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
-	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
-	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
-	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
-	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
-	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
-	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
-	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
-	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
-	private CommonActions.SwitchEditModeAction switchEditModeAction = new CommonActions.SwitchEditModeAction(this);
-	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
-	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
-	private AlignActions.AlignCenterXAction alignCenterXAction = new AlignActions.AlignCenterXAction(this);
-	private AlignActions.AlignCenterYAction alignCenterYAction = new AlignActions.AlignCenterYAction(this);
-	private AlignActions.AlignLeftAction alignLeftAction = new AlignActions.AlignLeftAction(this);
-	private AlignActions.AlignRightAction alignRightAction = new AlignActions.AlignRightAction(this);
-	private AlignActions.AlignTopAction alignTopAction = new AlignActions.AlignTopAction(this);
-	private AlignActions.AlignBottomAction alignBottomAction = new AlignActions.AlignBottomAction(this);
-	private AlignActions.SetCommonWidthAction setCommonWidthAction = new AlignActions.SetCommonWidthAction(this);
-	private AlignActions.SetCommonHeightAction setCommonHeightAction = new AlignActions.SetCommonHeightAction(this);
-
 	/**
-	 * {@link Action} to select a Gene Database
-	 */
-	private class SelectGdbAction extends Action
-	{
-		MainWindow window;
-		public SelectGdbAction(MainWindow w)
-		{
-			window = w;
-			setText("Select &Gene Database");
-			setToolTipText("Select Gene Database");
-		}
-		
-		public void run () {			
-			try {
-				DBConnector dbcon = Gdb.getDBConnector();
-				String dbName = dbcon.openChooseDbDialog(getShell());
-				
-				if(dbName == null) return;
-				
-				Gdb.connect(dbName);
-				setStatus("Using Gene Database: '" + Engine.getPreferences().getString(Preferences.PREF_CURR_GDB) + "'");
-				cacheExpressionData();
-			} catch(Exception e) {
-				String msg = "Failed to open Gene Database; " + e.getMessage();
-				MessageDialog.openError (window.getShell(), "Error", 
-						"Error: " + msg + "\n\n" + 
-						"See the error log for details.");
-				Engine.log.error(msg, e);
-			}
-		}
-	}
-
-	/**
-	 * {@link Action} to show or hide the right sidepanel
-	 */
-	public class ShowRightPanelAction extends Action
-	{
-		MainWindow window;
-		public ShowRightPanelAction (MainWindow w)
-		{
-			super("Show &information panel", IAction.AS_CHECK_BOX);
-			window = w;
-			setChecked(true);
-		}
-		
-		public void run() {
-			if(isChecked()) rightPanel.show();
-			else rightPanel.hide();
-		}
-	}
-
-	/**
 	 * {@link Action} to select an expression dataset
 	 */
 	private class SelectGexAction extends Action
@@ -190,51 +97,8 @@
 	}
 	private SelectGexAction selectGexAction = new SelectGexAction(this);
 	
-	/**
-	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
-	 */
-	private void cacheExpressionData()
-	{
-		if(Engine.isDrawingOpen())
-		{
-			VPathway drawing = Engine.getVPathway();
-			//Check for neccesary connections
-			if(Gex.isConnected() && Gdb.isConnected())
-			{
-				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
-				try {
-					dialog.run(true, true, Gex.createCacheRunnable(drawing.getMappIds(), drawing.getSystemCodes()));
-					drawing.redraw();
-				} catch(Exception e) {
-					String msg = "while caching expression data: " + e.getMessage();					
-					MessageDialog.openError (getShell(), "Error", 
-							"Error: " + msg + "\n\n" + 
-							"See the error log for details.");
-					Engine.log.error(msg, e);
-				}
-			}
-		}
-	}
 
 	/**
-	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
-	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
-	 */
-	public void deselectNewItemActions()
-	{
-		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-
-
-	/**
 	 * {@link Action} that opens an {@link GexImportWizard} that guides the user
 	 * through the steps required to create a new
 	 * expression dataset
@@ -480,112 +344,9 @@
 			}
 		}
 	}
-	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);		
-
-	public void deselectAlignItemActions()
-	{
-		IContributionItem[] items = alignActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
+	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);
 	
-	// Elements of the coolbar
-	ToolBarContributionItem commonActionsCI;
-	ToolBarContributionItem editActionsCI;
-	ToolBarContributionItem alignActionsCI;
-	ToolBarContributionItem visualizationCI;
-	ToolBarContributionItem viewActionsCI;
-	protected CoolBarManager createCoolBarManager(int style)
-	{
-		createCommonActionsCI();
-		createEditActionsCI();
-		createAlignActionsCI();
-		createViewActionsCI();
-		createVisualizationCI();
-		
-		CoolBarManager coolBarManager = new CoolBarManager(style);
-		coolBarManager.setLockLayout(true);
-		
-		coolBarManager.add(commonActionsCI);
-		coolBarManager.add(viewActionsCI);
-		coolBarManager.add(visualizationCI);
-		return coolBarManager;
-	}
-	
 	/**
-	 * Creates element of the coolbar containing common actions as new, save etc.
-	 */
-	protected void createCommonActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(newAction);
-		toolBarManager.add(openAction);
-		toolBarManager.add(saveAction);
-		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
-	}
-
-	/**
-	 * Creates element of the coolbar only shown in edit mode (new element actions)
-	 */
-	protected void createEditActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);		
-		toolBarManager.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLABEL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINEMENU));
-		toolBarManager.add(new NewElementAction(VPathway.NEWRECTANGLE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWOVAL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWARC));
-		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
-
-		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
-	}
-	
-	/**
-	 * Creates element of the coolbar containing controls related to viewing a pathway
-	 */
-	protected void createViewActionsCI()
-	{
-		final MainWindow window = this;
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		//Add zoomCombo
-		toolBarManager.add(new ControlContribution("ZoomCombo") {
-			protected Control createControl(Composite parent) {
-				final Combo zoomCombo = new Combo(parent, SWT.DROP_DOWN);
-				zoomCombo.setItems(new String[] { "200%", "100%", "75%", "50%", "Zoom to fit" });
-				zoomCombo.setText("100%");
-				zoomCombo.addSelectionListener(new SelectionAdapter() {
-					public void widgetSelected(SelectionEvent e) {
-						int pctZoom = 100;
-						String zoomText = zoomCombo.getText().replace("%", "");
-						try {
-							pctZoom = Integer.parseInt(zoomText);
-						} catch (Exception ex) { 
-							if(zoomText.equals("Zoom to fit"))
-									{ pctZoom = ZOOM_TO_FIT; } else { return; }
-						}
-						new CommonActions.ZoomAction(window, pctZoom).run();
-					}
-					public void widgetDefaultSelected(SelectionEvent e) { widgetSelected(e); }
-				});
-				return zoomCombo;
-			}
-		});
-		//Add swich to editmode
-		toolBarManager.add(switchEditModeAction);
-		
-		viewActionsCI =  new ToolBarContributionItem(toolBarManager, "SwitchActions");
-	}
-		
-	/**
 	 * Creates element of the coolbar containing controls related to visualizations
 	 */
 	protected void createVisualizationCI() {
@@ -596,39 +357,8 @@
 		visualizationCI = new ToolBarContributionItem(toolBarManager, "ColorSetActions");
 	}
 	
-	/**
-	 * Shows or hides the editActionsCI
-	 * @param show	true/false for either show or hide
-	 */
-	public void showEditActionsCI(boolean show)
-	{
-		if(show) {
-			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
-		}
-		else {
-			getCoolBarManager().remove(editActionsCI);
-		}
-//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
-		getCoolBarManager().update(true);
-	}
 
 	/**
-	   Shows or hides the alignActionsCI.
-	   @param show	true/false for either show or hide
-	*/
-	public void showAlignActionsCI(boolean show)
-	{
-		if(show) {
-			getCoolBarManager().insertAfter(editActionsCI.getId(), alignActionsCI);
-		}
-		else {
-			getCoolBarManager().remove(alignActionsCI);
-		}
-//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
-		getCoolBarManager().update(true);
-	}
-
-	/**
 	 * Shows or hides the visualizationCI
 	 * @param show	true/false for either show or hide
 	 */
@@ -708,53 +438,35 @@
 		menuManager.add(helpMenu);
 		return menuManager;
 	}
-	
-	public MainWindow()
-	{
-		this(null);
-	}
-	
-	private MenuManager menuManager = null;
+
+	ToolBarContributionItem visualizationCI;
+
 	/**
-	 * can be accessed by plugins etc. 
-	 * to add menu items and even complete menus.
-	 * 
-	 * (plugin API)
+	 * overrides craeteCoolBarManager in MainWindowBase.
+	 * this one also creates a visualizationCI. 
 	 */
-	public MenuManager getMenuManager()
+	protected CoolBarManager createCoolBarManager(int style)
 	{
-		return menuManager;
-	}
-	/**
-	 *Constructor for the MainWindow class
-	 *Initializes new MainWindow and sets properties for frame
-	 */
-	public MainWindow(Shell shell)
-	{
-		super(shell);
+		createCommonActionsCI();
+		createEditActionsCI();
+		createAlignActionsCI();
+		createViewActionsCI();
+		createVisualizationCI();
 		
-		addMenuBar();
-		addStatusLine();
-		addCoolBar(SWT.FLAT | SWT.LEFT);
+		CoolBarManager coolBarManager = new CoolBarManager(style);
+		coolBarManager.setLockLayout(true);
 		
-		Engine.addApplicationEventListener(this);
-		Gex.addListener(this);
+		coolBarManager.add(commonActionsCI);
+		coolBarManager.add(viewActionsCI);
+		
+		coolBarManager.add(visualizationCI);
+		
+		return coolBarManager;
 	}
 	
-	public boolean close() {
-		Engine.fireApplicationEvent(
-				new ApplicationEvent(this, ApplicationEvent.CLOSE_APPLICATION));
-		return super.close();
-	}
-	
-	public ScrolledComposite sc;
-	public BackpagePanel bpBrowser; //Browser for showing backpage information
-	public PropertyPanel propertyTable;	//Table showing properties of Graphics objects
-	SashForm sashForm; //SashForm containing the drawing area and sidebar
-	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
-	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
-	LegendPanel legend; //Legend to display colorset information
-
+	/**
+	 * Create and initialize widgets on the main window.
+	 */
 	protected Control createContents(Composite parent)
 	{		
 		Shell shell = parent.getShell();
@@ -800,91 +512,28 @@
 
 		Engine.updateTitle();
 		
-		return parent;
-		
+		return parent;		
 	};
-
-	public TabbedSidePanel getSidePanel() { return rightPanel; }
 	
-	public LegendPanel getLegend() { return legend; }
-	
-	public void showLegend(boolean show) {	
-		if(show && Gex.isConnected()) {
-			if(rightPanel.isVisible("Legend")) return; //Legend already visible, only refresh
-			rightPanel.unhideTab("Legend", 0);
-			rightPanel.selectTab("Legend");
-		}
-		
-		else rightPanel.hideTab("Legend");
-	}
-			
-	/**
-	 * Creates a new empty drawing canvas
-	 * @return the empty {@link VPathway}
-	 */
-	public VPathway createNewDrawing()
-	{		
-		return new VPathway(sc, SWT.NO_BACKGROUND);
-	}
-	
-	public void applicationEvent(ApplicationEvent e) {
-		VPathway drawing = null;
-		switch(e.type) {
-		case ApplicationEvent.NEW_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			break;
-		case ApplicationEvent.OPEN_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			if(Gex.isConnected()) cacheExpressionData();
-			break;	
-		}
-	}
-
-	public void expressionDataEvent(ExpressionDataEvent e) {
-		switch(e.type) {
-		case ExpressionDataEvent.CONNECTION_CLOSED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					showLegend(false);
-				}
-			});
-			break;
-		case ExpressionDataEvent.CONNECTION_OPENED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					cacheExpressionData();
-					showLegend(true);
-				}
-			});
-			break;
-		}
-	}
-
-	//	KH 20070514 begin
-	protected void createAlignActionsCI()
+	public MainWindow()
 	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(alignCenterXAction);
-		toolBarManager.add(alignCenterYAction);
-		toolBarManager.add(alignLeftAction);
-		toolBarManager.add(alignRightAction);
-		toolBarManager.add(alignTopAction);
-		toolBarManager.add(alignBottomAction);
-		toolBarManager.add(setCommonWidthAction);
-		toolBarManager.add(setCommonHeightAction);
-	
-		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
+		this(null);
 	}
 	
-//	KH end
 	/**
-	   Invoked when user tries to close window
-	*/
-	protected boolean canHandleShellCloseEvent()
+	 *Constructor for the MainWindow class
+	 *Initializes new MainWindow and sets properties for frame
+	 */
+	public MainWindow(Shell shell)
 	{
-		return Engine.canDiscardPathway();
+		super(shell);
+		
+		addMenuBar();
+		addStatusLine();
+		addCoolBar(SWT.FLAT | SWT.LEFT);
+		
+		Engine.addApplicationEventListener(this);
+		Gex.addListener(this);
 	}
-	
+
 } // end of class
Index: trunk/src/core/org/pathvisio/model/PathwayElement.java
===================================================================
--- trunk/src/core/org/pathvisio/model/PathwayElement.java	(revision 934)
+++ trunk/src/core/org/pathvisio/model/PathwayElement.java	(revision 935)
@@ -354,10 +354,10 @@
 			result.add (PropertyType.ENDY);
 			result.add (PropertyType.LINETYPE);
 			result.add (PropertyType.LINESTYLE);
-			result.add (PropertyType.STARTGRAPHREF);
-			result.add (PropertyType.ENDGRAPHREF);
 			if (fAdvanced)
 			{
+				result.add (PropertyType.STARTGRAPHREF);
+				result.add (PropertyType.ENDGRAPHREF);
 				result.add (PropertyType.GRAPHID);
 				result.add (PropertyType.GROUPREF);			
 				result.add (PropertyType.BIOPAXREF);
Index: trunk/src/core/org/pathvisio/gui/NewElementAction.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/NewElementAction.java	(revision 934)
+++ trunk/src/core/org/pathvisio/gui/NewElementAction.java	(revision 935)
@@ -25,7 +25,6 @@
 import org.pathvisio.view.VPathway;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.action.ActionContributionItem;
-import org.eclipse.jface.action.IContributionItem;
 
 /**
  * {@link Action} to add a new element to the gpml pathway
Index: trunk/src/core/org/pathvisio/gui/GdbCellEditor.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/GdbCellEditor.java	(revision 934)
+++ trunk/src/core/org/pathvisio/gui/GdbCellEditor.java	(revision 935)
@@ -42,7 +42,6 @@
 import org.pathvisio.data.DataSources;
 import org.pathvisio.data.Gdb;
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.model.MappFormat;
 import org.pathvisio.model.PropertyType;
 import org.pathvisio.gui.PropertyPanel.AutoFillData;
 
Index: trunk/src/core/org/pathvisio/gui/MainWindowBase.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/MainWindowBase.java	(revision 0)
+++ trunk/src/core/org/pathvisio/gui/MainWindowBase.java	(revision 935)
@@ -0,0 +1,425 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gui;
+
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.ActionContributionItem;
+import org.eclipse.jface.action.ControlContribution;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.action.IContributionItem;
+import org.eclipse.jface.action.MenuManager;
+import org.eclipse.jface.action.ToolBarContributionItem;
+import org.eclipse.jface.action.ToolBarManager;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
+import org.eclipse.jface.window.ApplicationWindow;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.custom.ScrolledComposite;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.widgets.Combo;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Shell;
+import org.pathvisio.data.DBConnector;
+import org.pathvisio.data.Gdb;
+import org.pathvisio.data.Gex;
+import org.pathvisio.data.Gex.ExpressionDataEvent;
+import org.pathvisio.data.Gex.ExpressionDataListener;
+import org.pathvisio.gui.Engine.ApplicationEvent;
+import org.pathvisio.gui.Engine.ApplicationEventListener;
+import org.pathvisio.preferences.Preferences;
+import org.pathvisio.search.PathwaySearchComposite;
+import org.pathvisio.view.GeneProduct;
+import org.pathvisio.view.VPathway;
+import org.pathvisio.visualization.LegendPanel;
+import org.pathvisio.visualization.VisualizationManager;
+
+/**
+ * MainWindowBase is an abstract and incomplete Main Window that contains some
+ * core functionality. This way we can create different flavours of the main window
+ * without having too much duplicate code. Descendants should at least provide
+ * a constructor, and override createCoolBarManager and createMenuManager.
+ */
+public abstract class MainWindowBase extends ApplicationWindow implements 
+	ApplicationEventListener, ExpressionDataListener
+{
+	private static final long serialVersionUID = 1L;
+	static int ZOOM_TO_FIT = -1;
+		
+	protected CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
+	protected CommonActions.NewAction newAction = new CommonActions.NewAction (this);
+	protected CommonActions.OpenAction openAction = new CommonActions.OpenAction (this);	
+	protected CommonActions.ImportAction importAction = new CommonActions.ImportAction (this);	
+	protected CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
+	protected CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
+	protected CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
+	protected CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
+	protected CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
+	protected CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
+	protected CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
+	protected CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
+	protected CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
+	protected CommonActions.SwitchEditModeAction switchEditModeAction = new CommonActions.SwitchEditModeAction(this);
+	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
+	protected SelectGdbAction selectGdbAction = new SelectGdbAction(this);
+	protected AlignActions.AlignCenterXAction alignCenterXAction = new AlignActions.AlignCenterXAction(this);
+	protected AlignActions.AlignCenterYAction alignCenterYAction = new AlignActions.AlignCenterYAction(this);
+	protected AlignActions.AlignLeftAction alignLeftAction = new AlignActions.AlignLeftAction(this);
+	protected AlignActions.AlignRightAction alignRightAction = new AlignActions.AlignRightAction(this);
+	protected AlignActions.AlignTopAction alignTopAction = new AlignActions.AlignTopAction(this);
+	protected AlignActions.AlignBottomAction alignBottomAction = new AlignActions.AlignBottomAction(this);
+	protected AlignActions.SetCommonWidthAction setCommonWidthAction = new AlignActions.SetCommonWidthAction(this);
+	protected AlignActions.SetCommonHeightAction setCommonHeightAction = new AlignActions.SetCommonHeightAction(this);
+
+	/**
+	 * {@link Action} to select a Gene Database
+	 */
+	private class SelectGdbAction extends Action
+	{
+		MainWindowBase window;
+		public SelectGdbAction(MainWindowBase w)
+		{
+			window = w;
+			setText("Select &Gene Database");
+			setToolTipText("Select Gene Database");
+		}
+		
+		public void run () {			
+			try {
+				DBConnector dbcon = Gdb.getDBConnector();
+				String dbName = dbcon.openChooseDbDialog(getShell());
+				
+				if(dbName == null) return;
+				
+				Gdb.connect(dbName);
+				setStatus("Using Gene Database: '" + Engine.getPreferences().getString(Preferences.PREF_CURR_GDB) + "'");
+				cacheExpressionData();
+			} catch(Exception e) {
+				String msg = "Failed to open Gene Database; " + e.getMessage();
+				MessageDialog.openError (window.getShell(), "Error", 
+						"Error: " + msg + "\n\n" + 
+						"See the error log for details.");
+				Engine.log.error(msg, e);
+			}
+		}
+	}
+
+	/**
+	 * deselect all buttons in the alignActionsCI coolbar
+	 */
+	public void deselectAlignItemActions()
+	{
+		IContributionItem[] items = alignActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
+	
+	/**
+	 * {@link Action} to show or hide the right sidepanel
+	 */
+	public class ShowRightPanelAction extends Action
+	{
+		MainWindowBase window;
+		public ShowRightPanelAction (MainWindowBase w)
+		{
+			super("Show &information panel", IAction.AS_CHECK_BOX);
+			window = w;
+			setChecked(true);
+		}
+		
+		public void run() {
+			if(isChecked()) rightPanel.show();
+			else rightPanel.hide();
+		}
+	}
+
+	/**
+	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
+	 */
+	private void cacheExpressionData()
+	{
+		if(Engine.isDrawingOpen())
+		{
+			VPathway drawing = Engine.getVPathway();
+			//Check for neccesary connections
+			if(Gex.isConnected() && Gdb.isConnected())
+			{
+				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
+				try {
+					dialog.run(true, true, Gex.createCacheRunnable(drawing.getMappIds(), drawing.getSystemCodes()));
+					drawing.redraw();
+				} catch(Exception e) {
+					String msg = "while caching expression data: " + e.getMessage();					
+					MessageDialog.openError (getShell(), "Error", 
+							"Error: " + msg + "\n\n" + 
+							"See the error log for details.");
+					Engine.log.error(msg, e);
+				}
+			}
+		}
+	}
+
+	/**
+	 * Deselects all {@link NewElementAction}s on the toolbar and sets 
+	 * {@link VPathway}.newGraphics to {@link VPathway}.NEWNONE
+	 */
+	public void deselectNewItemActions()
+	{
+		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
+
+	// Elements of the coolbar
+	ToolBarContributionItem commonActionsCI;
+	ToolBarContributionItem editActionsCI;
+	ToolBarContributionItem alignActionsCI;
+	ToolBarContributionItem viewActionsCI;
+	
+	/**
+	 * Creates element of the coolbar containing common actions as new, save etc.
+	 */
+	protected void createCommonActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(newAction);
+		toolBarManager.add(openAction);
+		toolBarManager.add(saveAction);
+		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
+	}
+
+	/**
+	 * Creates element of the coolbar only shown in edit mode (new element actions)
+	 */
+	protected void createEditActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);		
+		toolBarManager.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLABEL));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLINEMENU));
+		toolBarManager.add(new NewElementAction(VPathway.NEWRECTANGLE));
+		toolBarManager.add(new NewElementAction(VPathway.NEWOVAL));
+		toolBarManager.add(new NewElementAction(VPathway.NEWARC));
+		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
+		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
+
+		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
+	}
+	
+	/**
+	 * Creates element of the coolbar containing controls related to viewing a pathway
+	 */
+	protected void createViewActionsCI()
+	{
+		final MainWindowBase window = this;
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		//Add zoomCombo
+		toolBarManager.add(new ControlContribution("ZoomCombo") {
+			protected Control createControl(Composite parent) {
+				final Combo zoomCombo = new Combo(parent, SWT.DROP_DOWN);
+				zoomCombo.setItems(new String[] { "200%", "100%", "75%", "50%", "Zoom to fit" });
+				zoomCombo.setText("100%");
+				zoomCombo.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent e) {
+						int pctZoom = 100;
+						String zoomText = zoomCombo.getText().replace("%", "");
+						try {
+							pctZoom = Integer.parseInt(zoomText);
+						} catch (Exception ex) { 
+							if(zoomText.equals("Zoom to fit"))
+									{ pctZoom = ZOOM_TO_FIT; } else { return; }
+						}
+						new CommonActions.ZoomAction(window, pctZoom).run();
+					}
+					public void widgetDefaultSelected(SelectionEvent e) { widgetSelected(e); }
+				});
+				return zoomCombo;
+			}
+		});
+		//Add swich to editmode
+		toolBarManager.add(switchEditModeAction);
+		
+		viewActionsCI =  new ToolBarContributionItem(toolBarManager, "SwitchActions");
+	}
+		
+	/**
+	 * Shows or hides the editActionsCI
+	 * @param show	true/false for either show or hide
+	 */
+	public void showEditActionsCI(boolean show)
+	{
+		if(show) {
+			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
+		}
+		else {
+			getCoolBarManager().remove(editActionsCI);
+		}
+//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
+		getCoolBarManager().update(true);
+	}
+
+	/**
+	   Shows or hides the alignActionsCI.
+	   @param show	true/false for either show or hide
+	*/
+	public void showAlignActionsCI(boolean show)
+	{
+		if(show) {
+			getCoolBarManager().insertAfter(editActionsCI.getId(), alignActionsCI);
+		}
+		else {
+			getCoolBarManager().remove(alignActionsCI);
+		}
+//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
+		getCoolBarManager().update(true);
+	}
+	
+	//	KH 20070514 begin
+	/**
+	 * set up the alignActions coolbar
+	 */
+	protected void createAlignActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(alignCenterXAction);
+		toolBarManager.add(alignCenterYAction);
+		toolBarManager.add(alignLeftAction);
+		toolBarManager.add(alignRightAction);
+		toolBarManager.add(alignTopAction);
+		toolBarManager.add(alignBottomAction);
+		toolBarManager.add(setCommonWidthAction);
+		toolBarManager.add(setCommonHeightAction);
+	
+		alignActionsCI = new ToolBarContributionItem(toolBarManager, "AlignActions");
+	}
+	
+//	KH end
+	/**
+	   Invoked when user tries to close window.
+	   We'll ask the user if he wants to save the pathway
+	*/
+	protected boolean canHandleShellCloseEvent()
+	{
+		return Engine.canDiscardPathway();
+	}
+	
+	protected MenuManager menuManager = null;
+	/**
+	 * can be accessed by plugins etc. 
+	 * to add menu items and even complete menus.
+	 * 
+	 * (plugin API)
+	 */
+	public MenuManager getMenuManager()
+	{
+		return menuManager;
+	}
+		
+	public boolean close() {
+		Engine.fireApplicationEvent(
+				new ApplicationEvent(this, ApplicationEvent.CLOSE_APPLICATION));
+		return super.close();
+	}
+	
+	public ScrolledComposite sc;
+	public BackpagePanel bpBrowser; //Browser for showing backpage information
+	public PropertyPanel propertyTable;	//Table showing properties of Graphics objects
+	SashForm sashForm; //SashForm containing the drawing area and sidebar
+	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
+	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
+	LegendPanel legend; //Legend to display colorset information
+
+	public TabbedSidePanel getSidePanel() { return rightPanel; }
+	
+	public LegendPanel getLegend() { return legend; }
+	
+	public void showLegend(boolean show) {	
+		if(show && Gex.isConnected()) {
+			if(rightPanel.isVisible("Legend")) return; //Legend already visible, only refresh
+			rightPanel.unhideTab("Legend", 0);
+			rightPanel.selectTab("Legend");
+		}
+		
+		else rightPanel.hideTab("Legend");
+	}
+			
+	/**
+	 * Creates a new empty drawing canvas
+	 * @return the empty {@link VPathway}
+	 */
+	public VPathway createNewDrawing()
+	{		
+		return new VPathway(sc, SWT.NO_BACKGROUND);
+	}
+	
+	public void applicationEvent(ApplicationEvent e) {
+		VPathway drawing = null;
+		switch(e.type) {
+		case ApplicationEvent.NEW_PATHWAY:
+			drawing = Engine.getVPathway();
+			sc.setContent(drawing);
+			break;
+		case ApplicationEvent.OPEN_PATHWAY:
+			drawing = Engine.getVPathway();
+			sc.setContent(drawing);
+			if(Gex.isConnected()) cacheExpressionData();
+			break;	
+		}
+	}
+
+	public void expressionDataEvent(ExpressionDataEvent e) {
+		switch(e.type) {
+		case ExpressionDataEvent.CONNECTION_CLOSED:
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					showLegend(false);
+				}
+			});
+			break;
+		case ExpressionDataEvent.CONNECTION_OPENED:
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					cacheExpressionData();
+					showLegend(true);
+				}
+			});
+			break;
+		}
+	}
+	
+	public MainWindowBase(Shell shell)
+	{
+		super(shell);
+	}
+
+}

Property changes on: trunk/src/core/org/pathvisio/gui/MainWindowBase.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: trunk/src/core/org/pathvisio/gui/CommonActions.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 934)
+++ trunk/src/core/org/pathvisio/gui/CommonActions.java	(revision 935)
@@ -17,25 +17,19 @@
 package org.pathvisio.gui;
 
 import java.io.File;
-import java.lang.reflect.InvocationTargetException;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 
-import edu.stanford.ejalbert.BrowserLauncher;
 
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.preference.PreferenceManager;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.widgets.FileDialog;
 import org.pathvisio.Globals;
 import org.pathvisio.biopax.gui.BiopaxDialog;
@@ -46,7 +40,6 @@
 import org.pathvisio.model.PathwayExporter;
 import org.pathvisio.preferences.PreferenceDlg;
 import org.pathvisio.preferences.Preferences;
-import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
 import org.pathvisio.view.VPathway;
 
 /**
@@ -64,8 +57,8 @@
 {
 	static class UndoAction extends Action
 	{
-		MainWindow window;
-		public UndoAction (MainWindow w)
+		MainWindowBase window;
+		public UndoAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Undo@Ctrl+Z");
@@ -85,8 +78,8 @@
 	 */
 	static class NewAction extends Action 
 	{
-		MainWindow window;
-		public NewAction (MainWindow w)
+		MainWindowBase window;
+		public NewAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&New pathway@Ctrl+N");
@@ -105,8 +98,8 @@
 	 */
 	static class SvgExportAction extends Action 
 	{
-		MainWindow window;
-		public SvgExportAction (MainWindow w)
+		MainWindowBase window;
+		public SvgExportAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("Export to SVG");
@@ -187,8 +180,8 @@
 	 */
 	static class OpenAction extends Action 
 	{
-		MainWindow window;
-		public OpenAction (MainWindow w)
+		MainWindowBase window;
+		public OpenAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Open pathway@Ctrl+O");
@@ -217,8 +210,8 @@
 	 */
 	static class ImportAction extends Action 
 	{
-		MainWindow window;
-		public ImportAction (MainWindow w)
+		MainWindowBase window;
+		public ImportAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Import");
@@ -248,8 +241,8 @@
 	 */
 	static class SaveAsAction extends Action 
 	{
-		MainWindow window;
-		public SaveAsAction (MainWindow w)
+		MainWindowBase window;
+		public SaveAsAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("Save pathway &As");
@@ -268,8 +261,8 @@
 	 */
 	static class ExportAction extends Action 
 	{
-		MainWindow window;
-		public ExportAction (MainWindow w)
+		MainWindowBase window;
+		public ExportAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Export");
@@ -380,8 +373,8 @@
 	 */
 	static class ExitAction extends Action 
 	{
-		MainWindow window;
-		public ExitAction (MainWindow w)
+		MainWindowBase window;
+		public ExitAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("E&xit@Ctrl+X");
@@ -398,8 +391,8 @@
 	
 	static class PreferencesAction extends Action
 	{
-		MainWindow window;
-		public PreferencesAction (MainWindow w)
+		MainWindowBase window;
+		public PreferencesAction (MainWindowBase w)
 		{
 			window = w;
 			setText("&Preferences");
@@ -418,19 +411,19 @@
 	 */
 	static class ZoomAction extends Action 
 	{
-		MainWindow window;
+		MainWindowBase window;
 		int pctZoomFactor;
 		
 		/**
 		 * Constructor for this class
-		 * @param w {@link MainWindow} window this action belongs to
+		 * @param w {@link MainWindowBase} window this action belongs to
 		 * @param newPctZoomFactor the zoom factor as percentage of original
 		 */
-		public ZoomAction (MainWindow w, int newPctZoomFactor)
+		public ZoomAction (MainWindowBase w, int newPctZoomFactor)
 		{
 			window = w;
 			pctZoomFactor = newPctZoomFactor;
-			if(pctZoomFactor == MainWindow.ZOOM_TO_FIT) 
+			if(pctZoomFactor == MainWindowBase.ZOOM_TO_FIT) 
 			{
 				setText ("Zoom to fit");
 				setToolTipText("Zoom mapp to fit window");
@@ -446,7 +439,7 @@
 			if (drawing != null)
 			{
 				double newPctZoomFactor = pctZoomFactor;
-				if(pctZoomFactor == MainWindow.ZOOM_TO_FIT) 
+				if(pctZoomFactor == MainWindowBase.ZOOM_TO_FIT) 
 				{
 					Point shellSize = window.sc.getSize();
 					Point drawingSize = drawing.getSize();
@@ -470,8 +463,8 @@
 	 */
 	static class AboutAction extends Action 
 	{
-		MainWindow window;
-		public AboutAction (MainWindow w)
+		MainWindowBase window;
+		public AboutAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&About");
@@ -488,8 +481,8 @@
 	 */
 	static class HelpAction extends Action 
 	{
-		MainWindow window;
-		public HelpAction (MainWindow w)
+		MainWindowBase window;
+		public HelpAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Help@F1");
@@ -506,8 +499,8 @@
 
 	static class CopyAction extends Action
 	{
-		MainWindow window;
-		public CopyAction (MainWindow w)
+		MainWindowBase window;
+		public CopyAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("Copy@Ctrl+C");
@@ -521,8 +514,8 @@
 
 	static class PasteAction extends Action
 	{
-		MainWindow window;
-		public PasteAction (MainWindow w)
+		MainWindowBase window;
+		public PasteAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("Paste@Ctrl+V");
@@ -539,8 +532,8 @@
 	 */
 	static class SaveAction extends Action 
 	{
-		MainWindow window;
-		public SaveAction (MainWindow w)
+		MainWindowBase window;
+		public SaveAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("&Save pathway@Ctrl+S");
@@ -556,8 +549,8 @@
 	
 	static class BiopaxAction extends Action 
 	{
-		MainWindow window;
-		public BiopaxAction (MainWindow w)
+		MainWindowBase window;
+		public BiopaxAction (MainWindowBase w)
 		{
 			window = w;
 			setText ("Edit &BioPAX code");
@@ -579,8 +572,8 @@
 	{
 		final String ttChecked = "Exit edit mode";
 		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
-		MainWindow window;
-		public SwitchEditModeAction (MainWindow w)
+		MainWindowBase window;
+		public SwitchEditModeAction (MainWindowBase w)
 		{
 			super("&Edit mode", IAction.AS_CHECK_BOX);
 			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
Index: trunk/src/core/org/pathvisio/gui/AlignActions.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/AlignActions.java	(revision 934)
+++ trunk/src/core/org/pathvisio/gui/AlignActions.java	(revision 935)
@@ -34,8 +34,8 @@
 	
 		static class AlignCenterXAction extends Action 
 		{
-			MainWindow window;
-			public AlignCenterXAction (MainWindow w)
+			MainWindowBase window;
+			public AlignCenterXAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align horizontal centers");
@@ -52,8 +52,8 @@
 		
 		static class AlignCenterYAction extends Action 
 		{
-			MainWindow window;
-			public AlignCenterYAction (MainWindow w)
+			MainWindowBase window;
+			public AlignCenterYAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align vertical centers");
@@ -69,8 +69,8 @@
 		}
 		static class AlignLeftAction extends Action 
 		{
-			MainWindow window;
-			public AlignLeftAction (MainWindow w)
+			MainWindowBase window;
+			public AlignLeftAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align left edges");
@@ -86,8 +86,8 @@
 		}
 		static class AlignRightAction extends Action 
 		{
-			MainWindow window;
-			public AlignRightAction (MainWindow w)
+			MainWindowBase window;
+			public AlignRightAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align right edges");
@@ -103,8 +103,8 @@
 		}
 		static class AlignTopAction extends Action 
 		{
-			MainWindow window;
-			public AlignTopAction (MainWindow w)
+			MainWindowBase window;
+			public AlignTopAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align top edges");
@@ -120,8 +120,8 @@
 		}
 		static class AlignBottomAction extends Action 
 		{
-			MainWindow window;
-			public AlignBottomAction (MainWindow w)
+			MainWindowBase window;
+			public AlignBottomAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Align bottom edges");
@@ -137,8 +137,8 @@
 		}
 		static class SetCommonHeightAction extends Action 
 		{
-			MainWindow window;
-			public SetCommonHeightAction (MainWindow w)
+			MainWindowBase window;
+			public SetCommonHeightAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Set common height");
@@ -154,8 +154,8 @@
 		}
 		static class SetCommonWidthAction extends Action 
 		{
-			MainWindow window;
-			public SetCommonWidthAction (MainWindow w)
+			MainWindowBase window;
+			public SetCommonWidthAction (MainWindowBase w)
 			{
 				window = w;
 				setToolTipText ("Set common width");
Index: trunk/src/core/org/pathvisio/search/PathwaySearchComposite.java
===================================================================
--- trunk/src/core/org/pathvisio/search/PathwaySearchComposite.java	(revision 934)
+++ trunk/src/core/org/pathvisio/search/PathwaySearchComposite.java	(revision 935)
@@ -40,7 +40,7 @@
 import org.eclipse.swt.widgets.Text;
 
 import org.pathvisio.gui.Engine;
-import org.pathvisio.gui.MainWindow;
+import org.pathvisio.gui.MainWindowBase;
 import org.pathvisio.preferences.Preferences;
 import org.pathvisio.search.SearchMethods.SearchException;
 import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
@@ -50,11 +50,11 @@
 
 	HashMap<String, SearchOptionComposite> searchControls;
 	
-	MainWindow gmmlVision;
+	MainWindowBase window;
 	
-	public PathwaySearchComposite(Composite parent, int style, MainWindow gmmlVision) {
+	public PathwaySearchComposite(Composite parent, int style, MainWindowBase window) {
 		super(parent, style);
-		this.gmmlVision = gmmlVision;
+		this.window = window;
 				
 		setLayout(new GridLayout());
 		initSearchComposite();
Index: trunk/src/core/org/pathvisio/data/GpmlTransfer.java
===================================================================
--- trunk/src/core/org/pathvisio/data/GpmlTransfer.java	(revision 934)
+++ trunk/src/core/org/pathvisio/data/GpmlTransfer.java	(revision 935)
@@ -54,7 +54,7 @@
 		if (!(data instanceof List)) { return; } // wrong type of data
 		
 		byte[] result = null;
-		List<PathwayElement> clipboard = (List<PathwayElement>)data;
+		List<PathwayElement> clipboard = (List<PathwayElement>)(data);
 		Document doc = new Document();
 		Namespace ns = Namespace.getNamespace("http://www.w3.org/2000/svg");
 
